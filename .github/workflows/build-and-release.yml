name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: [self-hosted, linux, medium]
    # Skip tests on tag pushes
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    defaults:
      run:
        working-directory: ./controlplane
    env:
      KECS_TEST_MODE: "true"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'controlplane/go.mod'
          cache: true
      - name: Verify dependencies
        run: go mod verify
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Calculate coverage
        id: coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const body = `## üìä Test Coverage Report

            **Coverage:** ${coverage}%

            | Status | Coverage |
            |--------|----------|
            | ${coverage >= 60 ? '‚úÖ' : '‚ö†Ô∏è'} | ${coverage}% |

            ${coverage < 60 ? '‚ö†Ô∏è Coverage is below 60% threshold' : '‚úÖ Coverage meets minimum threshold'}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      # Run Trivy vulnerability scanner for filesystem
      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build yet, just report

      - name: Upload Trivy results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker image
    needs: [test]
    runs-on: [self-hosted, linux, medium]
    # Run on main branch pushes and tags, not on PRs
    # For tags, test job is skipped so we use always() to ensure this runs
    if: |
      always() && 
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) &&
      !contains(needs.test.result, 'failure')
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Git describe
        id: git_describe
        run: echo "GIT_DESCRIBE=$(git describe --tags --always)" >> $GITHUB_OUTPUT
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.git_describe.outputs.GIT_DESCRIBE }}
            type=raw,value=latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./controlplane
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}

      # Run Trivy vulnerability scanner for Docker image
      - name: Run Trivy vulnerability scanner (Docker image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git_describe.outputs.GIT_DESCRIBE }}'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build yet, just report

      - name: Upload Docker Trivy results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-docker-results.sarif'

  create-release:
    name: Create GitHub Release
    needs: build-and-push
    runs-on: ubuntu-latest
    # Only run on tag pushes
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          generate_release_notes: true
          body: |
            ## Docker Image
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ## Installation
            
            ### Homebrew (macOS/Linux)
            ```bash
            brew tap nandemo-ya/kecs
            brew install kecs
            ```
            
            ### Direct Download
            Download the appropriate binary for your platform from the release assets.
            
            ## What's Changed
            
            Auto-generated release notes are below.
