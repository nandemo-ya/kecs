name: Scenario Tests - Phase 1

on:
  pull_request:
    paths:
      - 'tests/scenarios/**'
      - 'controlplane/**'
      - '.github/workflows/scenario-tests.yml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  phase1-foundation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: tests/scenarios/go.mod

      - name: Download dependencies
        run: |
          cd tests/scenarios
          go mod download
          go mod tidy

      - name: Install AWS CLI v2
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false
          arch: amd64

      - name: Build KECS Docker image
        run: |
          cd controlplane
          docker build -t kecs:test .

      - name: Run Phase 1 tests
        id: test
        run: |
          cd tests/scenarios
          # Run tests with JUnit output for reporting
          go run github.com/onsi/ginkgo/v2/ginkgo -v -timeout 30m \
            --junit-report=junit.xml \
            --output-dir=. \
            ./cluster/... | tee test-output.log
          
          # Capture exit code
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        env:
          KECS_LOG_LEVEL: info

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-phase1
          path: |
            tests/scenarios/junit.xml
            tests/scenarios/test-output.log

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always() && github.event_name == 'pull_request'
        with:
          name: Scenario Tests Report
          path: tests/scenarios/junit.xml
          reporter: java-junit
          fail-on-error: false

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test output
            let testOutput = '';
            try {
              testOutput = fs.readFileSync('tests/scenarios/test-output.log', 'utf8');
            } catch (e) {
              testOutput = 'Failed to read test output';
            }
            
            // Extract test summary from output
            const summaryMatch = testOutput.match(/Ran (\d+) of (\d+) Specs in .*/);
            const passedMatch = testOutput.match(/(\d+) Passed/);
            const failedMatch = testOutput.match(/(\d+) Failed/);
            const pendingMatch = testOutput.match(/(\d+) Pending/);
            const skippedMatch = testOutput.match(/(\d+) Skipped/);
            
            let summary = '## üß™ Scenario Test Results\n\n';
            
            if (summaryMatch) {
              summary += `**Test Summary:**\n`;
              summary += `- Total Specs: ${summaryMatch[2]}\n`;
              summary += `- Ran: ${summaryMatch[1]}\n`;
              if (passedMatch) summary += `- ‚úÖ Passed: ${passedMatch[1]}\n`;
              if (failedMatch) summary += `- ‚ùå Failed: ${failedMatch[1]}\n`;
              if (pendingMatch) summary += `- ‚è∏Ô∏è Pending: ${pendingMatch[1]}\n`;
              if (skippedMatch) summary += `- ‚è≠Ô∏è Skipped: ${skippedMatch[1]}\n`;
              
              summary += '\n';
              
              // Add success/failure badge
              if (failedMatch && failedMatch[1] === '0') {
                summary += '### ‚úÖ All tests passed!\n\n';
              } else if (failedMatch && failedMatch[1] !== '0') {
                summary += '### ‚ùå Some tests failed\n\n';
              }
            }
            
            // Add test details section
            summary += '<details>\n<summary>Test Output Details</summary>\n\n';
            summary += '```\n';
            // Get last 50 lines of output for brevity
            const lines = testOutput.split('\n');
            const lastLines = lines.slice(-50).join('\n');
            summary += lastLines;
            summary += '\n```\n</details>';
            
            // Comment on PR
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
              console.log('Successfully posted test results to PR');
            } catch (error) {
              console.error('Failed to post comment:', error);
              // Don't fail the workflow if commenting fails
            }