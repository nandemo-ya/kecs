name: KECS on Actions

on:
  workflow_dispatch:
    inputs:
      kecs_version:
        description: 'KECS version to install'
        required: false
        default: 'latest'
        type: string
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup KECS
      uses: nandemo-ya/kecs-action@v1
      id: kecs
      with:
        kecs-version: ${{ inputs.kecs_version }}
        instance-name: actions-test
        debug: ${{ inputs.debug }}

    - name: Configure AWS CLI
      run: |
        # Set dummy AWS credentials for KECS testing
        # KECS doesn't require real AWS credentials
        mkdir -p ~/.aws
        cat > ~/.aws/credentials <<EOF
        [default]
        aws_access_key_id = test
        aws_secret_access_key = test
        EOF
        cat > ~/.aws/config <<EOF
        [default]
        region = us-east-1
        output = json
        EOF

    - name: Verify KECS Setup
      run: |
        # Verify environment variables are set
        echo "AWS_ENDPOINT_URL: $AWS_ENDPOINT_URL"
        echo "KUBECONFIG: $KUBECONFIG"

        # Verify outputs
        echo "Instance name: ${{ steps.kecs.outputs.instance-name }}"
        echo "Endpoint: ${{ steps.kecs.outputs.endpoint }}"
        echo "Admin endpoint: ${{ steps.kecs.outputs.admin-endpoint }}"

        # Check kubectl connection
        kubectl cluster-info
        kubectl get pods -n kecs-system

        # Wait for KECS controlplane to be fully ready
        echo "Waiting for KECS controlplane to be ready..."
        kubectl wait --for=condition=ready pod -l app=kecs-controlplane -n kecs-system --timeout=120s || true

        # Additional wait for API to be fully initialized
        echo "Waiting for KECS API to be ready..."
        sleep 10

        # Verify API is responding
        for i in {1..30}; do
          echo "Attempt $i: Testing ECS API endpoint..."
          if aws ecs list-clusters --no-cli-pager 2>&1 | grep -q "clusterArns"; then
            echo "✅ KECS API is ready"
            break
          else
            if [ $i -eq 30 ]; then
              echo "❌ KECS API did not become ready in time"
              echo "Checking KECS logs..."
              kubectl logs -n kecs-system -l app=kecs-controlplane --tail=50 || true
              exit 1
            fi
            echo "Waiting for API to be ready..."
            sleep 2
          fi
        done

    - name: Create ECS Cluster
      run: |
        # Create cluster
        aws ecs create-cluster --cluster-name default

        # List clusters
        aws ecs list-clusters

        # Wait for namespace creation
        echo "Waiting for namespace creation..."
        sleep 5

        # Check if default-us-east-1 namespace was created
        echo ""
        echo "=== Checking for ECS cluster namespace ==="
        kubectl get namespace default-us-east-1 || echo "Warning: Namespace 'default-us-east-1' not found"

    - name: Register Task Definition
      run: |
        # Register nginx task definition
        aws ecs register-task-definition \
          --cli-input-json file://examples/single-task-nginx/task_def.json

        # List task definitions
        aws ecs list-task-definitions

    - name: Run Task
      run: |
        # Check KECS logs before running task
        echo "=== KECS logs before RunTask ==="
        kubectl logs -n kecs-system -l app=kecs-controlplane --tail=20 || {
          echo "Failed to get logs, checking pod status..."
          kubectl get pods -n kecs-system
        }

        # Check if namespace was created
        echo "=== Checking namespaces ==="
        kubectl get namespaces | grep default || echo "Failed to list namespaces"

        # Run the task with FARGATE (as originally designed)
        echo "=== Running ECS task ==="
        # First, check if the task definition exists
        aws ecs describe-task-definition --task-definition single-task-nginx:1 || echo "Task definition not found"

        # Try running task with FARGATE and minimal network config
        # Note: Connection close error is expected but tasks are still created
        TASK_OUTPUT=$(aws ecs run-task \
          --cluster default \
          --task-definition single-task-nginx:1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],assignPublicIp=ENABLED}" 2>&1) || {
            echo "RunTask API call failed (this is expected due to connection close)"
            echo "Output: $TASK_OUTPUT"

            # Check if it's the connection closed error
            if echo "$TASK_OUTPUT" | grep -q "Connection was closed"; then
              echo "INFO: Connection closed error detected - this is a known issue but tasks are still created"
            else
              echo "WARNING: Unexpected error occurred"
            fi
        }

        # Wait for task to be created despite the connection error
        echo "Waiting for task creation to complete..."
        sleep 15

        # Verify that tasks were actually created
        echo "=== Verifying task creation ==="

        # Check Kubernetes pods in the namespace (primary verification)
        POD_COUNT=$(kubectl get pods -n default-us-east-1 --no-headers 2>/dev/null | wc -l || echo "0")
        echo "Found $POD_COUNT pods in default-us-east-1 namespace"

        if [ "$POD_COUNT" -gt 0 ]; then
          echo "✅ SUCCESS: Tasks were created successfully despite connection error"
          kubectl get pods -n default-us-east-1
        else
          echo "❌ ERROR: No pods found - tasks may not have been created"

          # Additional debugging
          echo "=== KECS logs after RunTask attempt ==="
          kubectl logs -n kecs-system -l app=kecs-controlplane --tail=50 | grep -A5 -B5 "RunTask\|nginx" || true
        fi

        # List running tasks via ECS API
        echo "=== Listing tasks via ECS API ==="
        aws ecs list-tasks --cluster default || echo "Failed to list tasks"

        # Describe tasks to check status
        TASK_ARNS=$(aws ecs list-tasks --cluster default --query 'taskArns' --output text 2>/dev/null || echo "")
        if [ ! -z "$TASK_ARNS" ]; then
          echo "=== Describing tasks ==="
          aws ecs describe-tasks --cluster default --tasks $TASK_ARNS
        else
          echo "No tasks found via ECS API"
        fi

        # Final status check
        if [ "$POD_COUNT" -eq 0 ]; then
          echo "ERROR: Task creation verification failed"
          exit 1
        fi

    - name: Create Service
      run: |
        echo "=== Creating ECS Service ==="

        # Create service with correct task definition reference
        cat > /tmp/service_def.json <<EOF
        {
          "serviceName": "single-task-nginx",
          "cluster": "default",
          "taskDefinition": "single-task-nginx:1",
          "desiredCount": 1,
          "launchType": "FARGATE",
          "networkConfiguration": {
            "awsvpcConfiguration": {
              "subnets": ["subnet-12345"],
              "securityGroups": ["sg-12345"],
              "assignPublicIp": "ENABLED"
            }
          }
        }
        EOF

        echo "Service definition:"
        cat /tmp/service_def.json

        # Create service (may also have connection issues)
        SERVICE_OUTPUT=$(aws ecs create-service --cli-input-json file:///tmp/service_def.json 2>&1) || {
          echo "CreateService API call failed"
          echo "Output: $SERVICE_OUTPUT"

          # Check if it's the connection closed error
          if echo "$SERVICE_OUTPUT" | grep -q "Connection was closed"; then
            echo "INFO: Connection closed error detected - checking if service was created anyway"
          else
            echo "WARNING: Unexpected error occurred"
          fi
        }

        # Wait for service processing
        echo "Waiting for service creation to complete..."
        sleep 10

        # List services
        echo "=== Listing services ==="
        aws ecs list-services --cluster default || echo "Failed to list services"

        # Describe service if it exists
        echo "=== Describing service ==="
        aws ecs describe-services --cluster default --services single-task-nginx || echo "Failed to describe service"

        # Check for Kubernetes deployment/service resources
        echo "=== Checking Kubernetes resources ==="
        kubectl get deployments -n default-us-east-1 || echo "No deployments found"
        kubectl get services -n default-us-east-1 || echo "No services found"
        kubectl get pods -n default-us-east-1 || echo "No pods found"

    - name: Test Summary
      if: success()
      run: |
        echo "================================================"
        echo "          KECS E2E TEST SUMMARY"
        echo "================================================"

        echo ""
        echo "✅ Test Results:"
        echo "  - KECS cluster creation: SUCCESS"
        echo "  - ECS cluster creation: SUCCESS"
        echo "  - Task definition registration: SUCCESS"
        echo "  - Task execution: SUCCESS (with known connection issue)"
        echo "  - Service creation: CHECK RESULTS ABOVE"

        echo ""
        echo "📊 Resource Status:"

        # ECS Resources
        echo ""
        echo "ECS Resources:"
        CLUSTER_COUNT=$(aws ecs list-clusters --query 'clusterArns | length(@)' --output text 2>/dev/null || echo "0")
        TASKDEF_COUNT=$(aws ecs list-task-definitions --query 'taskDefinitionArns | length(@)' --output text 2>/dev/null || echo "0")
        TASK_COUNT=$(aws ecs list-tasks --cluster default --query 'taskArns | length(@)' --output text 2>/dev/null || echo "0")
        SERVICE_COUNT=$(aws ecs list-services --cluster default --query 'serviceArns | length(@)' --output text 2>/dev/null || echo "0")

        echo "  - Clusters: $CLUSTER_COUNT"
        echo "  - Task Definitions: $TASKDEF_COUNT"
        echo "  - Running Tasks: $TASK_COUNT"
        echo "  - Services: $SERVICE_COUNT"

        # Kubernetes Resources
        echo ""
        echo "Kubernetes Resources:"
        NS_COUNT=$(kubectl get namespaces | grep -c "default-" || echo "0")
        POD_COUNT=$(kubectl get pods -n default-us-east-1 --no-headers 2>/dev/null | wc -l || echo "0")
        DEPLOY_COUNT=$(kubectl get deployments -n default-us-east-1 --no-headers 2>/dev/null | wc -l || echo "0")
        SVC_COUNT=$(kubectl get services -n default-us-east-1 --no-headers 2>/dev/null | wc -l || echo "0")

        echo "  - ECS Namespaces: $NS_COUNT"
        echo "  - Pods: $POD_COUNT"
        echo "  - Deployments: $DEPLOY_COUNT"
        echo "  - Services: $SVC_COUNT"

        echo ""
        echo "================================================"
        echo "Note: Connection closed errors are a known issue"
        echo "but do not affect actual resource creation."
        echo "================================================"

    - name: Cleanup KECS (with logs)
      if: failure()
      uses: nandemo-ya/kecs-action/cleanup@v1
      with:
        instance-name: ${{ steps.kecs.outputs.instance-name }}
        collect-logs: 'true'

    - name: Cleanup KECS (without logs)
      if: success() || cancelled()
      uses: nandemo-ya/kecs-action/cleanup@v1
      with:
        instance-name: ${{ steps.kecs.outputs.instance-name }}
        collect-logs: 'false'
