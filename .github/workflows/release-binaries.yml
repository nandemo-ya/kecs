name: Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: Darwin_x86_64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            suffix: Darwin_arm64
          # Linux builds
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: Linux_x86_64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: Linux_arm64
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install Linux cross-compilation tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Set cross-compilation environment for Linux ARM64
          if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi
          
          # Build the binary
          go build \
            -ldflags "-s -w -X github.com/nandemo-ya/kecs/controlplane/internal/controlplane/cmd.Version=${{ steps.version.outputs.version }}" \
            -o kecs-${{ matrix.goos }}-${{ matrix.goarch }} \
            ./controlplane/cmd/controlplane

      - name: Create archive
        run: |
          mkdir -p dist
          cp README.md LICENSE dist/
          
          if [ "${{ matrix.goos }}" = "darwin" ] || [ "${{ matrix.goos }}" = "linux" ]; then
            mv kecs-${{ matrix.goos }}-${{ matrix.goarch }} dist/kecs
            tar czf kecs_${{ steps.version.outputs.version }}_${{ matrix.suffix }}.tar.gz -C dist .
          else
            mv kecs-${{ matrix.goos }}-${{ matrix.goarch }}.exe dist/kecs.exe
            zip -j kecs_${{ steps.version.outputs.version }}_${{ matrix.suffix }}.zip dist/*
          fi

      - name: Generate checksum
        run: |
          if [ "${{ matrix.goos }}" = "darwin" ] || [ "${{ matrix.goos }}" = "linux" ]; then
            shasum -a 256 kecs_*.tar.gz > checksum-${{ matrix.suffix }}.txt
          else
            shasum -a 256 kecs_*.zip > checksum-${{ matrix.suffix }}.txt
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.suffix }}
          path: |
            kecs_*.tar.gz
            kecs_*.zip
            checksum-*.txt

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Merge checksums
        run: |
          cat ./artifacts/*/checksum-*.txt > checksums.txt

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/*/*.tar.gz
            ./artifacts/*/*.zip
            checksums.txt
          draft: false
          # v0.0.x are considered pre-releases
          prerelease: ${{ startsWith(github.ref_name, 'v0.0.') }}
          generate_release_notes: true
          body: |
            ## KECS ${{ steps.version.outputs.version }}
            
            ### Installation
            
            #### Homebrew (macOS/Linux)
            ```bash
            brew tap nandemo-ya/kecs
            brew install kecs
            ```
            
            #### Direct Download
            Download the appropriate binary for your platform from the assets below.
            
            #### Docker
            ```bash
            docker pull ghcr.io/nandemo-ya/kecs:${{ steps.version.outputs.version }}
            ```
            
            ### Supported Platforms
            - macOS (Intel & Apple Silicon)
            - Linux (x86_64 & ARM64)
            
            ### Verify Installation
            ```bash
            kecs version
            ```
            
            ## What's Changed
            See the changelog below for details.

  update-homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    # Only update Homebrew for stable releases (>= v0.1.0)
    if: ${{ !startsWith(github.ref_name, 'v0.0.') }}
    
    steps:
      - name: Checkout homebrew-kecs
        uses: actions/checkout@v4
        with:
          repository: nandemo-ya/homebrew-kecs
          token: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          path: homebrew-kecs

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update Formula
        run: |
          cd homebrew-kecs
          
          # Download checksums
          curl -sL https://github.com/nandemo-ya/kecs/releases/download/${{ github.ref_name }}/checksums.txt -o checksums.txt
          
          # Extract SHA256 for each platform
          SHA_DARWIN_AMD64=$(grep "Darwin_x86_64" checksums.txt | cut -d' ' -f1)
          SHA_DARWIN_ARM64=$(grep "Darwin_arm64" checksums.txt | cut -d' ' -f1)
          SHA_LINUX_AMD64=$(grep "Linux_x86_64" checksums.txt | cut -d' ' -f1)
          SHA_LINUX_ARM64=$(grep "Linux_arm64" checksums.txt | cut -d' ' -f1)
          
          # Update Formula
          cat > Formula/kecs.rb << EOF
          class Kecs < Formula
            desc "Kubernetes-based ECS Compatible Service"
            homepage "https://github.com/nandemo-ya/kecs"
            version "${{ steps.version.outputs.version }}"
            license "Apache-2.0"
          
            on_macos do
              if Hardware::CPU.intel?
                url "https://github.com/nandemo-ya/kecs/releases/download/v${{ steps.version.outputs.version }}/kecs_v${{ steps.version.outputs.version }}_Darwin_x86_64.tar.gz"
                sha256 "${SHA_DARWIN_AMD64}"
              else
                url "https://github.com/nandemo-ya/kecs/releases/download/v${{ steps.version.outputs.version }}/kecs_v${{ steps.version.outputs.version }}_Darwin_arm64.tar.gz"
                sha256 "${SHA_DARWIN_ARM64}"
              end
            end
          
            on_linux do
              if Hardware::CPU.intel?
                url "https://github.com/nandemo-ya/kecs/releases/download/v${{ steps.version.outputs.version }}/kecs_v${{ steps.version.outputs.version }}_Linux_x86_64.tar.gz"
                sha256 "${SHA_LINUX_AMD64}"
              else
                url "https://github.com/nandemo-ya/kecs/releases/download/v${{ steps.version.outputs.version }}/kecs_v${{ steps.version.outputs.version }}_Linux_arm64.tar.gz"
                sha256 "${SHA_LINUX_ARM64}"
              end
            end
          
            def install
              bin.install "kecs"
            end
          
            test do
              system "#{bin}/kecs", "version"
            end
          end
          EOF
          
          # Commit and push
          git config user.name "KECS Bot"
          git config user.email "kecs-bot@nandemo-ya.github.io"
          git add Formula/kecs.rb
          git commit -m "Update KECS to version ${{ steps.version.outputs.version }}"
          git push