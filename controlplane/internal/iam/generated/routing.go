// Code generated by cmd/codegen. DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for iam API
type Router struct {
	api AWSIdentityManagementV20100508API
}

// NewRouter creates a new router for iam API
func NewRouter(api AWSIdentityManagementV20100508API) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "AddClientIDToOpenIDConnectProvider":
		r.handleAddClientIDToOpenIDConnectProvider(w, req)

	case "AddRoleToInstanceProfile":
		r.handleAddRoleToInstanceProfile(w, req)

	case "AddUserToGroup":
		r.handleAddUserToGroup(w, req)

	case "AttachGroupPolicy":
		r.handleAttachGroupPolicy(w, req)

	case "AttachRolePolicy":
		r.handleAttachRolePolicy(w, req)

	case "AttachUserPolicy":
		r.handleAttachUserPolicy(w, req)

	case "ChangePassword":
		r.handleChangePassword(w, req)

	case "CreateAccessKey":
		r.handleCreateAccessKey(w, req)

	case "CreateAccountAlias":
		r.handleCreateAccountAlias(w, req)

	case "CreateGroup":
		r.handleCreateGroup(w, req)

	case "CreateInstanceProfile":
		r.handleCreateInstanceProfile(w, req)

	case "CreateLoginProfile":
		r.handleCreateLoginProfile(w, req)

	case "CreateOpenIDConnectProvider":
		r.handleCreateOpenIDConnectProvider(w, req)

	case "CreatePolicy":
		r.handleCreatePolicy(w, req)

	case "CreatePolicyVersion":
		r.handleCreatePolicyVersion(w, req)

	case "CreateRole":
		r.handleCreateRole(w, req)

	case "CreateSAMLProvider":
		r.handleCreateSAMLProvider(w, req)

	case "CreateServiceLinkedRole":
		r.handleCreateServiceLinkedRole(w, req)

	case "CreateServiceSpecificCredential":
		r.handleCreateServiceSpecificCredential(w, req)

	case "CreateUser":
		r.handleCreateUser(w, req)

	case "CreateVirtualMFADevice":
		r.handleCreateVirtualMFADevice(w, req)

	case "DeactivateMFADevice":
		r.handleDeactivateMFADevice(w, req)

	case "DeleteAccessKey":
		r.handleDeleteAccessKey(w, req)

	case "DeleteAccountAlias":
		r.handleDeleteAccountAlias(w, req)

	case "DeleteAccountPasswordPolicy":
		r.handleDeleteAccountPasswordPolicy(w, req)

	case "DeleteGroup":
		r.handleDeleteGroup(w, req)

	case "DeleteGroupPolicy":
		r.handleDeleteGroupPolicy(w, req)

	case "DeleteInstanceProfile":
		r.handleDeleteInstanceProfile(w, req)

	case "DeleteLoginProfile":
		r.handleDeleteLoginProfile(w, req)

	case "DeleteOpenIDConnectProvider":
		r.handleDeleteOpenIDConnectProvider(w, req)

	case "DeletePolicy":
		r.handleDeletePolicy(w, req)

	case "DeletePolicyVersion":
		r.handleDeletePolicyVersion(w, req)

	case "DeleteRole":
		r.handleDeleteRole(w, req)

	case "DeleteRolePermissionsBoundary":
		r.handleDeleteRolePermissionsBoundary(w, req)

	case "DeleteRolePolicy":
		r.handleDeleteRolePolicy(w, req)

	case "DeleteSAMLProvider":
		r.handleDeleteSAMLProvider(w, req)

	case "DeleteSSHPublicKey":
		r.handleDeleteSSHPublicKey(w, req)

	case "DeleteServerCertificate":
		r.handleDeleteServerCertificate(w, req)

	case "DeleteServiceLinkedRole":
		r.handleDeleteServiceLinkedRole(w, req)

	case "DeleteServiceSpecificCredential":
		r.handleDeleteServiceSpecificCredential(w, req)

	case "DeleteSigningCertificate":
		r.handleDeleteSigningCertificate(w, req)

	case "DeleteUser":
		r.handleDeleteUser(w, req)

	case "DeleteUserPermissionsBoundary":
		r.handleDeleteUserPermissionsBoundary(w, req)

	case "DeleteUserPolicy":
		r.handleDeleteUserPolicy(w, req)

	case "DeleteVirtualMFADevice":
		r.handleDeleteVirtualMFADevice(w, req)

	case "DetachGroupPolicy":
		r.handleDetachGroupPolicy(w, req)

	case "DetachRolePolicy":
		r.handleDetachRolePolicy(w, req)

	case "DetachUserPolicy":
		r.handleDetachUserPolicy(w, req)

	case "DisableOrganizationsRootCredentialsManagement":
		r.handleDisableOrganizationsRootCredentialsManagement(w, req)

	case "DisableOrganizationsRootSessions":
		r.handleDisableOrganizationsRootSessions(w, req)

	case "EnableMFADevice":
		r.handleEnableMFADevice(w, req)

	case "EnableOrganizationsRootCredentialsManagement":
		r.handleEnableOrganizationsRootCredentialsManagement(w, req)

	case "EnableOrganizationsRootSessions":
		r.handleEnableOrganizationsRootSessions(w, req)

	case "GenerateCredentialReport":
		r.handleGenerateCredentialReport(w, req)

	case "GenerateOrganizationsAccessReport":
		r.handleGenerateOrganizationsAccessReport(w, req)

	case "GenerateServiceLastAccessedDetails":
		r.handleGenerateServiceLastAccessedDetails(w, req)

	case "GetAccessKeyLastUsed":
		r.handleGetAccessKeyLastUsed(w, req)

	case "GetAccountAuthorizationDetails":
		r.handleGetAccountAuthorizationDetails(w, req)

	case "GetAccountPasswordPolicy":
		r.handleGetAccountPasswordPolicy(w, req)

	case "GetAccountSummary":
		r.handleGetAccountSummary(w, req)

	case "GetContextKeysForCustomPolicy":
		r.handleGetContextKeysForCustomPolicy(w, req)

	case "GetContextKeysForPrincipalPolicy":
		r.handleGetContextKeysForPrincipalPolicy(w, req)

	case "GetCredentialReport":
		r.handleGetCredentialReport(w, req)

	case "GetGroup":
		r.handleGetGroup(w, req)

	case "GetGroupPolicy":
		r.handleGetGroupPolicy(w, req)

	case "GetInstanceProfile":
		r.handleGetInstanceProfile(w, req)

	case "GetLoginProfile":
		r.handleGetLoginProfile(w, req)

	case "GetMFADevice":
		r.handleGetMFADevice(w, req)

	case "GetOpenIDConnectProvider":
		r.handleGetOpenIDConnectProvider(w, req)

	case "GetOrganizationsAccessReport":
		r.handleGetOrganizationsAccessReport(w, req)

	case "GetPolicy":
		r.handleGetPolicy(w, req)

	case "GetPolicyVersion":
		r.handleGetPolicyVersion(w, req)

	case "GetRole":
		r.handleGetRole(w, req)

	case "GetRolePolicy":
		r.handleGetRolePolicy(w, req)

	case "GetSAMLProvider":
		r.handleGetSAMLProvider(w, req)

	case "GetSSHPublicKey":
		r.handleGetSSHPublicKey(w, req)

	case "GetServerCertificate":
		r.handleGetServerCertificate(w, req)

	case "GetServiceLastAccessedDetails":
		r.handleGetServiceLastAccessedDetails(w, req)

	case "GetServiceLastAccessedDetailsWithEntities":
		r.handleGetServiceLastAccessedDetailsWithEntities(w, req)

	case "GetServiceLinkedRoleDeletionStatus":
		r.handleGetServiceLinkedRoleDeletionStatus(w, req)

	case "GetUser":
		r.handleGetUser(w, req)

	case "GetUserPolicy":
		r.handleGetUserPolicy(w, req)

	case "ListAccessKeys":
		r.handleListAccessKeys(w, req)

	case "ListAccountAliases":
		r.handleListAccountAliases(w, req)

	case "ListAttachedGroupPolicies":
		r.handleListAttachedGroupPolicies(w, req)

	case "ListAttachedRolePolicies":
		r.handleListAttachedRolePolicies(w, req)

	case "ListAttachedUserPolicies":
		r.handleListAttachedUserPolicies(w, req)

	case "ListEntitiesForPolicy":
		r.handleListEntitiesForPolicy(w, req)

	case "ListGroupPolicies":
		r.handleListGroupPolicies(w, req)

	case "ListGroups":
		r.handleListGroups(w, req)

	case "ListGroupsForUser":
		r.handleListGroupsForUser(w, req)

	case "ListInstanceProfileTags":
		r.handleListInstanceProfileTags(w, req)

	case "ListInstanceProfiles":
		r.handleListInstanceProfiles(w, req)

	case "ListInstanceProfilesForRole":
		r.handleListInstanceProfilesForRole(w, req)

	case "ListMFADeviceTags":
		r.handleListMFADeviceTags(w, req)

	case "ListMFADevices":
		r.handleListMFADevices(w, req)

	case "ListOpenIDConnectProviderTags":
		r.handleListOpenIDConnectProviderTags(w, req)

	case "ListOpenIDConnectProviders":
		r.handleListOpenIDConnectProviders(w, req)

	case "ListOrganizationsFeatures":
		r.handleListOrganizationsFeatures(w, req)

	case "ListPolicies":
		r.handleListPolicies(w, req)

	case "ListPoliciesGrantingServiceAccess":
		r.handleListPoliciesGrantingServiceAccess(w, req)

	case "ListPolicyTags":
		r.handleListPolicyTags(w, req)

	case "ListPolicyVersions":
		r.handleListPolicyVersions(w, req)

	case "ListRolePolicies":
		r.handleListRolePolicies(w, req)

	case "ListRoleTags":
		r.handleListRoleTags(w, req)

	case "ListRoles":
		r.handleListRoles(w, req)

	case "ListSAMLProviderTags":
		r.handleListSAMLProviderTags(w, req)

	case "ListSAMLProviders":
		r.handleListSAMLProviders(w, req)

	case "ListSSHPublicKeys":
		r.handleListSSHPublicKeys(w, req)

	case "ListServerCertificateTags":
		r.handleListServerCertificateTags(w, req)

	case "ListServerCertificates":
		r.handleListServerCertificates(w, req)

	case "ListServiceSpecificCredentials":
		r.handleListServiceSpecificCredentials(w, req)

	case "ListSigningCertificates":
		r.handleListSigningCertificates(w, req)

	case "ListUserPolicies":
		r.handleListUserPolicies(w, req)

	case "ListUserTags":
		r.handleListUserTags(w, req)

	case "ListUsers":
		r.handleListUsers(w, req)

	case "ListVirtualMFADevices":
		r.handleListVirtualMFADevices(w, req)

	case "PutGroupPolicy":
		r.handlePutGroupPolicy(w, req)

	case "PutRolePermissionsBoundary":
		r.handlePutRolePermissionsBoundary(w, req)

	case "PutRolePolicy":
		r.handlePutRolePolicy(w, req)

	case "PutUserPermissionsBoundary":
		r.handlePutUserPermissionsBoundary(w, req)

	case "PutUserPolicy":
		r.handlePutUserPolicy(w, req)

	case "RemoveClientIDFromOpenIDConnectProvider":
		r.handleRemoveClientIDFromOpenIDConnectProvider(w, req)

	case "RemoveRoleFromInstanceProfile":
		r.handleRemoveRoleFromInstanceProfile(w, req)

	case "RemoveUserFromGroup":
		r.handleRemoveUserFromGroup(w, req)

	case "ResetServiceSpecificCredential":
		r.handleResetServiceSpecificCredential(w, req)

	case "ResyncMFADevice":
		r.handleResyncMFADevice(w, req)

	case "SetDefaultPolicyVersion":
		r.handleSetDefaultPolicyVersion(w, req)

	case "SetSecurityTokenServicePreferences":
		r.handleSetSecurityTokenServicePreferences(w, req)

	case "SimulateCustomPolicy":
		r.handleSimulateCustomPolicy(w, req)

	case "SimulatePrincipalPolicy":
		r.handleSimulatePrincipalPolicy(w, req)

	case "TagInstanceProfile":
		r.handleTagInstanceProfile(w, req)

	case "TagMFADevice":
		r.handleTagMFADevice(w, req)

	case "TagOpenIDConnectProvider":
		r.handleTagOpenIDConnectProvider(w, req)

	case "TagPolicy":
		r.handleTagPolicy(w, req)

	case "TagRole":
		r.handleTagRole(w, req)

	case "TagSAMLProvider":
		r.handleTagSAMLProvider(w, req)

	case "TagServerCertificate":
		r.handleTagServerCertificate(w, req)

	case "TagUser":
		r.handleTagUser(w, req)

	case "UntagInstanceProfile":
		r.handleUntagInstanceProfile(w, req)

	case "UntagMFADevice":
		r.handleUntagMFADevice(w, req)

	case "UntagOpenIDConnectProvider":
		r.handleUntagOpenIDConnectProvider(w, req)

	case "UntagPolicy":
		r.handleUntagPolicy(w, req)

	case "UntagRole":
		r.handleUntagRole(w, req)

	case "UntagSAMLProvider":
		r.handleUntagSAMLProvider(w, req)

	case "UntagServerCertificate":
		r.handleUntagServerCertificate(w, req)

	case "UntagUser":
		r.handleUntagUser(w, req)

	case "UpdateAccessKey":
		r.handleUpdateAccessKey(w, req)

	case "UpdateAccountPasswordPolicy":
		r.handleUpdateAccountPasswordPolicy(w, req)

	case "UpdateAssumeRolePolicy":
		r.handleUpdateAssumeRolePolicy(w, req)

	case "UpdateGroup":
		r.handleUpdateGroup(w, req)

	case "UpdateLoginProfile":
		r.handleUpdateLoginProfile(w, req)

	case "UpdateOpenIDConnectProviderThumbprint":
		r.handleUpdateOpenIDConnectProviderThumbprint(w, req)

	case "UpdateRole":
		r.handleUpdateRole(w, req)

	case "UpdateRoleDescription":
		r.handleUpdateRoleDescription(w, req)

	case "UpdateSAMLProvider":
		r.handleUpdateSAMLProvider(w, req)

	case "UpdateSSHPublicKey":
		r.handleUpdateSSHPublicKey(w, req)

	case "UpdateServerCertificate":
		r.handleUpdateServerCertificate(w, req)

	case "UpdateServiceSpecificCredential":
		r.handleUpdateServiceSpecificCredential(w, req)

	case "UpdateSigningCertificate":
		r.handleUpdateSigningCertificate(w, req)

	case "UpdateUser":
		r.handleUpdateUser(w, req)

	case "UploadSSHPublicKey":
		r.handleUploadSSHPublicKey(w, req)

	case "UploadServerCertificate":
		r.handleUploadServerCertificate(w, req)

	case "UploadSigningCertificate":
		r.handleUploadSigningCertificate(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleAddClientIDToOpenIDConnectProvider handles the AddClientIDToOpenIDConnectProvider operation
func (r *Router) handleAddClientIDToOpenIDConnectProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AddClientIDToOpenIDConnectProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AddClientIDToOpenIDConnectProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAddRoleToInstanceProfile handles the AddRoleToInstanceProfile operation
func (r *Router) handleAddRoleToInstanceProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AddRoleToInstanceProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AddRoleToInstanceProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAddUserToGroup handles the AddUserToGroup operation
func (r *Router) handleAddUserToGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AddUserToGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AddUserToGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAttachGroupPolicy handles the AttachGroupPolicy operation
func (r *Router) handleAttachGroupPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AttachGroupPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AttachGroupPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAttachRolePolicy handles the AttachRolePolicy operation
func (r *Router) handleAttachRolePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AttachRolePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AttachRolePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAttachUserPolicy handles the AttachUserPolicy operation
func (r *Router) handleAttachUserPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AttachUserPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AttachUserPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleChangePassword handles the ChangePassword operation
func (r *Router) handleChangePassword(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ChangePasswordRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ChangePassword(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateAccessKey handles the CreateAccessKey operation
func (r *Router) handleCreateAccessKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateAccessKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateAccessKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateAccountAlias handles the CreateAccountAlias operation
func (r *Router) handleCreateAccountAlias(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateAccountAliasRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateAccountAlias(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateGroup handles the CreateGroup operation
func (r *Router) handleCreateGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateInstanceProfile handles the CreateInstanceProfile operation
func (r *Router) handleCreateInstanceProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateInstanceProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateInstanceProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateLoginProfile handles the CreateLoginProfile operation
func (r *Router) handleCreateLoginProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateLoginProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateLoginProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateOpenIDConnectProvider handles the CreateOpenIDConnectProvider operation
func (r *Router) handleCreateOpenIDConnectProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateOpenIDConnectProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateOpenIDConnectProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreatePolicy handles the CreatePolicy operation
func (r *Router) handleCreatePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreatePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreatePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreatePolicyVersion handles the CreatePolicyVersion operation
func (r *Router) handleCreatePolicyVersion(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreatePolicyVersionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreatePolicyVersion(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateRole handles the CreateRole operation
func (r *Router) handleCreateRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateSAMLProvider handles the CreateSAMLProvider operation
func (r *Router) handleCreateSAMLProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateSAMLProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateSAMLProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateServiceLinkedRole handles the CreateServiceLinkedRole operation
func (r *Router) handleCreateServiceLinkedRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateServiceLinkedRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateServiceLinkedRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateServiceSpecificCredential handles the CreateServiceSpecificCredential operation
func (r *Router) handleCreateServiceSpecificCredential(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateServiceSpecificCredentialRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateServiceSpecificCredential(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateUser handles the CreateUser operation
func (r *Router) handleCreateUser(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateUserRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateUser(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateVirtualMFADevice handles the CreateVirtualMFADevice operation
func (r *Router) handleCreateVirtualMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateVirtualMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateVirtualMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeactivateMFADevice handles the DeactivateMFADevice operation
func (r *Router) handleDeactivateMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeactivateMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeactivateMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteAccessKey handles the DeleteAccessKey operation
func (r *Router) handleDeleteAccessKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteAccessKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteAccessKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteAccountAlias handles the DeleteAccountAlias operation
func (r *Router) handleDeleteAccountAlias(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteAccountAliasRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteAccountAlias(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteAccountPasswordPolicy handles the DeleteAccountPasswordPolicy operation
func (r *Router) handleDeleteAccountPasswordPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input Unit
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteAccountPasswordPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteGroup handles the DeleteGroup operation
func (r *Router) handleDeleteGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteGroupPolicy handles the DeleteGroupPolicy operation
func (r *Router) handleDeleteGroupPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteGroupPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteGroupPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteInstanceProfile handles the DeleteInstanceProfile operation
func (r *Router) handleDeleteInstanceProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteInstanceProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteInstanceProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteLoginProfile handles the DeleteLoginProfile operation
func (r *Router) handleDeleteLoginProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteLoginProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteLoginProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteOpenIDConnectProvider handles the DeleteOpenIDConnectProvider operation
func (r *Router) handleDeleteOpenIDConnectProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteOpenIDConnectProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteOpenIDConnectProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeletePolicy handles the DeletePolicy operation
func (r *Router) handleDeletePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeletePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeletePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeletePolicyVersion handles the DeletePolicyVersion operation
func (r *Router) handleDeletePolicyVersion(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeletePolicyVersionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeletePolicyVersion(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteRole handles the DeleteRole operation
func (r *Router) handleDeleteRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteRolePermissionsBoundary handles the DeleteRolePermissionsBoundary operation
func (r *Router) handleDeleteRolePermissionsBoundary(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteRolePermissionsBoundaryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteRolePermissionsBoundary(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteRolePolicy handles the DeleteRolePolicy operation
func (r *Router) handleDeleteRolePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteRolePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteRolePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteSAMLProvider handles the DeleteSAMLProvider operation
func (r *Router) handleDeleteSAMLProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteSAMLProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteSAMLProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteSSHPublicKey handles the DeleteSSHPublicKey operation
func (r *Router) handleDeleteSSHPublicKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteSSHPublicKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteSSHPublicKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteServerCertificate handles the DeleteServerCertificate operation
func (r *Router) handleDeleteServerCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteServerCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteServerCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteServiceLinkedRole handles the DeleteServiceLinkedRole operation
func (r *Router) handleDeleteServiceLinkedRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteServiceLinkedRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteServiceLinkedRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteServiceSpecificCredential handles the DeleteServiceSpecificCredential operation
func (r *Router) handleDeleteServiceSpecificCredential(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteServiceSpecificCredentialRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteServiceSpecificCredential(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteSigningCertificate handles the DeleteSigningCertificate operation
func (r *Router) handleDeleteSigningCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteSigningCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteSigningCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteUser handles the DeleteUser operation
func (r *Router) handleDeleteUser(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteUserRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteUser(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteUserPermissionsBoundary handles the DeleteUserPermissionsBoundary operation
func (r *Router) handleDeleteUserPermissionsBoundary(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteUserPermissionsBoundaryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteUserPermissionsBoundary(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteUserPolicy handles the DeleteUserPolicy operation
func (r *Router) handleDeleteUserPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteUserPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteUserPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteVirtualMFADevice handles the DeleteVirtualMFADevice operation
func (r *Router) handleDeleteVirtualMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteVirtualMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteVirtualMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDetachGroupPolicy handles the DetachGroupPolicy operation
func (r *Router) handleDetachGroupPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DetachGroupPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DetachGroupPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDetachRolePolicy handles the DetachRolePolicy operation
func (r *Router) handleDetachRolePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DetachRolePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DetachRolePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDetachUserPolicy handles the DetachUserPolicy operation
func (r *Router) handleDetachUserPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DetachUserPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DetachUserPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDisableOrganizationsRootCredentialsManagement handles the DisableOrganizationsRootCredentialsManagement operation
func (r *Router) handleDisableOrganizationsRootCredentialsManagement(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DisableOrganizationsRootCredentialsManagementRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DisableOrganizationsRootCredentialsManagement(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDisableOrganizationsRootSessions handles the DisableOrganizationsRootSessions operation
func (r *Router) handleDisableOrganizationsRootSessions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DisableOrganizationsRootSessionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DisableOrganizationsRootSessions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleEnableMFADevice handles the EnableMFADevice operation
func (r *Router) handleEnableMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input EnableMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.EnableMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleEnableOrganizationsRootCredentialsManagement handles the EnableOrganizationsRootCredentialsManagement operation
func (r *Router) handleEnableOrganizationsRootCredentialsManagement(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input EnableOrganizationsRootCredentialsManagementRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.EnableOrganizationsRootCredentialsManagement(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleEnableOrganizationsRootSessions handles the EnableOrganizationsRootSessions operation
func (r *Router) handleEnableOrganizationsRootSessions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input EnableOrganizationsRootSessionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.EnableOrganizationsRootSessions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGenerateCredentialReport handles the GenerateCredentialReport operation
func (r *Router) handleGenerateCredentialReport(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input Unit
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GenerateCredentialReport(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGenerateOrganizationsAccessReport handles the GenerateOrganizationsAccessReport operation
func (r *Router) handleGenerateOrganizationsAccessReport(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GenerateOrganizationsAccessReportRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GenerateOrganizationsAccessReport(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGenerateServiceLastAccessedDetails handles the GenerateServiceLastAccessedDetails operation
func (r *Router) handleGenerateServiceLastAccessedDetails(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GenerateServiceLastAccessedDetailsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GenerateServiceLastAccessedDetails(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetAccessKeyLastUsed handles the GetAccessKeyLastUsed operation
func (r *Router) handleGetAccessKeyLastUsed(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetAccessKeyLastUsedRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetAccessKeyLastUsed(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetAccountAuthorizationDetails handles the GetAccountAuthorizationDetails operation
func (r *Router) handleGetAccountAuthorizationDetails(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetAccountAuthorizationDetailsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetAccountAuthorizationDetails(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetAccountPasswordPolicy handles the GetAccountPasswordPolicy operation
func (r *Router) handleGetAccountPasswordPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input Unit
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetAccountPasswordPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetAccountSummary handles the GetAccountSummary operation
func (r *Router) handleGetAccountSummary(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input Unit
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetAccountSummary(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetContextKeysForCustomPolicy handles the GetContextKeysForCustomPolicy operation
func (r *Router) handleGetContextKeysForCustomPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetContextKeysForCustomPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetContextKeysForCustomPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetContextKeysForPrincipalPolicy handles the GetContextKeysForPrincipalPolicy operation
func (r *Router) handleGetContextKeysForPrincipalPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetContextKeysForPrincipalPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetContextKeysForPrincipalPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetCredentialReport handles the GetCredentialReport operation
func (r *Router) handleGetCredentialReport(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input Unit
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetCredentialReport(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetGroup handles the GetGroup operation
func (r *Router) handleGetGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetGroupPolicy handles the GetGroupPolicy operation
func (r *Router) handleGetGroupPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetGroupPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetGroupPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetInstanceProfile handles the GetInstanceProfile operation
func (r *Router) handleGetInstanceProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetInstanceProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetInstanceProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetLoginProfile handles the GetLoginProfile operation
func (r *Router) handleGetLoginProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetLoginProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetLoginProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetMFADevice handles the GetMFADevice operation
func (r *Router) handleGetMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetOpenIDConnectProvider handles the GetOpenIDConnectProvider operation
func (r *Router) handleGetOpenIDConnectProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetOpenIDConnectProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetOpenIDConnectProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetOrganizationsAccessReport handles the GetOrganizationsAccessReport operation
func (r *Router) handleGetOrganizationsAccessReport(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetOrganizationsAccessReportRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetOrganizationsAccessReport(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetPolicy handles the GetPolicy operation
func (r *Router) handleGetPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetPolicyVersion handles the GetPolicyVersion operation
func (r *Router) handleGetPolicyVersion(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetPolicyVersionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetPolicyVersion(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetRole handles the GetRole operation
func (r *Router) handleGetRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetRolePolicy handles the GetRolePolicy operation
func (r *Router) handleGetRolePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetRolePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetRolePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetSAMLProvider handles the GetSAMLProvider operation
func (r *Router) handleGetSAMLProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetSAMLProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetSAMLProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetSSHPublicKey handles the GetSSHPublicKey operation
func (r *Router) handleGetSSHPublicKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetSSHPublicKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetSSHPublicKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetServerCertificate handles the GetServerCertificate operation
func (r *Router) handleGetServerCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetServerCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetServerCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetServiceLastAccessedDetails handles the GetServiceLastAccessedDetails operation
func (r *Router) handleGetServiceLastAccessedDetails(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetServiceLastAccessedDetailsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetServiceLastAccessedDetails(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetServiceLastAccessedDetailsWithEntities handles the GetServiceLastAccessedDetailsWithEntities operation
func (r *Router) handleGetServiceLastAccessedDetailsWithEntities(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetServiceLastAccessedDetailsWithEntitiesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetServiceLastAccessedDetailsWithEntities(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetServiceLinkedRoleDeletionStatus handles the GetServiceLinkedRoleDeletionStatus operation
func (r *Router) handleGetServiceLinkedRoleDeletionStatus(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetServiceLinkedRoleDeletionStatusRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetServiceLinkedRoleDeletionStatus(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetUser handles the GetUser operation
func (r *Router) handleGetUser(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetUserRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetUser(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetUserPolicy handles the GetUserPolicy operation
func (r *Router) handleGetUserPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetUserPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetUserPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAccessKeys handles the ListAccessKeys operation
func (r *Router) handleListAccessKeys(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAccessKeysRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAccessKeys(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAccountAliases handles the ListAccountAliases operation
func (r *Router) handleListAccountAliases(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAccountAliasesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAccountAliases(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAttachedGroupPolicies handles the ListAttachedGroupPolicies operation
func (r *Router) handleListAttachedGroupPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAttachedGroupPoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAttachedGroupPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAttachedRolePolicies handles the ListAttachedRolePolicies operation
func (r *Router) handleListAttachedRolePolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAttachedRolePoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAttachedRolePolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAttachedUserPolicies handles the ListAttachedUserPolicies operation
func (r *Router) handleListAttachedUserPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAttachedUserPoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAttachedUserPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListEntitiesForPolicy handles the ListEntitiesForPolicy operation
func (r *Router) handleListEntitiesForPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListEntitiesForPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListEntitiesForPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListGroupPolicies handles the ListGroupPolicies operation
func (r *Router) handleListGroupPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListGroupPoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListGroupPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListGroups handles the ListGroups operation
func (r *Router) handleListGroups(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListGroupsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListGroups(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListGroupsForUser handles the ListGroupsForUser operation
func (r *Router) handleListGroupsForUser(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListGroupsForUserRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListGroupsForUser(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListInstanceProfileTags handles the ListInstanceProfileTags operation
func (r *Router) handleListInstanceProfileTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListInstanceProfileTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListInstanceProfileTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListInstanceProfiles handles the ListInstanceProfiles operation
func (r *Router) handleListInstanceProfiles(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListInstanceProfilesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListInstanceProfiles(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListInstanceProfilesForRole handles the ListInstanceProfilesForRole operation
func (r *Router) handleListInstanceProfilesForRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListInstanceProfilesForRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListInstanceProfilesForRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListMFADeviceTags handles the ListMFADeviceTags operation
func (r *Router) handleListMFADeviceTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListMFADeviceTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListMFADeviceTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListMFADevices handles the ListMFADevices operation
func (r *Router) handleListMFADevices(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListMFADevicesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListMFADevices(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListOpenIDConnectProviderTags handles the ListOpenIDConnectProviderTags operation
func (r *Router) handleListOpenIDConnectProviderTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListOpenIDConnectProviderTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListOpenIDConnectProviderTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListOpenIDConnectProviders handles the ListOpenIDConnectProviders operation
func (r *Router) handleListOpenIDConnectProviders(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListOpenIDConnectProvidersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListOpenIDConnectProviders(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListOrganizationsFeatures handles the ListOrganizationsFeatures operation
func (r *Router) handleListOrganizationsFeatures(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListOrganizationsFeaturesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListOrganizationsFeatures(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListPolicies handles the ListPolicies operation
func (r *Router) handleListPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListPoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListPoliciesGrantingServiceAccess handles the ListPoliciesGrantingServiceAccess operation
func (r *Router) handleListPoliciesGrantingServiceAccess(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListPoliciesGrantingServiceAccessRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListPoliciesGrantingServiceAccess(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListPolicyTags handles the ListPolicyTags operation
func (r *Router) handleListPolicyTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListPolicyTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListPolicyTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListPolicyVersions handles the ListPolicyVersions operation
func (r *Router) handleListPolicyVersions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListPolicyVersionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListPolicyVersions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListRolePolicies handles the ListRolePolicies operation
func (r *Router) handleListRolePolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListRolePoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListRolePolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListRoleTags handles the ListRoleTags operation
func (r *Router) handleListRoleTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListRoleTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListRoleTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListRoles handles the ListRoles operation
func (r *Router) handleListRoles(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListRolesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListRoles(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListSAMLProviderTags handles the ListSAMLProviderTags operation
func (r *Router) handleListSAMLProviderTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListSAMLProviderTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListSAMLProviderTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListSAMLProviders handles the ListSAMLProviders operation
func (r *Router) handleListSAMLProviders(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListSAMLProvidersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListSAMLProviders(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListSSHPublicKeys handles the ListSSHPublicKeys operation
func (r *Router) handleListSSHPublicKeys(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListSSHPublicKeysRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListSSHPublicKeys(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListServerCertificateTags handles the ListServerCertificateTags operation
func (r *Router) handleListServerCertificateTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListServerCertificateTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListServerCertificateTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListServerCertificates handles the ListServerCertificates operation
func (r *Router) handleListServerCertificates(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListServerCertificatesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListServerCertificates(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListServiceSpecificCredentials handles the ListServiceSpecificCredentials operation
func (r *Router) handleListServiceSpecificCredentials(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListServiceSpecificCredentialsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListServiceSpecificCredentials(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListSigningCertificates handles the ListSigningCertificates operation
func (r *Router) handleListSigningCertificates(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListSigningCertificatesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListSigningCertificates(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListUserPolicies handles the ListUserPolicies operation
func (r *Router) handleListUserPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListUserPoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListUserPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListUserTags handles the ListUserTags operation
func (r *Router) handleListUserTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListUserTagsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListUserTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListUsers handles the ListUsers operation
func (r *Router) handleListUsers(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListUsersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListUsers(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListVirtualMFADevices handles the ListVirtualMFADevices operation
func (r *Router) handleListVirtualMFADevices(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListVirtualMFADevicesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListVirtualMFADevices(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutGroupPolicy handles the PutGroupPolicy operation
func (r *Router) handlePutGroupPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutGroupPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutGroupPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutRolePermissionsBoundary handles the PutRolePermissionsBoundary operation
func (r *Router) handlePutRolePermissionsBoundary(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutRolePermissionsBoundaryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutRolePermissionsBoundary(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutRolePolicy handles the PutRolePolicy operation
func (r *Router) handlePutRolePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutRolePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutRolePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutUserPermissionsBoundary handles the PutUserPermissionsBoundary operation
func (r *Router) handlePutUserPermissionsBoundary(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutUserPermissionsBoundaryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutUserPermissionsBoundary(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutUserPolicy handles the PutUserPolicy operation
func (r *Router) handlePutUserPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutUserPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutUserPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveClientIDFromOpenIDConnectProvider handles the RemoveClientIDFromOpenIDConnectProvider operation
func (r *Router) handleRemoveClientIDFromOpenIDConnectProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveClientIDFromOpenIDConnectProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveClientIDFromOpenIDConnectProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveRoleFromInstanceProfile handles the RemoveRoleFromInstanceProfile operation
func (r *Router) handleRemoveRoleFromInstanceProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveRoleFromInstanceProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveRoleFromInstanceProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveUserFromGroup handles the RemoveUserFromGroup operation
func (r *Router) handleRemoveUserFromGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveUserFromGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveUserFromGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleResetServiceSpecificCredential handles the ResetServiceSpecificCredential operation
func (r *Router) handleResetServiceSpecificCredential(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ResetServiceSpecificCredentialRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ResetServiceSpecificCredential(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleResyncMFADevice handles the ResyncMFADevice operation
func (r *Router) handleResyncMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ResyncMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ResyncMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSetDefaultPolicyVersion handles the SetDefaultPolicyVersion operation
func (r *Router) handleSetDefaultPolicyVersion(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SetDefaultPolicyVersionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SetDefaultPolicyVersion(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSetSecurityTokenServicePreferences handles the SetSecurityTokenServicePreferences operation
func (r *Router) handleSetSecurityTokenServicePreferences(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SetSecurityTokenServicePreferencesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SetSecurityTokenServicePreferences(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSimulateCustomPolicy handles the SimulateCustomPolicy operation
func (r *Router) handleSimulateCustomPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SimulateCustomPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SimulateCustomPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSimulatePrincipalPolicy handles the SimulatePrincipalPolicy operation
func (r *Router) handleSimulatePrincipalPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SimulatePrincipalPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SimulatePrincipalPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagInstanceProfile handles the TagInstanceProfile operation
func (r *Router) handleTagInstanceProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagInstanceProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagInstanceProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagMFADevice handles the TagMFADevice operation
func (r *Router) handleTagMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagOpenIDConnectProvider handles the TagOpenIDConnectProvider operation
func (r *Router) handleTagOpenIDConnectProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagOpenIDConnectProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagOpenIDConnectProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagPolicy handles the TagPolicy operation
func (r *Router) handleTagPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagRole handles the TagRole operation
func (r *Router) handleTagRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagSAMLProvider handles the TagSAMLProvider operation
func (r *Router) handleTagSAMLProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagSAMLProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagSAMLProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagServerCertificate handles the TagServerCertificate operation
func (r *Router) handleTagServerCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagServerCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagServerCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagUser handles the TagUser operation
func (r *Router) handleTagUser(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagUserRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagUser(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagInstanceProfile handles the UntagInstanceProfile operation
func (r *Router) handleUntagInstanceProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagInstanceProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagInstanceProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagMFADevice handles the UntagMFADevice operation
func (r *Router) handleUntagMFADevice(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagMFADeviceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagMFADevice(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagOpenIDConnectProvider handles the UntagOpenIDConnectProvider operation
func (r *Router) handleUntagOpenIDConnectProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagOpenIDConnectProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagOpenIDConnectProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagPolicy handles the UntagPolicy operation
func (r *Router) handleUntagPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagRole handles the UntagRole operation
func (r *Router) handleUntagRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagSAMLProvider handles the UntagSAMLProvider operation
func (r *Router) handleUntagSAMLProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagSAMLProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagSAMLProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagServerCertificate handles the UntagServerCertificate operation
func (r *Router) handleUntagServerCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagServerCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagServerCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagUser handles the UntagUser operation
func (r *Router) handleUntagUser(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagUserRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagUser(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateAccessKey handles the UpdateAccessKey operation
func (r *Router) handleUpdateAccessKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateAccessKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateAccessKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateAccountPasswordPolicy handles the UpdateAccountPasswordPolicy operation
func (r *Router) handleUpdateAccountPasswordPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateAccountPasswordPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateAccountPasswordPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateAssumeRolePolicy handles the UpdateAssumeRolePolicy operation
func (r *Router) handleUpdateAssumeRolePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateAssumeRolePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateAssumeRolePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateGroup handles the UpdateGroup operation
func (r *Router) handleUpdateGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateLoginProfile handles the UpdateLoginProfile operation
func (r *Router) handleUpdateLoginProfile(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateLoginProfileRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateLoginProfile(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateOpenIDConnectProviderThumbprint handles the UpdateOpenIDConnectProviderThumbprint operation
func (r *Router) handleUpdateOpenIDConnectProviderThumbprint(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateOpenIDConnectProviderThumbprintRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateOpenIDConnectProviderThumbprint(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateRole handles the UpdateRole operation
func (r *Router) handleUpdateRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateRoleDescription handles the UpdateRoleDescription operation
func (r *Router) handleUpdateRoleDescription(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateRoleDescriptionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateRoleDescription(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateSAMLProvider handles the UpdateSAMLProvider operation
func (r *Router) handleUpdateSAMLProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateSAMLProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateSAMLProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateSSHPublicKey handles the UpdateSSHPublicKey operation
func (r *Router) handleUpdateSSHPublicKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateSSHPublicKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateSSHPublicKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateServerCertificate handles the UpdateServerCertificate operation
func (r *Router) handleUpdateServerCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateServerCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateServerCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateServiceSpecificCredential handles the UpdateServiceSpecificCredential operation
func (r *Router) handleUpdateServiceSpecificCredential(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateServiceSpecificCredentialRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateServiceSpecificCredential(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateSigningCertificate handles the UpdateSigningCertificate operation
func (r *Router) handleUpdateSigningCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateSigningCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateSigningCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateUser handles the UpdateUser operation
func (r *Router) handleUpdateUser(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateUserRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateUser(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUploadSSHPublicKey handles the UploadSSHPublicKey operation
func (r *Router) handleUploadSSHPublicKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UploadSSHPublicKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UploadSSHPublicKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUploadServerCertificate handles the UploadServerCertificate operation
func (r *Router) handleUploadServerCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UploadServerCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UploadServerCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUploadSigningCertificate handles the UploadSigningCertificate operation
func (r *Router) handleUploadSigningCertificate(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UploadSigningCertificateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UploadSigningCertificate(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
