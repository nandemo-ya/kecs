// Code generated by cmd/codegen. DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for ecs API
type Router struct {
	api secretsmanagerAPI
}

// NewRouter creates a new router for ecs API
func NewRouter(api secretsmanagerAPI) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "BatchGetSecretValue":
		r.handleBatchGetSecretValue(w, req)

	case "CancelRotateSecret":
		r.handleCancelRotateSecret(w, req)

	case "CreateSecret":
		r.handleCreateSecret(w, req)

	case "DeleteResourcePolicy":
		r.handleDeleteResourcePolicy(w, req)

	case "DeleteSecret":
		r.handleDeleteSecret(w, req)

	case "DescribeSecret":
		r.handleDescribeSecret(w, req)

	case "GetRandomPassword":
		r.handleGetRandomPassword(w, req)

	case "GetResourcePolicy":
		r.handleGetResourcePolicy(w, req)

	case "GetSecretValue":
		r.handleGetSecretValue(w, req)

	case "ListSecretVersionIds":
		r.handleListSecretVersionIds(w, req)

	case "ListSecrets":
		r.handleListSecrets(w, req)

	case "PutResourcePolicy":
		r.handlePutResourcePolicy(w, req)

	case "PutSecretValue":
		r.handlePutSecretValue(w, req)

	case "RemoveRegionsFromReplication":
		r.handleRemoveRegionsFromReplication(w, req)

	case "ReplicateSecretToRegions":
		r.handleReplicateSecretToRegions(w, req)

	case "RestoreSecret":
		r.handleRestoreSecret(w, req)

	case "RotateSecret":
		r.handleRotateSecret(w, req)

	case "StopReplicationToReplica":
		r.handleStopReplicationToReplica(w, req)

	case "TagResource":
		r.handleTagResource(w, req)

	case "UntagResource":
		r.handleUntagResource(w, req)

	case "UpdateSecret":
		r.handleUpdateSecret(w, req)

	case "UpdateSecretVersionStage":
		r.handleUpdateSecretVersionStage(w, req)

	case "ValidateResourcePolicy":
		r.handleValidateResourcePolicy(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleBatchGetSecretValue handles the BatchGetSecretValue operation
func (r *Router) handleBatchGetSecretValue(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input BatchGetSecretValueRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.BatchGetSecretValue(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCancelRotateSecret handles the CancelRotateSecret operation
func (r *Router) handleCancelRotateSecret(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CancelRotateSecretRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CancelRotateSecret(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateSecret handles the CreateSecret operation
func (r *Router) handleCreateSecret(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateSecretRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateSecret(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteResourcePolicy handles the DeleteResourcePolicy operation
func (r *Router) handleDeleteResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteSecret handles the DeleteSecret operation
func (r *Router) handleDeleteSecret(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteSecretRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteSecret(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeSecret handles the DescribeSecret operation
func (r *Router) handleDescribeSecret(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeSecretRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeSecret(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetRandomPassword handles the GetRandomPassword operation
func (r *Router) handleGetRandomPassword(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetRandomPasswordRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetRandomPassword(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetResourcePolicy handles the GetResourcePolicy operation
func (r *Router) handleGetResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetSecretValue handles the GetSecretValue operation
func (r *Router) handleGetSecretValue(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetSecretValueRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetSecretValue(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListSecretVersionIds handles the ListSecretVersionIds operation
func (r *Router) handleListSecretVersionIds(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListSecretVersionIdsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListSecretVersionIds(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListSecrets handles the ListSecrets operation
func (r *Router) handleListSecrets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListSecretsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListSecrets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutResourcePolicy handles the PutResourcePolicy operation
func (r *Router) handlePutResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutSecretValue handles the PutSecretValue operation
func (r *Router) handlePutSecretValue(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutSecretValueRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutSecretValue(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveRegionsFromReplication handles the RemoveRegionsFromReplication operation
func (r *Router) handleRemoveRegionsFromReplication(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveRegionsFromReplicationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveRegionsFromReplication(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleReplicateSecretToRegions handles the ReplicateSecretToRegions operation
func (r *Router) handleReplicateSecretToRegions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ReplicateSecretToRegionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ReplicateSecretToRegions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRestoreSecret handles the RestoreSecret operation
func (r *Router) handleRestoreSecret(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RestoreSecretRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RestoreSecret(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRotateSecret handles the RotateSecret operation
func (r *Router) handleRotateSecret(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RotateSecretRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RotateSecret(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStopReplicationToReplica handles the StopReplicationToReplica operation
func (r *Router) handleStopReplicationToReplica(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StopReplicationToReplicaRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StopReplicationToReplica(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagResource handles the TagResource operation
func (r *Router) handleTagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagResource handles the UntagResource operation
func (r *Router) handleUntagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateSecret handles the UpdateSecret operation
func (r *Router) handleUpdateSecret(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateSecretRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateSecret(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateSecretVersionStage handles the UpdateSecretVersionStage operation
func (r *Router) handleUpdateSecretVersionStage(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateSecretVersionStageRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateSecretVersionStage(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleValidateResourcePolicy handles the ValidateResourcePolicy operation
func (r *Router) handleValidateResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ValidateResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ValidateResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
