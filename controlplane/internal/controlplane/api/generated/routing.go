// Code generated by cmd/codegen. DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for ecs API
type Router struct {
	api AmazonEC2ContainerServiceV20141113API
}

// NewRouter creates a new router for ecs API
func NewRouter(api AmazonEC2ContainerServiceV20141113API) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "CreateCapacityProvider":
		r.handleCreateCapacityProvider(w, req)

	case "CreateCluster":
		r.handleCreateCluster(w, req)

	case "CreateService":
		r.handleCreateService(w, req)

	case "CreateTaskSet":
		r.handleCreateTaskSet(w, req)

	case "DeleteAccountSetting":
		r.handleDeleteAccountSetting(w, req)

	case "DeleteAttributes":
		r.handleDeleteAttributes(w, req)

	case "DeleteCapacityProvider":
		r.handleDeleteCapacityProvider(w, req)

	case "DeleteCluster":
		r.handleDeleteCluster(w, req)

	case "DeleteService":
		r.handleDeleteService(w, req)

	case "DeleteTaskDefinitions":
		r.handleDeleteTaskDefinitions(w, req)

	case "DeleteTaskSet":
		r.handleDeleteTaskSet(w, req)

	case "DeregisterContainerInstance":
		r.handleDeregisterContainerInstance(w, req)

	case "DeregisterTaskDefinition":
		r.handleDeregisterTaskDefinition(w, req)

	case "DescribeCapacityProviders":
		r.handleDescribeCapacityProviders(w, req)

	case "DescribeClusters":
		r.handleDescribeClusters(w, req)

	case "DescribeContainerInstances":
		r.handleDescribeContainerInstances(w, req)

	case "DescribeServiceDeployments":
		r.handleDescribeServiceDeployments(w, req)

	case "DescribeServiceRevisions":
		r.handleDescribeServiceRevisions(w, req)

	case "DescribeServices":
		r.handleDescribeServices(w, req)

	case "DescribeTaskDefinition":
		r.handleDescribeTaskDefinition(w, req)

	case "DescribeTaskSets":
		r.handleDescribeTaskSets(w, req)

	case "DescribeTasks":
		r.handleDescribeTasks(w, req)

	case "DiscoverPollEndpoint":
		r.handleDiscoverPollEndpoint(w, req)

	case "ExecuteCommand":
		r.handleExecuteCommand(w, req)

	case "GetTaskProtection":
		r.handleGetTaskProtection(w, req)

	case "ListAccountSettings":
		r.handleListAccountSettings(w, req)

	case "ListAttributes":
		r.handleListAttributes(w, req)

	case "ListClusters":
		r.handleListClusters(w, req)

	case "ListContainerInstances":
		r.handleListContainerInstances(w, req)

	case "ListServiceDeployments":
		r.handleListServiceDeployments(w, req)

	case "ListServices":
		r.handleListServices(w, req)

	case "ListServicesByNamespace":
		r.handleListServicesByNamespace(w, req)

	case "ListTagsForResource":
		r.handleListTagsForResource(w, req)

	case "ListTaskDefinitionFamilies":
		r.handleListTaskDefinitionFamilies(w, req)

	case "ListTaskDefinitions":
		r.handleListTaskDefinitions(w, req)

	case "ListTasks":
		r.handleListTasks(w, req)

	case "PutAccountSetting":
		r.handlePutAccountSetting(w, req)

	case "PutAccountSettingDefault":
		r.handlePutAccountSettingDefault(w, req)

	case "PutAttributes":
		r.handlePutAttributes(w, req)

	case "PutClusterCapacityProviders":
		r.handlePutClusterCapacityProviders(w, req)

	case "RegisterContainerInstance":
		r.handleRegisterContainerInstance(w, req)

	case "RegisterTaskDefinition":
		r.handleRegisterTaskDefinition(w, req)

	case "RunTask":
		r.handleRunTask(w, req)

	case "StartTask":
		r.handleStartTask(w, req)

	case "StopServiceDeployment":
		r.handleStopServiceDeployment(w, req)

	case "StopTask":
		r.handleStopTask(w, req)

	case "SubmitAttachmentStateChanges":
		r.handleSubmitAttachmentStateChanges(w, req)

	case "SubmitContainerStateChange":
		r.handleSubmitContainerStateChange(w, req)

	case "SubmitTaskStateChange":
		r.handleSubmitTaskStateChange(w, req)

	case "TagResource":
		r.handleTagResource(w, req)

	case "UntagResource":
		r.handleUntagResource(w, req)

	case "UpdateCapacityProvider":
		r.handleUpdateCapacityProvider(w, req)

	case "UpdateCluster":
		r.handleUpdateCluster(w, req)

	case "UpdateClusterSettings":
		r.handleUpdateClusterSettings(w, req)

	case "UpdateContainerAgent":
		r.handleUpdateContainerAgent(w, req)

	case "UpdateContainerInstancesState":
		r.handleUpdateContainerInstancesState(w, req)

	case "UpdateService":
		r.handleUpdateService(w, req)

	case "UpdateServicePrimaryTaskSet":
		r.handleUpdateServicePrimaryTaskSet(w, req)

	case "UpdateTaskProtection":
		r.handleUpdateTaskProtection(w, req)

	case "UpdateTaskSet":
		r.handleUpdateTaskSet(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleCreateCapacityProvider handles the CreateCapacityProvider operation
func (r *Router) handleCreateCapacityProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateCapacityProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateCapacityProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateCluster handles the CreateCluster operation
func (r *Router) handleCreateCluster(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateClusterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateCluster(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateService handles the CreateService operation
func (r *Router) handleCreateService(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateServiceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateService(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateTaskSet handles the CreateTaskSet operation
func (r *Router) handleCreateTaskSet(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateTaskSetRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateTaskSet(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteAccountSetting handles the DeleteAccountSetting operation
func (r *Router) handleDeleteAccountSetting(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteAccountSettingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteAccountSetting(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteAttributes handles the DeleteAttributes operation
func (r *Router) handleDeleteAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteAttributesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteCapacityProvider handles the DeleteCapacityProvider operation
func (r *Router) handleDeleteCapacityProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteCapacityProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteCapacityProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteCluster handles the DeleteCluster operation
func (r *Router) handleDeleteCluster(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteClusterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteCluster(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteService handles the DeleteService operation
func (r *Router) handleDeleteService(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteServiceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteService(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteTaskDefinitions handles the DeleteTaskDefinitions operation
func (r *Router) handleDeleteTaskDefinitions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteTaskDefinitionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteTaskDefinitions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteTaskSet handles the DeleteTaskSet operation
func (r *Router) handleDeleteTaskSet(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteTaskSetRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteTaskSet(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterContainerInstance handles the DeregisterContainerInstance operation
func (r *Router) handleDeregisterContainerInstance(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterContainerInstanceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterContainerInstance(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterTaskDefinition handles the DeregisterTaskDefinition operation
func (r *Router) handleDeregisterTaskDefinition(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterTaskDefinitionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterTaskDefinition(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeCapacityProviders handles the DescribeCapacityProviders operation
func (r *Router) handleDescribeCapacityProviders(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeCapacityProvidersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeCapacityProviders(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeClusters handles the DescribeClusters operation
func (r *Router) handleDescribeClusters(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeClustersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeClusters(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeContainerInstances handles the DescribeContainerInstances operation
func (r *Router) handleDescribeContainerInstances(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeContainerInstancesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeContainerInstances(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeServiceDeployments handles the DescribeServiceDeployments operation
func (r *Router) handleDescribeServiceDeployments(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeServiceDeploymentsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeServiceDeployments(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeServiceRevisions handles the DescribeServiceRevisions operation
func (r *Router) handleDescribeServiceRevisions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeServiceRevisionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeServiceRevisions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeServices handles the DescribeServices operation
func (r *Router) handleDescribeServices(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeServicesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeServices(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTaskDefinition handles the DescribeTaskDefinition operation
func (r *Router) handleDescribeTaskDefinition(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTaskDefinitionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTaskDefinition(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTaskSets handles the DescribeTaskSets operation
func (r *Router) handleDescribeTaskSets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTaskSetsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTaskSets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTasks handles the DescribeTasks operation
func (r *Router) handleDescribeTasks(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTasksRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTasks(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDiscoverPollEndpoint handles the DiscoverPollEndpoint operation
func (r *Router) handleDiscoverPollEndpoint(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DiscoverPollEndpointRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DiscoverPollEndpoint(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleExecuteCommand handles the ExecuteCommand operation
func (r *Router) handleExecuteCommand(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ExecuteCommandRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ExecuteCommand(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetTaskProtection handles the GetTaskProtection operation
func (r *Router) handleGetTaskProtection(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetTaskProtectionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetTaskProtection(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAccountSettings handles the ListAccountSettings operation
func (r *Router) handleListAccountSettings(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAccountSettingsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAccountSettings(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAttributes handles the ListAttributes operation
func (r *Router) handleListAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAttributesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListClusters handles the ListClusters operation
func (r *Router) handleListClusters(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListClustersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListClusters(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListContainerInstances handles the ListContainerInstances operation
func (r *Router) handleListContainerInstances(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListContainerInstancesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListContainerInstances(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListServiceDeployments handles the ListServiceDeployments operation
func (r *Router) handleListServiceDeployments(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListServiceDeploymentsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListServiceDeployments(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListServices handles the ListServices operation
func (r *Router) handleListServices(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListServicesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListServices(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListServicesByNamespace handles the ListServicesByNamespace operation
func (r *Router) handleListServicesByNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListServicesByNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListServicesByNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTagsForResource handles the ListTagsForResource operation
func (r *Router) handleListTagsForResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTagsForResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTagsForResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTaskDefinitionFamilies handles the ListTaskDefinitionFamilies operation
func (r *Router) handleListTaskDefinitionFamilies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTaskDefinitionFamiliesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTaskDefinitionFamilies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTaskDefinitions handles the ListTaskDefinitions operation
func (r *Router) handleListTaskDefinitions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTaskDefinitionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTaskDefinitions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTasks handles the ListTasks operation
func (r *Router) handleListTasks(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTasksRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTasks(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutAccountSetting handles the PutAccountSetting operation
func (r *Router) handlePutAccountSetting(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutAccountSettingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutAccountSetting(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutAccountSettingDefault handles the PutAccountSettingDefault operation
func (r *Router) handlePutAccountSettingDefault(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutAccountSettingDefaultRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutAccountSettingDefault(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutAttributes handles the PutAttributes operation
func (r *Router) handlePutAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutAttributesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutClusterCapacityProviders handles the PutClusterCapacityProviders operation
func (r *Router) handlePutClusterCapacityProviders(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutClusterCapacityProvidersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutClusterCapacityProviders(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterContainerInstance handles the RegisterContainerInstance operation
func (r *Router) handleRegisterContainerInstance(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterContainerInstanceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterContainerInstance(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterTaskDefinition handles the RegisterTaskDefinition operation
func (r *Router) handleRegisterTaskDefinition(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterTaskDefinitionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterTaskDefinition(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRunTask handles the RunTask operation
func (r *Router) handleRunTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RunTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RunTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartTask handles the StartTask operation
func (r *Router) handleStartTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStopServiceDeployment handles the StopServiceDeployment operation
func (r *Router) handleStopServiceDeployment(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StopServiceDeploymentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StopServiceDeployment(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStopTask handles the StopTask operation
func (r *Router) handleStopTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StopTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StopTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSubmitAttachmentStateChanges handles the SubmitAttachmentStateChanges operation
func (r *Router) handleSubmitAttachmentStateChanges(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SubmitAttachmentStateChangesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SubmitAttachmentStateChanges(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSubmitContainerStateChange handles the SubmitContainerStateChange operation
func (r *Router) handleSubmitContainerStateChange(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SubmitContainerStateChangeRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SubmitContainerStateChange(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSubmitTaskStateChange handles the SubmitTaskStateChange operation
func (r *Router) handleSubmitTaskStateChange(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SubmitTaskStateChangeRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SubmitTaskStateChange(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagResource handles the TagResource operation
func (r *Router) handleTagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagResource handles the UntagResource operation
func (r *Router) handleUntagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateCapacityProvider handles the UpdateCapacityProvider operation
func (r *Router) handleUpdateCapacityProvider(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateCapacityProviderRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateCapacityProvider(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateCluster handles the UpdateCluster operation
func (r *Router) handleUpdateCluster(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateClusterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateCluster(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateClusterSettings handles the UpdateClusterSettings operation
func (r *Router) handleUpdateClusterSettings(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateClusterSettingsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateClusterSettings(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateContainerAgent handles the UpdateContainerAgent operation
func (r *Router) handleUpdateContainerAgent(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateContainerAgentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateContainerAgent(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateContainerInstancesState handles the UpdateContainerInstancesState operation
func (r *Router) handleUpdateContainerInstancesState(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateContainerInstancesStateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateContainerInstancesState(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateService handles the UpdateService operation
func (r *Router) handleUpdateService(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateServiceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateService(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateServicePrimaryTaskSet handles the UpdateServicePrimaryTaskSet operation
func (r *Router) handleUpdateServicePrimaryTaskSet(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateServicePrimaryTaskSetRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateServicePrimaryTaskSet(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateTaskProtection handles the UpdateTaskProtection operation
func (r *Router) handleUpdateTaskProtection(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateTaskProtectionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateTaskProtection(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateTaskSet handles the UpdateTaskSet operation
func (r *Router) handleUpdateTaskSet(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateTaskSetRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateTaskSet(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	
	// Marshal the data first to get the content length
	var jsonData []byte
	var err error
	
	if data != nil {
		jsonData, err = json.Marshal(data)
		if err != nil {
			// Log encoding error and write error response
			fmt.Printf("Error encoding JSON response: %v\n", err)
			writeError(w, http.StatusInternalServerError, "InternalError", "Failed to encode response")
			return
		}
	} else {
		jsonData = []byte("{}")
	}
	
	// Set content length to ensure proper response handling
	w.Header().Set("Content-Length", fmt.Sprintf("%d", len(jsonData)))
	w.WriteHeader(statusCode)
	
	// Write the response
	if _, err := w.Write(jsonData); err != nil {
		fmt.Printf("Error writing response: %v\n", err)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
