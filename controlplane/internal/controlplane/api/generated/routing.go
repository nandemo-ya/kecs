// Code generated by cmd/codegen. DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"io"
	"net/http"
	"strings"
)

// handleRequest is a generic handler for all ECS operations
func handleRequest[TReq any, TResp any](
	serviceFunc func(context.Context, *TReq) (*TResp, error),
	w http.ResponseWriter,
	r *http.Request,
) {
	var req TReq
	if r.Body != nil {
		defer r.Body.Close()
		body, err := io.ReadAll(r.Body)
		if err != nil {
			http.Error(w, "Failed to read request body", http.StatusBadRequest)
			return
		}
		if len(body) > 0 {
			if err := json.Unmarshal(body, &req); err != nil {
				http.Error(w, "Invalid request format", http.StatusBadRequest)
				return
			}
		}
	}

	resp, err := serviceFunc(r.Context(), &req)
	if err != nil {
		// Return AWS-style error response
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		
		// Determine error code and status
		errorCode := "InternalServerError"
		statusCode := http.StatusInternalServerError
		
		// Check for validation errors
		errMsg := err.Error()
		if strings.Contains(errMsg, "Invalid parameter:") {
			errorCode = "InvalidParameterException"
			statusCode = http.StatusBadRequest
		} else if strings.Contains(errMsg, "does not exist") || strings.Contains(errMsg, "not found") {
			errorCode = "ResourceNotFoundException"
			statusCode = http.StatusNotFound
		} else if strings.Contains(errMsg, "cannot be deleted while") {
			errorCode = "InvalidParameterException"
			statusCode = http.StatusBadRequest
		}
		
		w.WriteHeader(statusCode)
		errorResp := map[string]interface{}{
			"__type": errorCode,
			"message": errMsg,
		}
		json.NewEncoder(w).Encode(errorResp)
		return
	}

	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(resp); err != nil {
		http.Error(w, "Failed to encode response", http.StatusInternalServerError)
		return
	}
}

// HandleECSRequest routes ECS API requests based on X-Amz-Target header
func HandleECSRequest(api ECSAPIInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// Only accept POST requests
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		// Extract the target operation from X-Amz-Target header
		target := r.Header.Get("X-Amz-Target")
		if target == "" {
			http.Error(w, "Missing X-Amz-Target header", http.StatusBadRequest)
			return
		}

		// Parse the operation name from the target header
		// Format: "AmazonEC2ContainerServiceV20141113.OperationName"
		parts := strings.Split(target, ".")
		if len(parts) != 2 {
			http.Error(w, "Invalid X-Amz-Target format", http.StatusBadRequest)
			return
		}
		operation := parts[1]

		// Route to appropriate handler based on operation
		switch operation {
		case "CreateCapacityProvider":
			handleRequest(api.CreateCapacityProvider, w, r)
		case "CreateCluster":
			handleRequest(api.CreateCluster, w, r)
		case "CreateService":
			handleRequest(api.CreateService, w, r)
		case "CreateTaskSet":
			handleRequest(api.CreateTaskSet, w, r)
		case "DeleteAccountSetting":
			handleRequest(api.DeleteAccountSetting, w, r)
		case "DeleteAttributes":
			handleRequest(api.DeleteAttributes, w, r)
		case "DeleteCapacityProvider":
			handleRequest(api.DeleteCapacityProvider, w, r)
		case "DeleteCluster":
			handleRequest(api.DeleteCluster, w, r)
		case "DeleteService":
			handleRequest(api.DeleteService, w, r)
		case "DeleteTaskDefinitions":
			handleRequest(api.DeleteTaskDefinitions, w, r)
		case "DeleteTaskSet":
			handleRequest(api.DeleteTaskSet, w, r)
		case "DeregisterContainerInstance":
			handleRequest(api.DeregisterContainerInstance, w, r)
		case "DeregisterTaskDefinition":
			handleRequest(api.DeregisterTaskDefinition, w, r)
		case "DescribeCapacityProviders":
			handleRequest(api.DescribeCapacityProviders, w, r)
		case "DescribeClusters":
			handleRequest(api.DescribeClusters, w, r)
		case "DescribeContainerInstances":
			handleRequest(api.DescribeContainerInstances, w, r)
		case "DescribeServiceDeployments":
			handleRequest(api.DescribeServiceDeployments, w, r)
		case "DescribeServiceRevisions":
			handleRequest(api.DescribeServiceRevisions, w, r)
		case "DescribeServices":
			handleRequest(api.DescribeServices, w, r)
		case "DescribeTaskDefinition":
			handleRequest(api.DescribeTaskDefinition, w, r)
		case "DescribeTaskSets":
			handleRequest(api.DescribeTaskSets, w, r)
		case "DescribeTasks":
			handleRequest(api.DescribeTasks, w, r)
		case "DiscoverPollEndpoint":
			handleRequest(api.DiscoverPollEndpoint, w, r)
		case "ExecuteCommand":
			handleRequest(api.ExecuteCommand, w, r)
		case "GetTaskProtection":
			handleRequest(api.GetTaskProtection, w, r)
		case "ListAccountSettings":
			handleRequest(api.ListAccountSettings, w, r)
		case "ListAttributes":
			handleRequest(api.ListAttributes, w, r)
		case "ListClusters":
			handleRequest(api.ListClusters, w, r)
		case "ListContainerInstances":
			handleRequest(api.ListContainerInstances, w, r)
		case "ListServiceDeployments":
			handleRequest(api.ListServiceDeployments, w, r)
		case "ListServices":
			handleRequest(api.ListServices, w, r)
		case "ListServicesByNamespace":
			handleRequest(api.ListServicesByNamespace, w, r)
		case "ListTagsForResource":
			handleRequest(api.ListTagsForResource, w, r)
		case "ListTaskDefinitionFamilies":
			handleRequest(api.ListTaskDefinitionFamilies, w, r)
		case "ListTaskDefinitions":
			handleRequest(api.ListTaskDefinitions, w, r)
		case "ListTasks":
			handleRequest(api.ListTasks, w, r)
		case "PutAccountSetting":
			handleRequest(api.PutAccountSetting, w, r)
		case "PutAccountSettingDefault":
			handleRequest(api.PutAccountSettingDefault, w, r)
		case "PutAttributes":
			handleRequest(api.PutAttributes, w, r)
		case "PutClusterCapacityProviders":
			handleRequest(api.PutClusterCapacityProviders, w, r)
		case "RegisterContainerInstance":
			handleRequest(api.RegisterContainerInstance, w, r)
		case "RegisterTaskDefinition":
			handleRequest(api.RegisterTaskDefinition, w, r)
		case "RunTask":
			handleRequest(api.RunTask, w, r)
		case "StartTask":
			handleRequest(api.StartTask, w, r)
		case "StopServiceDeployment":
			handleRequest(api.StopServiceDeployment, w, r)
		case "StopTask":
			handleRequest(api.StopTask, w, r)
		case "SubmitAttachmentStateChanges":
			handleRequest(api.SubmitAttachmentStateChanges, w, r)
		case "SubmitContainerStateChange":
			handleRequest(api.SubmitContainerStateChange, w, r)
		case "SubmitTaskStateChange":
			handleRequest(api.SubmitTaskStateChange, w, r)
		case "TagResource":
			handleRequest(api.TagResource, w, r)
		case "UntagResource":
			handleRequest(api.UntagResource, w, r)
		case "UpdateCapacityProvider":
			handleRequest(api.UpdateCapacityProvider, w, r)
		case "UpdateCluster":
			handleRequest(api.UpdateCluster, w, r)
		case "UpdateClusterSettings":
			handleRequest(api.UpdateClusterSettings, w, r)
		case "UpdateContainerAgent":
			handleRequest(api.UpdateContainerAgent, w, r)
		case "UpdateContainerInstancesState":
			handleRequest(api.UpdateContainerInstancesState, w, r)
		case "UpdateService":
			handleRequest(api.UpdateService, w, r)
		case "UpdateServicePrimaryTaskSet":
			handleRequest(api.UpdateServicePrimaryTaskSet, w, r)
		case "UpdateTaskProtection":
			handleRequest(api.UpdateTaskProtection, w, r)
		case "UpdateTaskSet":
			handleRequest(api.UpdateTaskSet, w, r)
		default:
			// Return a basic empty response for unsupported operations
			w.Header().Set("Content-Type", "application/x-amz-json-1.1")
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("{}"))
		}
	}
}
