// Code generated by cmd/codegen. DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

// Client is an HTTP client for ecs API
type Client struct {
	endpoint   string
	httpClient *http.Client
	service    string
	version    string
}

// ClientOptions contains options for creating a client
type ClientOptions struct {
	// Endpoint is the API endpoint URL
	Endpoint string

	// HTTPClient is the HTTP client to use
	HTTPClient *http.Client

	// Timeout is the request timeout
	Timeout time.Duration
}

// NewClient creates a new ecs API client
func NewClient(opts ClientOptions) *Client {
	if opts.HTTPClient == nil {
		opts.HTTPClient = &http.Client{
			Timeout: opts.Timeout,
		}
		if opts.Timeout == 0 {
			opts.HTTPClient.Timeout = 30 * time.Second
		}
	}

	return &Client{
		endpoint:   opts.Endpoint,
		httpClient: opts.HTTPClient,
		service:    "AmazonEC2ContainerServiceV20141113",
		version:    "",
	}
}

// CreateCapacityProvider performs the CreateCapacityProvider operation
func (c *Client) CreateCapacityProvider(ctx context.Context, input *CreateCapacityProviderRequest) (*CreateCapacityProviderResponse, error) {
	output := &CreateCapacityProviderResponse{}
	err := c.doRequest(ctx, "CreateCapacityProvider", input, output)
	return output, err
}

// CreateCluster performs the CreateCluster operation
func (c *Client) CreateCluster(ctx context.Context, input *CreateClusterRequest) (*CreateClusterResponse, error) {
	output := &CreateClusterResponse{}
	err := c.doRequest(ctx, "CreateCluster", input, output)
	return output, err
}

// CreateService performs the CreateService operation
func (c *Client) CreateService(ctx context.Context, input *CreateServiceRequest) (*CreateServiceResponse, error) {
	output := &CreateServiceResponse{}
	err := c.doRequest(ctx, "CreateService", input, output)
	return output, err
}

// CreateTaskSet performs the CreateTaskSet operation
func (c *Client) CreateTaskSet(ctx context.Context, input *CreateTaskSetRequest) (*CreateTaskSetResponse, error) {
	output := &CreateTaskSetResponse{}
	err := c.doRequest(ctx, "CreateTaskSet", input, output)
	return output, err
}

// DeleteAccountSetting performs the DeleteAccountSetting operation
func (c *Client) DeleteAccountSetting(ctx context.Context, input *DeleteAccountSettingRequest) (*DeleteAccountSettingResponse, error) {
	output := &DeleteAccountSettingResponse{}
	err := c.doRequest(ctx, "DeleteAccountSetting", input, output)
	return output, err
}

// DeleteAttributes performs the DeleteAttributes operation
func (c *Client) DeleteAttributes(ctx context.Context, input *DeleteAttributesRequest) (*DeleteAttributesResponse, error) {
	output := &DeleteAttributesResponse{}
	err := c.doRequest(ctx, "DeleteAttributes", input, output)
	return output, err
}

// DeleteCapacityProvider performs the DeleteCapacityProvider operation
func (c *Client) DeleteCapacityProvider(ctx context.Context, input *DeleteCapacityProviderRequest) (*DeleteCapacityProviderResponse, error) {
	output := &DeleteCapacityProviderResponse{}
	err := c.doRequest(ctx, "DeleteCapacityProvider", input, output)
	return output, err
}

// DeleteCluster performs the DeleteCluster operation
func (c *Client) DeleteCluster(ctx context.Context, input *DeleteClusterRequest) (*DeleteClusterResponse, error) {
	output := &DeleteClusterResponse{}
	err := c.doRequest(ctx, "DeleteCluster", input, output)
	return output, err
}

// DeleteService performs the DeleteService operation
func (c *Client) DeleteService(ctx context.Context, input *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	output := &DeleteServiceResponse{}
	err := c.doRequest(ctx, "DeleteService", input, output)
	return output, err
}

// DeleteTaskDefinitions performs the DeleteTaskDefinitions operation
func (c *Client) DeleteTaskDefinitions(ctx context.Context, input *DeleteTaskDefinitionsRequest) (*DeleteTaskDefinitionsResponse, error) {
	output := &DeleteTaskDefinitionsResponse{}
	err := c.doRequest(ctx, "DeleteTaskDefinitions", input, output)
	return output, err
}

// DeleteTaskSet performs the DeleteTaskSet operation
func (c *Client) DeleteTaskSet(ctx context.Context, input *DeleteTaskSetRequest) (*DeleteTaskSetResponse, error) {
	output := &DeleteTaskSetResponse{}
	err := c.doRequest(ctx, "DeleteTaskSet", input, output)
	return output, err
}

// DeregisterContainerInstance performs the DeregisterContainerInstance operation
func (c *Client) DeregisterContainerInstance(ctx context.Context, input *DeregisterContainerInstanceRequest) (*DeregisterContainerInstanceResponse, error) {
	output := &DeregisterContainerInstanceResponse{}
	err := c.doRequest(ctx, "DeregisterContainerInstance", input, output)
	return output, err
}

// DeregisterTaskDefinition performs the DeregisterTaskDefinition operation
func (c *Client) DeregisterTaskDefinition(ctx context.Context, input *DeregisterTaskDefinitionRequest) (*DeregisterTaskDefinitionResponse, error) {
	output := &DeregisterTaskDefinitionResponse{}
	err := c.doRequest(ctx, "DeregisterTaskDefinition", input, output)
	return output, err
}

// DescribeCapacityProviders performs the DescribeCapacityProviders operation
func (c *Client) DescribeCapacityProviders(ctx context.Context, input *DescribeCapacityProvidersRequest) (*DescribeCapacityProvidersResponse, error) {
	output := &DescribeCapacityProvidersResponse{}
	err := c.doRequest(ctx, "DescribeCapacityProviders", input, output)
	return output, err
}

// DescribeClusters performs the DescribeClusters operation
func (c *Client) DescribeClusters(ctx context.Context, input *DescribeClustersRequest) (*DescribeClustersResponse, error) {
	output := &DescribeClustersResponse{}
	err := c.doRequest(ctx, "DescribeClusters", input, output)
	return output, err
}

// DescribeContainerInstances performs the DescribeContainerInstances operation
func (c *Client) DescribeContainerInstances(ctx context.Context, input *DescribeContainerInstancesRequest) (*DescribeContainerInstancesResponse, error) {
	output := &DescribeContainerInstancesResponse{}
	err := c.doRequest(ctx, "DescribeContainerInstances", input, output)
	return output, err
}

// DescribeServiceDeployments performs the DescribeServiceDeployments operation
func (c *Client) DescribeServiceDeployments(ctx context.Context, input *DescribeServiceDeploymentsRequest) (*DescribeServiceDeploymentsResponse, error) {
	output := &DescribeServiceDeploymentsResponse{}
	err := c.doRequest(ctx, "DescribeServiceDeployments", input, output)
	return output, err
}

// DescribeServiceRevisions performs the DescribeServiceRevisions operation
func (c *Client) DescribeServiceRevisions(ctx context.Context, input *DescribeServiceRevisionsRequest) (*DescribeServiceRevisionsResponse, error) {
	output := &DescribeServiceRevisionsResponse{}
	err := c.doRequest(ctx, "DescribeServiceRevisions", input, output)
	return output, err
}

// DescribeServices performs the DescribeServices operation
func (c *Client) DescribeServices(ctx context.Context, input *DescribeServicesRequest) (*DescribeServicesResponse, error) {
	output := &DescribeServicesResponse{}
	err := c.doRequest(ctx, "DescribeServices", input, output)
	return output, err
}

// DescribeTaskDefinition performs the DescribeTaskDefinition operation
func (c *Client) DescribeTaskDefinition(ctx context.Context, input *DescribeTaskDefinitionRequest) (*DescribeTaskDefinitionResponse, error) {
	output := &DescribeTaskDefinitionResponse{}
	err := c.doRequest(ctx, "DescribeTaskDefinition", input, output)
	return output, err
}

// DescribeTaskSets performs the DescribeTaskSets operation
func (c *Client) DescribeTaskSets(ctx context.Context, input *DescribeTaskSetsRequest) (*DescribeTaskSetsResponse, error) {
	output := &DescribeTaskSetsResponse{}
	err := c.doRequest(ctx, "DescribeTaskSets", input, output)
	return output, err
}

// DescribeTasks performs the DescribeTasks operation
func (c *Client) DescribeTasks(ctx context.Context, input *DescribeTasksRequest) (*DescribeTasksResponse, error) {
	output := &DescribeTasksResponse{}
	err := c.doRequest(ctx, "DescribeTasks", input, output)
	return output, err
}

// DiscoverPollEndpoint performs the DiscoverPollEndpoint operation
func (c *Client) DiscoverPollEndpoint(ctx context.Context, input *DiscoverPollEndpointRequest) (*DiscoverPollEndpointResponse, error) {
	output := &DiscoverPollEndpointResponse{}
	err := c.doRequest(ctx, "DiscoverPollEndpoint", input, output)
	return output, err
}

// ExecuteCommand performs the ExecuteCommand operation
func (c *Client) ExecuteCommand(ctx context.Context, input *ExecuteCommandRequest) (*ExecuteCommandResponse, error) {
	output := &ExecuteCommandResponse{}
	err := c.doRequest(ctx, "ExecuteCommand", input, output)
	return output, err
}

// GetTaskProtection performs the GetTaskProtection operation
func (c *Client) GetTaskProtection(ctx context.Context, input *GetTaskProtectionRequest) (*GetTaskProtectionResponse, error) {
	output := &GetTaskProtectionResponse{}
	err := c.doRequest(ctx, "GetTaskProtection", input, output)
	return output, err
}

// ListAccountSettings performs the ListAccountSettings operation
func (c *Client) ListAccountSettings(ctx context.Context, input *ListAccountSettingsRequest) (*ListAccountSettingsResponse, error) {
	output := &ListAccountSettingsResponse{}
	err := c.doRequest(ctx, "ListAccountSettings", input, output)
	return output, err
}

// ListAttributes performs the ListAttributes operation
func (c *Client) ListAttributes(ctx context.Context, input *ListAttributesRequest) (*ListAttributesResponse, error) {
	output := &ListAttributesResponse{}
	err := c.doRequest(ctx, "ListAttributes", input, output)
	return output, err
}

// ListClusters performs the ListClusters operation
func (c *Client) ListClusters(ctx context.Context, input *ListClustersRequest) (*ListClustersResponse, error) {
	output := &ListClustersResponse{}
	err := c.doRequest(ctx, "ListClusters", input, output)
	return output, err
}

// ListContainerInstances performs the ListContainerInstances operation
func (c *Client) ListContainerInstances(ctx context.Context, input *ListContainerInstancesRequest) (*ListContainerInstancesResponse, error) {
	output := &ListContainerInstancesResponse{}
	err := c.doRequest(ctx, "ListContainerInstances", input, output)
	return output, err
}

// ListServiceDeployments performs the ListServiceDeployments operation
func (c *Client) ListServiceDeployments(ctx context.Context, input *ListServiceDeploymentsRequest) (*ListServiceDeploymentsResponse, error) {
	output := &ListServiceDeploymentsResponse{}
	err := c.doRequest(ctx, "ListServiceDeployments", input, output)
	return output, err
}

// ListServices performs the ListServices operation
func (c *Client) ListServices(ctx context.Context, input *ListServicesRequest) (*ListServicesResponse, error) {
	output := &ListServicesResponse{}
	err := c.doRequest(ctx, "ListServices", input, output)
	return output, err
}

// ListServicesByNamespace performs the ListServicesByNamespace operation
func (c *Client) ListServicesByNamespace(ctx context.Context, input *ListServicesByNamespaceRequest) (*ListServicesByNamespaceResponse, error) {
	output := &ListServicesByNamespaceResponse{}
	err := c.doRequest(ctx, "ListServicesByNamespace", input, output)
	return output, err
}

// ListTagsForResource performs the ListTagsForResource operation
func (c *Client) ListTagsForResource(ctx context.Context, input *ListTagsForResourceRequest) (*ListTagsForResourceResponse, error) {
	output := &ListTagsForResourceResponse{}
	err := c.doRequest(ctx, "ListTagsForResource", input, output)
	return output, err
}

// ListTaskDefinitionFamilies performs the ListTaskDefinitionFamilies operation
func (c *Client) ListTaskDefinitionFamilies(ctx context.Context, input *ListTaskDefinitionFamiliesRequest) (*ListTaskDefinitionFamiliesResponse, error) {
	output := &ListTaskDefinitionFamiliesResponse{}
	err := c.doRequest(ctx, "ListTaskDefinitionFamilies", input, output)
	return output, err
}

// ListTaskDefinitions performs the ListTaskDefinitions operation
func (c *Client) ListTaskDefinitions(ctx context.Context, input *ListTaskDefinitionsRequest) (*ListTaskDefinitionsResponse, error) {
	output := &ListTaskDefinitionsResponse{}
	err := c.doRequest(ctx, "ListTaskDefinitions", input, output)
	return output, err
}

// ListTasks performs the ListTasks operation
func (c *Client) ListTasks(ctx context.Context, input *ListTasksRequest) (*ListTasksResponse, error) {
	output := &ListTasksResponse{}
	err := c.doRequest(ctx, "ListTasks", input, output)
	return output, err
}

// PutAccountSetting performs the PutAccountSetting operation
func (c *Client) PutAccountSetting(ctx context.Context, input *PutAccountSettingRequest) (*PutAccountSettingResponse, error) {
	output := &PutAccountSettingResponse{}
	err := c.doRequest(ctx, "PutAccountSetting", input, output)
	return output, err
}

// PutAccountSettingDefault performs the PutAccountSettingDefault operation
func (c *Client) PutAccountSettingDefault(ctx context.Context, input *PutAccountSettingDefaultRequest) (*PutAccountSettingDefaultResponse, error) {
	output := &PutAccountSettingDefaultResponse{}
	err := c.doRequest(ctx, "PutAccountSettingDefault", input, output)
	return output, err
}

// PutAttributes performs the PutAttributes operation
func (c *Client) PutAttributes(ctx context.Context, input *PutAttributesRequest) (*PutAttributesResponse, error) {
	output := &PutAttributesResponse{}
	err := c.doRequest(ctx, "PutAttributes", input, output)
	return output, err
}

// PutClusterCapacityProviders performs the PutClusterCapacityProviders operation
func (c *Client) PutClusterCapacityProviders(ctx context.Context, input *PutClusterCapacityProvidersRequest) (*PutClusterCapacityProvidersResponse, error) {
	output := &PutClusterCapacityProvidersResponse{}
	err := c.doRequest(ctx, "PutClusterCapacityProviders", input, output)
	return output, err
}

// RegisterContainerInstance performs the RegisterContainerInstance operation
func (c *Client) RegisterContainerInstance(ctx context.Context, input *RegisterContainerInstanceRequest) (*RegisterContainerInstanceResponse, error) {
	output := &RegisterContainerInstanceResponse{}
	err := c.doRequest(ctx, "RegisterContainerInstance", input, output)
	return output, err
}

// RegisterTaskDefinition performs the RegisterTaskDefinition operation
func (c *Client) RegisterTaskDefinition(ctx context.Context, input *RegisterTaskDefinitionRequest) (*RegisterTaskDefinitionResponse, error) {
	output := &RegisterTaskDefinitionResponse{}
	err := c.doRequest(ctx, "RegisterTaskDefinition", input, output)
	return output, err
}

// RunTask performs the RunTask operation
func (c *Client) RunTask(ctx context.Context, input *RunTaskRequest) (*RunTaskResponse, error) {
	output := &RunTaskResponse{}
	err := c.doRequest(ctx, "RunTask", input, output)
	return output, err
}

// StartTask performs the StartTask operation
func (c *Client) StartTask(ctx context.Context, input *StartTaskRequest) (*StartTaskResponse, error) {
	output := &StartTaskResponse{}
	err := c.doRequest(ctx, "StartTask", input, output)
	return output, err
}

// StopServiceDeployment performs the StopServiceDeployment operation
func (c *Client) StopServiceDeployment(ctx context.Context, input *StopServiceDeploymentRequest) (*StopServiceDeploymentResponse, error) {
	output := &StopServiceDeploymentResponse{}
	err := c.doRequest(ctx, "StopServiceDeployment", input, output)
	return output, err
}

// StopTask performs the StopTask operation
func (c *Client) StopTask(ctx context.Context, input *StopTaskRequest) (*StopTaskResponse, error) {
	output := &StopTaskResponse{}
	err := c.doRequest(ctx, "StopTask", input, output)
	return output, err
}

// SubmitAttachmentStateChanges performs the SubmitAttachmentStateChanges operation
func (c *Client) SubmitAttachmentStateChanges(ctx context.Context, input *SubmitAttachmentStateChangesRequest) (*SubmitAttachmentStateChangesResponse, error) {
	output := &SubmitAttachmentStateChangesResponse{}
	err := c.doRequest(ctx, "SubmitAttachmentStateChanges", input, output)
	return output, err
}

// SubmitContainerStateChange performs the SubmitContainerStateChange operation
func (c *Client) SubmitContainerStateChange(ctx context.Context, input *SubmitContainerStateChangeRequest) (*SubmitContainerStateChangeResponse, error) {
	output := &SubmitContainerStateChangeResponse{}
	err := c.doRequest(ctx, "SubmitContainerStateChange", input, output)
	return output, err
}

// SubmitTaskStateChange performs the SubmitTaskStateChange operation
func (c *Client) SubmitTaskStateChange(ctx context.Context, input *SubmitTaskStateChangeRequest) (*SubmitTaskStateChangeResponse, error) {
	output := &SubmitTaskStateChangeResponse{}
	err := c.doRequest(ctx, "SubmitTaskStateChange", input, output)
	return output, err
}

// TagResource performs the TagResource operation
func (c *Client) TagResource(ctx context.Context, input *TagResourceRequest) (*TagResourceResponse, error) {
	output := &TagResourceResponse{}
	err := c.doRequest(ctx, "TagResource", input, output)
	return output, err
}

// UntagResource performs the UntagResource operation
func (c *Client) UntagResource(ctx context.Context, input *UntagResourceRequest) (*UntagResourceResponse, error) {
	output := &UntagResourceResponse{}
	err := c.doRequest(ctx, "UntagResource", input, output)
	return output, err
}

// UpdateCapacityProvider performs the UpdateCapacityProvider operation
func (c *Client) UpdateCapacityProvider(ctx context.Context, input *UpdateCapacityProviderRequest) (*UpdateCapacityProviderResponse, error) {
	output := &UpdateCapacityProviderResponse{}
	err := c.doRequest(ctx, "UpdateCapacityProvider", input, output)
	return output, err
}

// UpdateCluster performs the UpdateCluster operation
func (c *Client) UpdateCluster(ctx context.Context, input *UpdateClusterRequest) (*UpdateClusterResponse, error) {
	output := &UpdateClusterResponse{}
	err := c.doRequest(ctx, "UpdateCluster", input, output)
	return output, err
}

// UpdateClusterSettings performs the UpdateClusterSettings operation
func (c *Client) UpdateClusterSettings(ctx context.Context, input *UpdateClusterSettingsRequest) (*UpdateClusterSettingsResponse, error) {
	output := &UpdateClusterSettingsResponse{}
	err := c.doRequest(ctx, "UpdateClusterSettings", input, output)
	return output, err
}

// UpdateContainerAgent performs the UpdateContainerAgent operation
func (c *Client) UpdateContainerAgent(ctx context.Context, input *UpdateContainerAgentRequest) (*UpdateContainerAgentResponse, error) {
	output := &UpdateContainerAgentResponse{}
	err := c.doRequest(ctx, "UpdateContainerAgent", input, output)
	return output, err
}

// UpdateContainerInstancesState performs the UpdateContainerInstancesState operation
func (c *Client) UpdateContainerInstancesState(ctx context.Context, input *UpdateContainerInstancesStateRequest) (*UpdateContainerInstancesStateResponse, error) {
	output := &UpdateContainerInstancesStateResponse{}
	err := c.doRequest(ctx, "UpdateContainerInstancesState", input, output)
	return output, err
}

// UpdateService performs the UpdateService operation
func (c *Client) UpdateService(ctx context.Context, input *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	output := &UpdateServiceResponse{}
	err := c.doRequest(ctx, "UpdateService", input, output)
	return output, err
}

// UpdateServicePrimaryTaskSet performs the UpdateServicePrimaryTaskSet operation
func (c *Client) UpdateServicePrimaryTaskSet(ctx context.Context, input *UpdateServicePrimaryTaskSetRequest) (*UpdateServicePrimaryTaskSetResponse, error) {
	output := &UpdateServicePrimaryTaskSetResponse{}
	err := c.doRequest(ctx, "UpdateServicePrimaryTaskSet", input, output)
	return output, err
}

// UpdateTaskProtection performs the UpdateTaskProtection operation
func (c *Client) UpdateTaskProtection(ctx context.Context, input *UpdateTaskProtectionRequest) (*UpdateTaskProtectionResponse, error) {
	output := &UpdateTaskProtectionResponse{}
	err := c.doRequest(ctx, "UpdateTaskProtection", input, output)
	return output, err
}

// UpdateTaskSet performs the UpdateTaskSet operation
func (c *Client) UpdateTaskSet(ctx context.Context, input *UpdateTaskSetRequest) (*UpdateTaskSetResponse, error) {
	output := &UpdateTaskSetResponse{}
	err := c.doRequest(ctx, "UpdateTaskSet", input, output)
	return output, err
}

// doRequest performs an HTTP request
func (c *Client) doRequest(ctx context.Context, operation string, input, output interface{}) error {
	// Marshal input
	var body io.Reader
	if input != nil {
		data, err := json.Marshal(input)
		if err != nil {
			return fmt.Errorf("failed to marshal request: %w", err)
		}
		body = bytes.NewReader(data)
	}

	// Create request
	req, err := http.NewRequestWithContext(ctx, "POST", c.endpoint+"/v1/"+operation, body)
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	req.Header.Set("Content-Type", "application/x-amz-json-1.1")
	req.Header.Set("X-Amz-Target", c.service+"."+operation)

	// Send request
	resp, err := c.httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	// Read response
	respData, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("failed to read response: %w", err)
	}

	// Handle errors
	if resp.StatusCode >= 400 {
		var errResp struct {
			Type    string `json:"__type"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(respData, &errResp); err == nil {
			return fmt.Errorf("%s: %s", errResp.Type, errResp.Message)
		}
		return fmt.Errorf("request failed with status %d: %s", resp.StatusCode, string(respData))
	}

	// Unmarshal response
	if output != nil && len(respData) > 0 {
		if err := json.Unmarshal(respData, output); err != nil {
			return fmt.Errorf("failed to unmarshal response: %w", err)
		}
	}

	return nil
}
