// Code generated by cmd/codegen. DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for ecs API
type Router struct {
	api Logs_20140328API
}

// NewRouter creates a new router for ecs API
func NewRouter(api Logs_20140328API) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "AssociateKmsKey":
		r.handleAssociateKmsKey(w, req)

	case "CancelExportTask":
		r.handleCancelExportTask(w, req)

	case "CreateDelivery":
		r.handleCreateDelivery(w, req)

	case "CreateExportTask":
		r.handleCreateExportTask(w, req)

	case "CreateLogAnomalyDetector":
		r.handleCreateLogAnomalyDetector(w, req)

	case "CreateLogGroup":
		r.handleCreateLogGroup(w, req)

	case "CreateLogStream":
		r.handleCreateLogStream(w, req)

	case "DeleteAccountPolicy":
		r.handleDeleteAccountPolicy(w, req)

	case "DeleteDataProtectionPolicy":
		r.handleDeleteDataProtectionPolicy(w, req)

	case "DeleteDelivery":
		r.handleDeleteDelivery(w, req)

	case "DeleteDeliveryDestination":
		r.handleDeleteDeliveryDestination(w, req)

	case "DeleteDeliveryDestinationPolicy":
		r.handleDeleteDeliveryDestinationPolicy(w, req)

	case "DeleteDeliverySource":
		r.handleDeleteDeliverySource(w, req)

	case "DeleteDestination":
		r.handleDeleteDestination(w, req)

	case "DeleteIndexPolicy":
		r.handleDeleteIndexPolicy(w, req)

	case "DeleteIntegration":
		r.handleDeleteIntegration(w, req)

	case "DeleteLogAnomalyDetector":
		r.handleDeleteLogAnomalyDetector(w, req)

	case "DeleteLogGroup":
		r.handleDeleteLogGroup(w, req)

	case "DeleteLogStream":
		r.handleDeleteLogStream(w, req)

	case "DeleteMetricFilter":
		r.handleDeleteMetricFilter(w, req)

	case "DeleteQueryDefinition":
		r.handleDeleteQueryDefinition(w, req)

	case "DeleteResourcePolicy":
		r.handleDeleteResourcePolicy(w, req)

	case "DeleteRetentionPolicy":
		r.handleDeleteRetentionPolicy(w, req)

	case "DeleteSubscriptionFilter":
		r.handleDeleteSubscriptionFilter(w, req)

	case "DeleteTransformer":
		r.handleDeleteTransformer(w, req)

	case "DescribeAccountPolicies":
		r.handleDescribeAccountPolicies(w, req)

	case "DescribeConfigurationTemplates":
		r.handleDescribeConfigurationTemplates(w, req)

	case "DescribeDeliveries":
		r.handleDescribeDeliveries(w, req)

	case "DescribeDeliveryDestinations":
		r.handleDescribeDeliveryDestinations(w, req)

	case "DescribeDeliverySources":
		r.handleDescribeDeliverySources(w, req)

	case "DescribeDestinations":
		r.handleDescribeDestinations(w, req)

	case "DescribeExportTasks":
		r.handleDescribeExportTasks(w, req)

	case "DescribeFieldIndexes":
		r.handleDescribeFieldIndexes(w, req)

	case "DescribeIndexPolicies":
		r.handleDescribeIndexPolicies(w, req)

	case "DescribeLogGroups":
		r.handleDescribeLogGroups(w, req)

	case "DescribeLogStreams":
		r.handleDescribeLogStreams(w, req)

	case "DescribeMetricFilters":
		r.handleDescribeMetricFilters(w, req)

	case "DescribeQueries":
		r.handleDescribeQueries(w, req)

	case "DescribeQueryDefinitions":
		r.handleDescribeQueryDefinitions(w, req)

	case "DescribeResourcePolicies":
		r.handleDescribeResourcePolicies(w, req)

	case "DescribeSubscriptionFilters":
		r.handleDescribeSubscriptionFilters(w, req)

	case "DisassociateKmsKey":
		r.handleDisassociateKmsKey(w, req)

	case "FilterLogEvents":
		r.handleFilterLogEvents(w, req)

	case "GetDataProtectionPolicy":
		r.handleGetDataProtectionPolicy(w, req)

	case "GetDelivery":
		r.handleGetDelivery(w, req)

	case "GetDeliveryDestination":
		r.handleGetDeliveryDestination(w, req)

	case "GetDeliveryDestinationPolicy":
		r.handleGetDeliveryDestinationPolicy(w, req)

	case "GetDeliverySource":
		r.handleGetDeliverySource(w, req)

	case "GetIntegration":
		r.handleGetIntegration(w, req)

	case "GetLogAnomalyDetector":
		r.handleGetLogAnomalyDetector(w, req)

	case "GetLogEvents":
		r.handleGetLogEvents(w, req)

	case "GetLogGroupFields":
		r.handleGetLogGroupFields(w, req)

	case "GetLogRecord":
		r.handleGetLogRecord(w, req)

	case "GetQueryResults":
		r.handleGetQueryResults(w, req)

	case "GetTransformer":
		r.handleGetTransformer(w, req)

	case "ListAnomalies":
		r.handleListAnomalies(w, req)

	case "ListIntegrations":
		r.handleListIntegrations(w, req)

	case "ListLogAnomalyDetectors":
		r.handleListLogAnomalyDetectors(w, req)

	case "ListLogGroups":
		r.handleListLogGroups(w, req)

	case "ListLogGroupsForQuery":
		r.handleListLogGroupsForQuery(w, req)

	case "ListTagsForResource":
		r.handleListTagsForResource(w, req)

	case "ListTagsLogGroup":
		r.handleListTagsLogGroup(w, req)

	case "PutAccountPolicy":
		r.handlePutAccountPolicy(w, req)

	case "PutDataProtectionPolicy":
		r.handlePutDataProtectionPolicy(w, req)

	case "PutDeliveryDestination":
		r.handlePutDeliveryDestination(w, req)

	case "PutDeliveryDestinationPolicy":
		r.handlePutDeliveryDestinationPolicy(w, req)

	case "PutDeliverySource":
		r.handlePutDeliverySource(w, req)

	case "PutDestination":
		r.handlePutDestination(w, req)

	case "PutDestinationPolicy":
		r.handlePutDestinationPolicy(w, req)

	case "PutIndexPolicy":
		r.handlePutIndexPolicy(w, req)

	case "PutIntegration":
		r.handlePutIntegration(w, req)

	case "PutLogEvents":
		r.handlePutLogEvents(w, req)

	case "PutMetricFilter":
		r.handlePutMetricFilter(w, req)

	case "PutQueryDefinition":
		r.handlePutQueryDefinition(w, req)

	case "PutResourcePolicy":
		r.handlePutResourcePolicy(w, req)

	case "PutRetentionPolicy":
		r.handlePutRetentionPolicy(w, req)

	case "PutSubscriptionFilter":
		r.handlePutSubscriptionFilter(w, req)

	case "PutTransformer":
		r.handlePutTransformer(w, req)

	case "StartLiveTail":
		r.handleStartLiveTail(w, req)

	case "StartQuery":
		r.handleStartQuery(w, req)

	case "StopQuery":
		r.handleStopQuery(w, req)

	case "TagLogGroup":
		r.handleTagLogGroup(w, req)

	case "TagResource":
		r.handleTagResource(w, req)

	case "TestMetricFilter":
		r.handleTestMetricFilter(w, req)

	case "TestTransformer":
		r.handleTestTransformer(w, req)

	case "UntagLogGroup":
		r.handleUntagLogGroup(w, req)

	case "UntagResource":
		r.handleUntagResource(w, req)

	case "UpdateAnomaly":
		r.handleUpdateAnomaly(w, req)

	case "UpdateDeliveryConfiguration":
		r.handleUpdateDeliveryConfiguration(w, req)

	case "UpdateLogAnomalyDetector":
		r.handleUpdateLogAnomalyDetector(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleAssociateKmsKey handles the AssociateKmsKey operation
func (r *Router) handleAssociateKmsKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AssociateKmsKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AssociateKmsKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCancelExportTask handles the CancelExportTask operation
func (r *Router) handleCancelExportTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CancelExportTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CancelExportTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateDelivery handles the CreateDelivery operation
func (r *Router) handleCreateDelivery(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateDeliveryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateDelivery(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateExportTask handles the CreateExportTask operation
func (r *Router) handleCreateExportTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateExportTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateExportTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateLogAnomalyDetector handles the CreateLogAnomalyDetector operation
func (r *Router) handleCreateLogAnomalyDetector(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateLogAnomalyDetectorRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateLogAnomalyDetector(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateLogGroup handles the CreateLogGroup operation
func (r *Router) handleCreateLogGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateLogGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateLogGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateLogStream handles the CreateLogStream operation
func (r *Router) handleCreateLogStream(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateLogStreamRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateLogStream(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteAccountPolicy handles the DeleteAccountPolicy operation
func (r *Router) handleDeleteAccountPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteAccountPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteAccountPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteDataProtectionPolicy handles the DeleteDataProtectionPolicy operation
func (r *Router) handleDeleteDataProtectionPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteDataProtectionPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteDataProtectionPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteDelivery handles the DeleteDelivery operation
func (r *Router) handleDeleteDelivery(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteDeliveryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteDelivery(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteDeliveryDestination handles the DeleteDeliveryDestination operation
func (r *Router) handleDeleteDeliveryDestination(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteDeliveryDestinationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteDeliveryDestination(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteDeliveryDestinationPolicy handles the DeleteDeliveryDestinationPolicy operation
func (r *Router) handleDeleteDeliveryDestinationPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteDeliveryDestinationPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteDeliveryDestinationPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteDeliverySource handles the DeleteDeliverySource operation
func (r *Router) handleDeleteDeliverySource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteDeliverySourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteDeliverySource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteDestination handles the DeleteDestination operation
func (r *Router) handleDeleteDestination(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteDestinationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteDestination(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteIndexPolicy handles the DeleteIndexPolicy operation
func (r *Router) handleDeleteIndexPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteIndexPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteIndexPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteIntegration handles the DeleteIntegration operation
func (r *Router) handleDeleteIntegration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteIntegrationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteIntegration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteLogAnomalyDetector handles the DeleteLogAnomalyDetector operation
func (r *Router) handleDeleteLogAnomalyDetector(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteLogAnomalyDetectorRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteLogAnomalyDetector(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteLogGroup handles the DeleteLogGroup operation
func (r *Router) handleDeleteLogGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteLogGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteLogGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteLogStream handles the DeleteLogStream operation
func (r *Router) handleDeleteLogStream(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteLogStreamRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteLogStream(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteMetricFilter handles the DeleteMetricFilter operation
func (r *Router) handleDeleteMetricFilter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteMetricFilterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteMetricFilter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteQueryDefinition handles the DeleteQueryDefinition operation
func (r *Router) handleDeleteQueryDefinition(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteQueryDefinitionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteQueryDefinition(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteResourcePolicy handles the DeleteResourcePolicy operation
func (r *Router) handleDeleteResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteRetentionPolicy handles the DeleteRetentionPolicy operation
func (r *Router) handleDeleteRetentionPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteRetentionPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteRetentionPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteSubscriptionFilter handles the DeleteSubscriptionFilter operation
func (r *Router) handleDeleteSubscriptionFilter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteSubscriptionFilterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteSubscriptionFilter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteTransformer handles the DeleteTransformer operation
func (r *Router) handleDeleteTransformer(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteTransformerRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteTransformer(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAccountPolicies handles the DescribeAccountPolicies operation
func (r *Router) handleDescribeAccountPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAccountPoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAccountPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeConfigurationTemplates handles the DescribeConfigurationTemplates operation
func (r *Router) handleDescribeConfigurationTemplates(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeConfigurationTemplatesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeConfigurationTemplates(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeDeliveries handles the DescribeDeliveries operation
func (r *Router) handleDescribeDeliveries(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeDeliveriesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeDeliveries(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeDeliveryDestinations handles the DescribeDeliveryDestinations operation
func (r *Router) handleDescribeDeliveryDestinations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeDeliveryDestinationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeDeliveryDestinations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeDeliverySources handles the DescribeDeliverySources operation
func (r *Router) handleDescribeDeliverySources(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeDeliverySourcesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeDeliverySources(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeDestinations handles the DescribeDestinations operation
func (r *Router) handleDescribeDestinations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeDestinationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeDestinations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeExportTasks handles the DescribeExportTasks operation
func (r *Router) handleDescribeExportTasks(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeExportTasksRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeExportTasks(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeFieldIndexes handles the DescribeFieldIndexes operation
func (r *Router) handleDescribeFieldIndexes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeFieldIndexesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeFieldIndexes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeIndexPolicies handles the DescribeIndexPolicies operation
func (r *Router) handleDescribeIndexPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeIndexPoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeIndexPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeLogGroups handles the DescribeLogGroups operation
func (r *Router) handleDescribeLogGroups(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeLogGroupsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeLogGroups(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeLogStreams handles the DescribeLogStreams operation
func (r *Router) handleDescribeLogStreams(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeLogStreamsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeLogStreams(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMetricFilters handles the DescribeMetricFilters operation
func (r *Router) handleDescribeMetricFilters(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMetricFiltersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMetricFilters(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeQueries handles the DescribeQueries operation
func (r *Router) handleDescribeQueries(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeQueriesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeQueries(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeQueryDefinitions handles the DescribeQueryDefinitions operation
func (r *Router) handleDescribeQueryDefinitions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeQueryDefinitionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeQueryDefinitions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeResourcePolicies handles the DescribeResourcePolicies operation
func (r *Router) handleDescribeResourcePolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeResourcePoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeResourcePolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeSubscriptionFilters handles the DescribeSubscriptionFilters operation
func (r *Router) handleDescribeSubscriptionFilters(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeSubscriptionFiltersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeSubscriptionFilters(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDisassociateKmsKey handles the DisassociateKmsKey operation
func (r *Router) handleDisassociateKmsKey(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DisassociateKmsKeyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DisassociateKmsKey(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleFilterLogEvents handles the FilterLogEvents operation
func (r *Router) handleFilterLogEvents(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input FilterLogEventsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.FilterLogEvents(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDataProtectionPolicy handles the GetDataProtectionPolicy operation
func (r *Router) handleGetDataProtectionPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDataProtectionPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDataProtectionPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDelivery handles the GetDelivery operation
func (r *Router) handleGetDelivery(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDeliveryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDelivery(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDeliveryDestination handles the GetDeliveryDestination operation
func (r *Router) handleGetDeliveryDestination(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDeliveryDestinationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDeliveryDestination(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDeliveryDestinationPolicy handles the GetDeliveryDestinationPolicy operation
func (r *Router) handleGetDeliveryDestinationPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDeliveryDestinationPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDeliveryDestinationPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDeliverySource handles the GetDeliverySource operation
func (r *Router) handleGetDeliverySource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDeliverySourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDeliverySource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetIntegration handles the GetIntegration operation
func (r *Router) handleGetIntegration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetIntegrationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetIntegration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetLogAnomalyDetector handles the GetLogAnomalyDetector operation
func (r *Router) handleGetLogAnomalyDetector(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetLogAnomalyDetectorRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetLogAnomalyDetector(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetLogEvents handles the GetLogEvents operation
func (r *Router) handleGetLogEvents(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetLogEventsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetLogEvents(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetLogGroupFields handles the GetLogGroupFields operation
func (r *Router) handleGetLogGroupFields(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetLogGroupFieldsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetLogGroupFields(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetLogRecord handles the GetLogRecord operation
func (r *Router) handleGetLogRecord(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetLogRecordRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetLogRecord(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetQueryResults handles the GetQueryResults operation
func (r *Router) handleGetQueryResults(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetQueryResultsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetQueryResults(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetTransformer handles the GetTransformer operation
func (r *Router) handleGetTransformer(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetTransformerRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetTransformer(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAnomalies handles the ListAnomalies operation
func (r *Router) handleListAnomalies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAnomaliesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAnomalies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListIntegrations handles the ListIntegrations operation
func (r *Router) handleListIntegrations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListIntegrationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListIntegrations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListLogAnomalyDetectors handles the ListLogAnomalyDetectors operation
func (r *Router) handleListLogAnomalyDetectors(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListLogAnomalyDetectorsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListLogAnomalyDetectors(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListLogGroups handles the ListLogGroups operation
func (r *Router) handleListLogGroups(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListLogGroupsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListLogGroups(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListLogGroupsForQuery handles the ListLogGroupsForQuery operation
func (r *Router) handleListLogGroupsForQuery(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListLogGroupsForQueryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListLogGroupsForQuery(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTagsForResource handles the ListTagsForResource operation
func (r *Router) handleListTagsForResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTagsForResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTagsForResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTagsLogGroup handles the ListTagsLogGroup operation
func (r *Router) handleListTagsLogGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTagsLogGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTagsLogGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutAccountPolicy handles the PutAccountPolicy operation
func (r *Router) handlePutAccountPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutAccountPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutAccountPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutDataProtectionPolicy handles the PutDataProtectionPolicy operation
func (r *Router) handlePutDataProtectionPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutDataProtectionPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutDataProtectionPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutDeliveryDestination handles the PutDeliveryDestination operation
func (r *Router) handlePutDeliveryDestination(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutDeliveryDestinationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutDeliveryDestination(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutDeliveryDestinationPolicy handles the PutDeliveryDestinationPolicy operation
func (r *Router) handlePutDeliveryDestinationPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutDeliveryDestinationPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutDeliveryDestinationPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutDeliverySource handles the PutDeliverySource operation
func (r *Router) handlePutDeliverySource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutDeliverySourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutDeliverySource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutDestination handles the PutDestination operation
func (r *Router) handlePutDestination(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutDestinationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutDestination(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutDestinationPolicy handles the PutDestinationPolicy operation
func (r *Router) handlePutDestinationPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutDestinationPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutDestinationPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutIndexPolicy handles the PutIndexPolicy operation
func (r *Router) handlePutIndexPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutIndexPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutIndexPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutIntegration handles the PutIntegration operation
func (r *Router) handlePutIntegration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutIntegrationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutIntegration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutLogEvents handles the PutLogEvents operation
func (r *Router) handlePutLogEvents(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutLogEventsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutLogEvents(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutMetricFilter handles the PutMetricFilter operation
func (r *Router) handlePutMetricFilter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutMetricFilterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutMetricFilter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutQueryDefinition handles the PutQueryDefinition operation
func (r *Router) handlePutQueryDefinition(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutQueryDefinitionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutQueryDefinition(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutResourcePolicy handles the PutResourcePolicy operation
func (r *Router) handlePutResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutRetentionPolicy handles the PutRetentionPolicy operation
func (r *Router) handlePutRetentionPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutRetentionPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutRetentionPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutSubscriptionFilter handles the PutSubscriptionFilter operation
func (r *Router) handlePutSubscriptionFilter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutSubscriptionFilterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutSubscriptionFilter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutTransformer handles the PutTransformer operation
func (r *Router) handlePutTransformer(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutTransformerRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutTransformer(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartLiveTail handles the StartLiveTail operation
func (r *Router) handleStartLiveTail(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartLiveTailRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartLiveTail(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartQuery handles the StartQuery operation
func (r *Router) handleStartQuery(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartQueryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartQuery(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStopQuery handles the StopQuery operation
func (r *Router) handleStopQuery(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StopQueryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StopQuery(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagLogGroup handles the TagLogGroup operation
func (r *Router) handleTagLogGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagLogGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagLogGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagResource handles the TagResource operation
func (r *Router) handleTagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTestMetricFilter handles the TestMetricFilter operation
func (r *Router) handleTestMetricFilter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TestMetricFilterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TestMetricFilter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTestTransformer handles the TestTransformer operation
func (r *Router) handleTestTransformer(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TestTransformerRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TestTransformer(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagLogGroup handles the UntagLogGroup operation
func (r *Router) handleUntagLogGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagLogGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagLogGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagResource handles the UntagResource operation
func (r *Router) handleUntagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateAnomaly handles the UpdateAnomaly operation
func (r *Router) handleUpdateAnomaly(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateAnomalyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateAnomaly(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateDeliveryConfiguration handles the UpdateDeliveryConfiguration operation
func (r *Router) handleUpdateDeliveryConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateDeliveryConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateDeliveryConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateLogAnomalyDetector handles the UpdateLogAnomalyDetector operation
func (r *Router) handleUpdateLogAnomalyDetector(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateLogAnomalyDetectorRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateLogAnomalyDetector(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
