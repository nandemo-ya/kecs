// Code generated by cmd/codegen. DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for elbv2 API
type Router struct {
	api ElasticLoadBalancing_v10API
}

// NewRouter creates a new router for elbv2 API
func NewRouter(api ElasticLoadBalancing_v10API) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "AddListenerCertificates":
		r.handleAddListenerCertificates(w, req)

	case "AddTags":
		r.handleAddTags(w, req)

	case "AddTrustStoreRevocations":
		r.handleAddTrustStoreRevocations(w, req)

	case "CreateListener":
		r.handleCreateListener(w, req)

	case "CreateLoadBalancer":
		r.handleCreateLoadBalancer(w, req)

	case "CreateRule":
		r.handleCreateRule(w, req)

	case "CreateTargetGroup":
		r.handleCreateTargetGroup(w, req)

	case "CreateTrustStore":
		r.handleCreateTrustStore(w, req)

	case "DeleteListener":
		r.handleDeleteListener(w, req)

	case "DeleteLoadBalancer":
		r.handleDeleteLoadBalancer(w, req)

	case "DeleteRule":
		r.handleDeleteRule(w, req)

	case "DeleteSharedTrustStoreAssociation":
		r.handleDeleteSharedTrustStoreAssociation(w, req)

	case "DeleteTargetGroup":
		r.handleDeleteTargetGroup(w, req)

	case "DeleteTrustStore":
		r.handleDeleteTrustStore(w, req)

	case "DeregisterTargets":
		r.handleDeregisterTargets(w, req)

	case "DescribeAccountLimits":
		r.handleDescribeAccountLimits(w, req)

	case "DescribeCapacityReservation":
		r.handleDescribeCapacityReservation(w, req)

	case "DescribeListenerAttributes":
		r.handleDescribeListenerAttributes(w, req)

	case "DescribeListenerCertificates":
		r.handleDescribeListenerCertificates(w, req)

	case "DescribeListeners":
		r.handleDescribeListeners(w, req)

	case "DescribeLoadBalancerAttributes":
		r.handleDescribeLoadBalancerAttributes(w, req)

	case "DescribeLoadBalancers":
		r.handleDescribeLoadBalancers(w, req)

	case "DescribeRules":
		r.handleDescribeRules(w, req)

	case "DescribeSSLPolicies":
		r.handleDescribeSSLPolicies(w, req)

	case "DescribeTags":
		r.handleDescribeTags(w, req)

	case "DescribeTargetGroupAttributes":
		r.handleDescribeTargetGroupAttributes(w, req)

	case "DescribeTargetGroups":
		r.handleDescribeTargetGroups(w, req)

	case "DescribeTargetHealth":
		r.handleDescribeTargetHealth(w, req)

	case "DescribeTrustStoreAssociations":
		r.handleDescribeTrustStoreAssociations(w, req)

	case "DescribeTrustStoreRevocations":
		r.handleDescribeTrustStoreRevocations(w, req)

	case "DescribeTrustStores":
		r.handleDescribeTrustStores(w, req)

	case "GetResourcePolicy":
		r.handleGetResourcePolicy(w, req)

	case "GetTrustStoreCaCertificatesBundle":
		r.handleGetTrustStoreCaCertificatesBundle(w, req)

	case "GetTrustStoreRevocationContent":
		r.handleGetTrustStoreRevocationContent(w, req)

	case "ModifyCapacityReservation":
		r.handleModifyCapacityReservation(w, req)

	case "ModifyIpPools":
		r.handleModifyIpPools(w, req)

	case "ModifyListener":
		r.handleModifyListener(w, req)

	case "ModifyListenerAttributes":
		r.handleModifyListenerAttributes(w, req)

	case "ModifyLoadBalancerAttributes":
		r.handleModifyLoadBalancerAttributes(w, req)

	case "ModifyRule":
		r.handleModifyRule(w, req)

	case "ModifyTargetGroup":
		r.handleModifyTargetGroup(w, req)

	case "ModifyTargetGroupAttributes":
		r.handleModifyTargetGroupAttributes(w, req)

	case "ModifyTrustStore":
		r.handleModifyTrustStore(w, req)

	case "RegisterTargets":
		r.handleRegisterTargets(w, req)

	case "RemoveListenerCertificates":
		r.handleRemoveListenerCertificates(w, req)

	case "RemoveTags":
		r.handleRemoveTags(w, req)

	case "RemoveTrustStoreRevocations":
		r.handleRemoveTrustStoreRevocations(w, req)

	case "SetIpAddressType":
		r.handleSetIpAddressType(w, req)

	case "SetRulePriorities":
		r.handleSetRulePriorities(w, req)

	case "SetSecurityGroups":
		r.handleSetSecurityGroups(w, req)

	case "SetSubnets":
		r.handleSetSubnets(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleAddListenerCertificates handles the AddListenerCertificates operation
func (r *Router) handleAddListenerCertificates(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AddListenerCertificatesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AddListenerCertificates(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAddTags handles the AddTags operation
func (r *Router) handleAddTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AddTagsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AddTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAddTrustStoreRevocations handles the AddTrustStoreRevocations operation
func (r *Router) handleAddTrustStoreRevocations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AddTrustStoreRevocationsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AddTrustStoreRevocations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateListener handles the CreateListener operation
func (r *Router) handleCreateListener(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateListenerInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateListener(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateLoadBalancer handles the CreateLoadBalancer operation
func (r *Router) handleCreateLoadBalancer(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateLoadBalancerInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateLoadBalancer(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateRule handles the CreateRule operation
func (r *Router) handleCreateRule(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateRuleInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateRule(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateTargetGroup handles the CreateTargetGroup operation
func (r *Router) handleCreateTargetGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateTargetGroupInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateTargetGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateTrustStore handles the CreateTrustStore operation
func (r *Router) handleCreateTrustStore(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateTrustStoreInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateTrustStore(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteListener handles the DeleteListener operation
func (r *Router) handleDeleteListener(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteListenerInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteListener(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteLoadBalancer handles the DeleteLoadBalancer operation
func (r *Router) handleDeleteLoadBalancer(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteLoadBalancerInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteLoadBalancer(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteRule handles the DeleteRule operation
func (r *Router) handleDeleteRule(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteRuleInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteRule(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteSharedTrustStoreAssociation handles the DeleteSharedTrustStoreAssociation operation
func (r *Router) handleDeleteSharedTrustStoreAssociation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteSharedTrustStoreAssociationInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteSharedTrustStoreAssociation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteTargetGroup handles the DeleteTargetGroup operation
func (r *Router) handleDeleteTargetGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteTargetGroupInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteTargetGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteTrustStore handles the DeleteTrustStore operation
func (r *Router) handleDeleteTrustStore(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteTrustStoreInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteTrustStore(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterTargets handles the DeregisterTargets operation
func (r *Router) handleDeregisterTargets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterTargetsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterTargets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAccountLimits handles the DescribeAccountLimits operation
func (r *Router) handleDescribeAccountLimits(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAccountLimitsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAccountLimits(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeCapacityReservation handles the DescribeCapacityReservation operation
func (r *Router) handleDescribeCapacityReservation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeCapacityReservationInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeCapacityReservation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeListenerAttributes handles the DescribeListenerAttributes operation
func (r *Router) handleDescribeListenerAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeListenerAttributesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeListenerAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeListenerCertificates handles the DescribeListenerCertificates operation
func (r *Router) handleDescribeListenerCertificates(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeListenerCertificatesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeListenerCertificates(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeListeners handles the DescribeListeners operation
func (r *Router) handleDescribeListeners(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeListenersInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeListeners(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeLoadBalancerAttributes handles the DescribeLoadBalancerAttributes operation
func (r *Router) handleDescribeLoadBalancerAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeLoadBalancerAttributesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeLoadBalancerAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeLoadBalancers handles the DescribeLoadBalancers operation
func (r *Router) handleDescribeLoadBalancers(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeLoadBalancersInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeLoadBalancers(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeRules handles the DescribeRules operation
func (r *Router) handleDescribeRules(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeRulesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeRules(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeSSLPolicies handles the DescribeSSLPolicies operation
func (r *Router) handleDescribeSSLPolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeSSLPoliciesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeSSLPolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTags handles the DescribeTags operation
func (r *Router) handleDescribeTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTagsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTargetGroupAttributes handles the DescribeTargetGroupAttributes operation
func (r *Router) handleDescribeTargetGroupAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTargetGroupAttributesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTargetGroupAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTargetGroups handles the DescribeTargetGroups operation
func (r *Router) handleDescribeTargetGroups(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTargetGroupsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTargetGroups(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTargetHealth handles the DescribeTargetHealth operation
func (r *Router) handleDescribeTargetHealth(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTargetHealthInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTargetHealth(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTrustStoreAssociations handles the DescribeTrustStoreAssociations operation
func (r *Router) handleDescribeTrustStoreAssociations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTrustStoreAssociationsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTrustStoreAssociations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTrustStoreRevocations handles the DescribeTrustStoreRevocations operation
func (r *Router) handleDescribeTrustStoreRevocations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTrustStoreRevocationsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTrustStoreRevocations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeTrustStores handles the DescribeTrustStores operation
func (r *Router) handleDescribeTrustStores(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeTrustStoresInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeTrustStores(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetResourcePolicy handles the GetResourcePolicy operation
func (r *Router) handleGetResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetResourcePolicyInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetTrustStoreCaCertificatesBundle handles the GetTrustStoreCaCertificatesBundle operation
func (r *Router) handleGetTrustStoreCaCertificatesBundle(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetTrustStoreCaCertificatesBundleInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetTrustStoreCaCertificatesBundle(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetTrustStoreRevocationContent handles the GetTrustStoreRevocationContent operation
func (r *Router) handleGetTrustStoreRevocationContent(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetTrustStoreRevocationContentInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetTrustStoreRevocationContent(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyCapacityReservation handles the ModifyCapacityReservation operation
func (r *Router) handleModifyCapacityReservation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyCapacityReservationInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyCapacityReservation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyIpPools handles the ModifyIpPools operation
func (r *Router) handleModifyIpPools(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyIpPoolsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyIpPools(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyListener handles the ModifyListener operation
func (r *Router) handleModifyListener(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyListenerInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyListener(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyListenerAttributes handles the ModifyListenerAttributes operation
func (r *Router) handleModifyListenerAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyListenerAttributesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyListenerAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyLoadBalancerAttributes handles the ModifyLoadBalancerAttributes operation
func (r *Router) handleModifyLoadBalancerAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyLoadBalancerAttributesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyLoadBalancerAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyRule handles the ModifyRule operation
func (r *Router) handleModifyRule(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyRuleInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyRule(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyTargetGroup handles the ModifyTargetGroup operation
func (r *Router) handleModifyTargetGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyTargetGroupInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyTargetGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyTargetGroupAttributes handles the ModifyTargetGroupAttributes operation
func (r *Router) handleModifyTargetGroupAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyTargetGroupAttributesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyTargetGroupAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyTrustStore handles the ModifyTrustStore operation
func (r *Router) handleModifyTrustStore(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyTrustStoreInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyTrustStore(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterTargets handles the RegisterTargets operation
func (r *Router) handleRegisterTargets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterTargetsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterTargets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveListenerCertificates handles the RemoveListenerCertificates operation
func (r *Router) handleRemoveListenerCertificates(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveListenerCertificatesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveListenerCertificates(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveTags handles the RemoveTags operation
func (r *Router) handleRemoveTags(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveTagsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveTags(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveTrustStoreRevocations handles the RemoveTrustStoreRevocations operation
func (r *Router) handleRemoveTrustStoreRevocations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveTrustStoreRevocationsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveTrustStoreRevocations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSetIpAddressType handles the SetIpAddressType operation
func (r *Router) handleSetIpAddressType(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SetIpAddressTypeInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SetIpAddressType(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSetRulePriorities handles the SetRulePriorities operation
func (r *Router) handleSetRulePriorities(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SetRulePrioritiesInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SetRulePriorities(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSetSecurityGroups handles the SetSecurityGroups operation
func (r *Router) handleSetSecurityGroups(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SetSecurityGroupsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SetSecurityGroups(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSetSubnets handles the SetSubnets operation
func (r *Router) handleSetSubnets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SetSubnetsInput
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SetSubnets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
