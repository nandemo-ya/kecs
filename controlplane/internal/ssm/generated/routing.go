// Code generated by cmd/codegen. DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for ssm API
type Router struct {
	api AmazonSSMAPI
}

// NewRouter creates a new router for ssm API
func NewRouter(api AmazonSSMAPI) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "AddTagsToResource":
		r.handleAddTagsToResource(w, req)

	case "AssociateOpsItemRelatedItem":
		r.handleAssociateOpsItemRelatedItem(w, req)

	case "CancelCommand":
		r.handleCancelCommand(w, req)

	case "CancelMaintenanceWindowExecution":
		r.handleCancelMaintenanceWindowExecution(w, req)

	case "CreateActivation":
		r.handleCreateActivation(w, req)

	case "CreateAssociation":
		r.handleCreateAssociation(w, req)

	case "CreateAssociationBatch":
		r.handleCreateAssociationBatch(w, req)

	case "CreateDocument":
		r.handleCreateDocument(w, req)

	case "CreateMaintenanceWindow":
		r.handleCreateMaintenanceWindow(w, req)

	case "CreateOpsItem":
		r.handleCreateOpsItem(w, req)

	case "CreateOpsMetadata":
		r.handleCreateOpsMetadata(w, req)

	case "CreatePatchBaseline":
		r.handleCreatePatchBaseline(w, req)

	case "CreateResourceDataSync":
		r.handleCreateResourceDataSync(w, req)

	case "DeleteActivation":
		r.handleDeleteActivation(w, req)

	case "DeleteAssociation":
		r.handleDeleteAssociation(w, req)

	case "DeleteDocument":
		r.handleDeleteDocument(w, req)

	case "DeleteInventory":
		r.handleDeleteInventory(w, req)

	case "DeleteMaintenanceWindow":
		r.handleDeleteMaintenanceWindow(w, req)

	case "DeleteOpsItem":
		r.handleDeleteOpsItem(w, req)

	case "DeleteOpsMetadata":
		r.handleDeleteOpsMetadata(w, req)

	case "DeleteParameter":
		r.handleDeleteParameter(w, req)

	case "DeleteParameters":
		r.handleDeleteParameters(w, req)

	case "DeletePatchBaseline":
		r.handleDeletePatchBaseline(w, req)

	case "DeleteResourceDataSync":
		r.handleDeleteResourceDataSync(w, req)

	case "DeleteResourcePolicy":
		r.handleDeleteResourcePolicy(w, req)

	case "DeregisterManagedInstance":
		r.handleDeregisterManagedInstance(w, req)

	case "DeregisterPatchBaselineForPatchGroup":
		r.handleDeregisterPatchBaselineForPatchGroup(w, req)

	case "DeregisterTargetFromMaintenanceWindow":
		r.handleDeregisterTargetFromMaintenanceWindow(w, req)

	case "DeregisterTaskFromMaintenanceWindow":
		r.handleDeregisterTaskFromMaintenanceWindow(w, req)

	case "DescribeActivations":
		r.handleDescribeActivations(w, req)

	case "DescribeAssociation":
		r.handleDescribeAssociation(w, req)

	case "DescribeAssociationExecutionTargets":
		r.handleDescribeAssociationExecutionTargets(w, req)

	case "DescribeAssociationExecutions":
		r.handleDescribeAssociationExecutions(w, req)

	case "DescribeAutomationExecutions":
		r.handleDescribeAutomationExecutions(w, req)

	case "DescribeAutomationStepExecutions":
		r.handleDescribeAutomationStepExecutions(w, req)

	case "DescribeAvailablePatches":
		r.handleDescribeAvailablePatches(w, req)

	case "DescribeDocument":
		r.handleDescribeDocument(w, req)

	case "DescribeDocumentPermission":
		r.handleDescribeDocumentPermission(w, req)

	case "DescribeEffectiveInstanceAssociations":
		r.handleDescribeEffectiveInstanceAssociations(w, req)

	case "DescribeEffectivePatchesForPatchBaseline":
		r.handleDescribeEffectivePatchesForPatchBaseline(w, req)

	case "DescribeInstanceAssociationsStatus":
		r.handleDescribeInstanceAssociationsStatus(w, req)

	case "DescribeInstanceInformation":
		r.handleDescribeInstanceInformation(w, req)

	case "DescribeInstancePatchStates":
		r.handleDescribeInstancePatchStates(w, req)

	case "DescribeInstancePatchStatesForPatchGroup":
		r.handleDescribeInstancePatchStatesForPatchGroup(w, req)

	case "DescribeInstancePatches":
		r.handleDescribeInstancePatches(w, req)

	case "DescribeInstanceProperties":
		r.handleDescribeInstanceProperties(w, req)

	case "DescribeInventoryDeletions":
		r.handleDescribeInventoryDeletions(w, req)

	case "DescribeMaintenanceWindowExecutionTaskInvocations":
		r.handleDescribeMaintenanceWindowExecutionTaskInvocations(w, req)

	case "DescribeMaintenanceWindowExecutionTasks":
		r.handleDescribeMaintenanceWindowExecutionTasks(w, req)

	case "DescribeMaintenanceWindowExecutions":
		r.handleDescribeMaintenanceWindowExecutions(w, req)

	case "DescribeMaintenanceWindowSchedule":
		r.handleDescribeMaintenanceWindowSchedule(w, req)

	case "DescribeMaintenanceWindowTargets":
		r.handleDescribeMaintenanceWindowTargets(w, req)

	case "DescribeMaintenanceWindowTasks":
		r.handleDescribeMaintenanceWindowTasks(w, req)

	case "DescribeMaintenanceWindows":
		r.handleDescribeMaintenanceWindows(w, req)

	case "DescribeMaintenanceWindowsForTarget":
		r.handleDescribeMaintenanceWindowsForTarget(w, req)

	case "DescribeOpsItems":
		r.handleDescribeOpsItems(w, req)

	case "DescribeParameters":
		r.handleDescribeParameters(w, req)

	case "DescribePatchBaselines":
		r.handleDescribePatchBaselines(w, req)

	case "DescribePatchGroupState":
		r.handleDescribePatchGroupState(w, req)

	case "DescribePatchGroups":
		r.handleDescribePatchGroups(w, req)

	case "DescribePatchProperties":
		r.handleDescribePatchProperties(w, req)

	case "DescribeSessions":
		r.handleDescribeSessions(w, req)

	case "DisassociateOpsItemRelatedItem":
		r.handleDisassociateOpsItemRelatedItem(w, req)

	case "GetAccessToken":
		r.handleGetAccessToken(w, req)

	case "GetAutomationExecution":
		r.handleGetAutomationExecution(w, req)

	case "GetCalendarState":
		r.handleGetCalendarState(w, req)

	case "GetCommandInvocation":
		r.handleGetCommandInvocation(w, req)

	case "GetConnectionStatus":
		r.handleGetConnectionStatus(w, req)

	case "GetDefaultPatchBaseline":
		r.handleGetDefaultPatchBaseline(w, req)

	case "GetDeployablePatchSnapshotForInstance":
		r.handleGetDeployablePatchSnapshotForInstance(w, req)

	case "GetDocument":
		r.handleGetDocument(w, req)

	case "GetExecutionPreview":
		r.handleGetExecutionPreview(w, req)

	case "GetInventory":
		r.handleGetInventory(w, req)

	case "GetInventorySchema":
		r.handleGetInventorySchema(w, req)

	case "GetMaintenanceWindow":
		r.handleGetMaintenanceWindow(w, req)

	case "GetMaintenanceWindowExecution":
		r.handleGetMaintenanceWindowExecution(w, req)

	case "GetMaintenanceWindowExecutionTask":
		r.handleGetMaintenanceWindowExecutionTask(w, req)

	case "GetMaintenanceWindowExecutionTaskInvocation":
		r.handleGetMaintenanceWindowExecutionTaskInvocation(w, req)

	case "GetMaintenanceWindowTask":
		r.handleGetMaintenanceWindowTask(w, req)

	case "GetOpsItem":
		r.handleGetOpsItem(w, req)

	case "GetOpsMetadata":
		r.handleGetOpsMetadata(w, req)

	case "GetOpsSummary":
		r.handleGetOpsSummary(w, req)

	case "GetParameter":
		r.handleGetParameter(w, req)

	case "GetParameterHistory":
		r.handleGetParameterHistory(w, req)

	case "GetParameters":
		r.handleGetParameters(w, req)

	case "GetParametersByPath":
		r.handleGetParametersByPath(w, req)

	case "GetPatchBaseline":
		r.handleGetPatchBaseline(w, req)

	case "GetPatchBaselineForPatchGroup":
		r.handleGetPatchBaselineForPatchGroup(w, req)

	case "GetResourcePolicies":
		r.handleGetResourcePolicies(w, req)

	case "GetServiceSetting":
		r.handleGetServiceSetting(w, req)

	case "LabelParameterVersion":
		r.handleLabelParameterVersion(w, req)

	case "ListAssociationVersions":
		r.handleListAssociationVersions(w, req)

	case "ListAssociations":
		r.handleListAssociations(w, req)

	case "ListCommandInvocations":
		r.handleListCommandInvocations(w, req)

	case "ListCommands":
		r.handleListCommands(w, req)

	case "ListComplianceItems":
		r.handleListComplianceItems(w, req)

	case "ListComplianceSummaries":
		r.handleListComplianceSummaries(w, req)

	case "ListDocumentMetadataHistory":
		r.handleListDocumentMetadataHistory(w, req)

	case "ListDocumentVersions":
		r.handleListDocumentVersions(w, req)

	case "ListDocuments":
		r.handleListDocuments(w, req)

	case "ListInventoryEntries":
		r.handleListInventoryEntries(w, req)

	case "ListNodes":
		r.handleListNodes(w, req)

	case "ListNodesSummary":
		r.handleListNodesSummary(w, req)

	case "ListOpsItemEvents":
		r.handleListOpsItemEvents(w, req)

	case "ListOpsItemRelatedItems":
		r.handleListOpsItemRelatedItems(w, req)

	case "ListOpsMetadata":
		r.handleListOpsMetadata(w, req)

	case "ListResourceComplianceSummaries":
		r.handleListResourceComplianceSummaries(w, req)

	case "ListResourceDataSync":
		r.handleListResourceDataSync(w, req)

	case "ListTagsForResource":
		r.handleListTagsForResource(w, req)

	case "ModifyDocumentPermission":
		r.handleModifyDocumentPermission(w, req)

	case "PutComplianceItems":
		r.handlePutComplianceItems(w, req)

	case "PutInventory":
		r.handlePutInventory(w, req)

	case "PutParameter":
		r.handlePutParameter(w, req)

	case "PutResourcePolicy":
		r.handlePutResourcePolicy(w, req)

	case "RegisterDefaultPatchBaseline":
		r.handleRegisterDefaultPatchBaseline(w, req)

	case "RegisterPatchBaselineForPatchGroup":
		r.handleRegisterPatchBaselineForPatchGroup(w, req)

	case "RegisterTargetWithMaintenanceWindow":
		r.handleRegisterTargetWithMaintenanceWindow(w, req)

	case "RegisterTaskWithMaintenanceWindow":
		r.handleRegisterTaskWithMaintenanceWindow(w, req)

	case "RemoveTagsFromResource":
		r.handleRemoveTagsFromResource(w, req)

	case "ResetServiceSetting":
		r.handleResetServiceSetting(w, req)

	case "ResumeSession":
		r.handleResumeSession(w, req)

	case "SendAutomationSignal":
		r.handleSendAutomationSignal(w, req)

	case "SendCommand":
		r.handleSendCommand(w, req)

	case "StartAccessRequest":
		r.handleStartAccessRequest(w, req)

	case "StartAssociationsOnce":
		r.handleStartAssociationsOnce(w, req)

	case "StartAutomationExecution":
		r.handleStartAutomationExecution(w, req)

	case "StartChangeRequestExecution":
		r.handleStartChangeRequestExecution(w, req)

	case "StartExecutionPreview":
		r.handleStartExecutionPreview(w, req)

	case "StartSession":
		r.handleStartSession(w, req)

	case "StopAutomationExecution":
		r.handleStopAutomationExecution(w, req)

	case "TerminateSession":
		r.handleTerminateSession(w, req)

	case "UnlabelParameterVersion":
		r.handleUnlabelParameterVersion(w, req)

	case "UpdateAssociation":
		r.handleUpdateAssociation(w, req)

	case "UpdateAssociationStatus":
		r.handleUpdateAssociationStatus(w, req)

	case "UpdateDocument":
		r.handleUpdateDocument(w, req)

	case "UpdateDocumentDefaultVersion":
		r.handleUpdateDocumentDefaultVersion(w, req)

	case "UpdateDocumentMetadata":
		r.handleUpdateDocumentMetadata(w, req)

	case "UpdateMaintenanceWindow":
		r.handleUpdateMaintenanceWindow(w, req)

	case "UpdateMaintenanceWindowTarget":
		r.handleUpdateMaintenanceWindowTarget(w, req)

	case "UpdateMaintenanceWindowTask":
		r.handleUpdateMaintenanceWindowTask(w, req)

	case "UpdateManagedInstanceRole":
		r.handleUpdateManagedInstanceRole(w, req)

	case "UpdateOpsItem":
		r.handleUpdateOpsItem(w, req)

	case "UpdateOpsMetadata":
		r.handleUpdateOpsMetadata(w, req)

	case "UpdatePatchBaseline":
		r.handleUpdatePatchBaseline(w, req)

	case "UpdateResourceDataSync":
		r.handleUpdateResourceDataSync(w, req)

	case "UpdateServiceSetting":
		r.handleUpdateServiceSetting(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleAddTagsToResource handles the AddTagsToResource operation
func (r *Router) handleAddTagsToResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AddTagsToResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AddTagsToResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAssociateOpsItemRelatedItem handles the AssociateOpsItemRelatedItem operation
func (r *Router) handleAssociateOpsItemRelatedItem(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AssociateOpsItemRelatedItemRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AssociateOpsItemRelatedItem(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCancelCommand handles the CancelCommand operation
func (r *Router) handleCancelCommand(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CancelCommandRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CancelCommand(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCancelMaintenanceWindowExecution handles the CancelMaintenanceWindowExecution operation
func (r *Router) handleCancelMaintenanceWindowExecution(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CancelMaintenanceWindowExecutionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CancelMaintenanceWindowExecution(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateActivation handles the CreateActivation operation
func (r *Router) handleCreateActivation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateActivationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateActivation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateAssociation handles the CreateAssociation operation
func (r *Router) handleCreateAssociation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateAssociationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateAssociation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateAssociationBatch handles the CreateAssociationBatch operation
func (r *Router) handleCreateAssociationBatch(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateAssociationBatchRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateAssociationBatch(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateDocument handles the CreateDocument operation
func (r *Router) handleCreateDocument(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateDocumentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateDocument(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateMaintenanceWindow handles the CreateMaintenanceWindow operation
func (r *Router) handleCreateMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateOpsItem handles the CreateOpsItem operation
func (r *Router) handleCreateOpsItem(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateOpsItemRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateOpsItem(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateOpsMetadata handles the CreateOpsMetadata operation
func (r *Router) handleCreateOpsMetadata(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateOpsMetadataRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateOpsMetadata(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreatePatchBaseline handles the CreatePatchBaseline operation
func (r *Router) handleCreatePatchBaseline(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreatePatchBaselineRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreatePatchBaseline(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateResourceDataSync handles the CreateResourceDataSync operation
func (r *Router) handleCreateResourceDataSync(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateResourceDataSyncRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateResourceDataSync(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteActivation handles the DeleteActivation operation
func (r *Router) handleDeleteActivation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteActivationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteActivation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteAssociation handles the DeleteAssociation operation
func (r *Router) handleDeleteAssociation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteAssociationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteAssociation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteDocument handles the DeleteDocument operation
func (r *Router) handleDeleteDocument(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteDocumentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteDocument(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteInventory handles the DeleteInventory operation
func (r *Router) handleDeleteInventory(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteInventoryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteInventory(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteMaintenanceWindow handles the DeleteMaintenanceWindow operation
func (r *Router) handleDeleteMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteOpsItem handles the DeleteOpsItem operation
func (r *Router) handleDeleteOpsItem(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteOpsItemRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteOpsItem(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteOpsMetadata handles the DeleteOpsMetadata operation
func (r *Router) handleDeleteOpsMetadata(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteOpsMetadataRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteOpsMetadata(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteParameter handles the DeleteParameter operation
func (r *Router) handleDeleteParameter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteParameterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteParameter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteParameters handles the DeleteParameters operation
func (r *Router) handleDeleteParameters(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteParametersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteParameters(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeletePatchBaseline handles the DeletePatchBaseline operation
func (r *Router) handleDeletePatchBaseline(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeletePatchBaselineRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeletePatchBaseline(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteResourceDataSync handles the DeleteResourceDataSync operation
func (r *Router) handleDeleteResourceDataSync(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteResourceDataSyncRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteResourceDataSync(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteResourcePolicy handles the DeleteResourcePolicy operation
func (r *Router) handleDeleteResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterManagedInstance handles the DeregisterManagedInstance operation
func (r *Router) handleDeregisterManagedInstance(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterManagedInstanceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterManagedInstance(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterPatchBaselineForPatchGroup handles the DeregisterPatchBaselineForPatchGroup operation
func (r *Router) handleDeregisterPatchBaselineForPatchGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterPatchBaselineForPatchGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterPatchBaselineForPatchGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterTargetFromMaintenanceWindow handles the DeregisterTargetFromMaintenanceWindow operation
func (r *Router) handleDeregisterTargetFromMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterTargetFromMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterTargetFromMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterTaskFromMaintenanceWindow handles the DeregisterTaskFromMaintenanceWindow operation
func (r *Router) handleDeregisterTaskFromMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterTaskFromMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterTaskFromMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeActivations handles the DescribeActivations operation
func (r *Router) handleDescribeActivations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeActivationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeActivations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAssociation handles the DescribeAssociation operation
func (r *Router) handleDescribeAssociation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAssociationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAssociation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAssociationExecutionTargets handles the DescribeAssociationExecutionTargets operation
func (r *Router) handleDescribeAssociationExecutionTargets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAssociationExecutionTargetsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAssociationExecutionTargets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAssociationExecutions handles the DescribeAssociationExecutions operation
func (r *Router) handleDescribeAssociationExecutions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAssociationExecutionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAssociationExecutions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAutomationExecutions handles the DescribeAutomationExecutions operation
func (r *Router) handleDescribeAutomationExecutions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAutomationExecutionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAutomationExecutions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAutomationStepExecutions handles the DescribeAutomationStepExecutions operation
func (r *Router) handleDescribeAutomationStepExecutions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAutomationStepExecutionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAutomationStepExecutions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeAvailablePatches handles the DescribeAvailablePatches operation
func (r *Router) handleDescribeAvailablePatches(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeAvailablePatchesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeAvailablePatches(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeDocument handles the DescribeDocument operation
func (r *Router) handleDescribeDocument(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeDocumentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeDocument(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeDocumentPermission handles the DescribeDocumentPermission operation
func (r *Router) handleDescribeDocumentPermission(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeDocumentPermissionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeDocumentPermission(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeEffectiveInstanceAssociations handles the DescribeEffectiveInstanceAssociations operation
func (r *Router) handleDescribeEffectiveInstanceAssociations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeEffectiveInstanceAssociationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeEffectiveInstanceAssociations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeEffectivePatchesForPatchBaseline handles the DescribeEffectivePatchesForPatchBaseline operation
func (r *Router) handleDescribeEffectivePatchesForPatchBaseline(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeEffectivePatchesForPatchBaselineRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeEffectivePatchesForPatchBaseline(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeInstanceAssociationsStatus handles the DescribeInstanceAssociationsStatus operation
func (r *Router) handleDescribeInstanceAssociationsStatus(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeInstanceAssociationsStatusRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeInstanceAssociationsStatus(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeInstanceInformation handles the DescribeInstanceInformation operation
func (r *Router) handleDescribeInstanceInformation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeInstanceInformationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeInstanceInformation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeInstancePatchStates handles the DescribeInstancePatchStates operation
func (r *Router) handleDescribeInstancePatchStates(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeInstancePatchStatesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeInstancePatchStates(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeInstancePatchStatesForPatchGroup handles the DescribeInstancePatchStatesForPatchGroup operation
func (r *Router) handleDescribeInstancePatchStatesForPatchGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeInstancePatchStatesForPatchGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeInstancePatchStatesForPatchGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeInstancePatches handles the DescribeInstancePatches operation
func (r *Router) handleDescribeInstancePatches(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeInstancePatchesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeInstancePatches(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeInstanceProperties handles the DescribeInstanceProperties operation
func (r *Router) handleDescribeInstanceProperties(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeInstancePropertiesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeInstanceProperties(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeInventoryDeletions handles the DescribeInventoryDeletions operation
func (r *Router) handleDescribeInventoryDeletions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeInventoryDeletionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeInventoryDeletions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindowExecutionTaskInvocations handles the DescribeMaintenanceWindowExecutionTaskInvocations operation
func (r *Router) handleDescribeMaintenanceWindowExecutionTaskInvocations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowExecutionTaskInvocationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindowExecutionTaskInvocations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindowExecutionTasks handles the DescribeMaintenanceWindowExecutionTasks operation
func (r *Router) handleDescribeMaintenanceWindowExecutionTasks(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowExecutionTasksRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindowExecutionTasks(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindowExecutions handles the DescribeMaintenanceWindowExecutions operation
func (r *Router) handleDescribeMaintenanceWindowExecutions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowExecutionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindowExecutions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindowSchedule handles the DescribeMaintenanceWindowSchedule operation
func (r *Router) handleDescribeMaintenanceWindowSchedule(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowScheduleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindowSchedule(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindowTargets handles the DescribeMaintenanceWindowTargets operation
func (r *Router) handleDescribeMaintenanceWindowTargets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowTargetsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindowTargets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindowTasks handles the DescribeMaintenanceWindowTasks operation
func (r *Router) handleDescribeMaintenanceWindowTasks(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowTasksRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindowTasks(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindows handles the DescribeMaintenanceWindows operation
func (r *Router) handleDescribeMaintenanceWindows(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindows(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeMaintenanceWindowsForTarget handles the DescribeMaintenanceWindowsForTarget operation
func (r *Router) handleDescribeMaintenanceWindowsForTarget(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeMaintenanceWindowsForTargetRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeMaintenanceWindowsForTarget(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeOpsItems handles the DescribeOpsItems operation
func (r *Router) handleDescribeOpsItems(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeOpsItemsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeOpsItems(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeParameters handles the DescribeParameters operation
func (r *Router) handleDescribeParameters(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeParametersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeParameters(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribePatchBaselines handles the DescribePatchBaselines operation
func (r *Router) handleDescribePatchBaselines(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribePatchBaselinesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribePatchBaselines(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribePatchGroupState handles the DescribePatchGroupState operation
func (r *Router) handleDescribePatchGroupState(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribePatchGroupStateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribePatchGroupState(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribePatchGroups handles the DescribePatchGroups operation
func (r *Router) handleDescribePatchGroups(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribePatchGroupsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribePatchGroups(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribePatchProperties handles the DescribePatchProperties operation
func (r *Router) handleDescribePatchProperties(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribePatchPropertiesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribePatchProperties(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDescribeSessions handles the DescribeSessions operation
func (r *Router) handleDescribeSessions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DescribeSessionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DescribeSessions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDisassociateOpsItemRelatedItem handles the DisassociateOpsItemRelatedItem operation
func (r *Router) handleDisassociateOpsItemRelatedItem(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DisassociateOpsItemRelatedItemRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DisassociateOpsItemRelatedItem(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetAccessToken handles the GetAccessToken operation
func (r *Router) handleGetAccessToken(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetAccessTokenRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetAccessToken(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetAutomationExecution handles the GetAutomationExecution operation
func (r *Router) handleGetAutomationExecution(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetAutomationExecutionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetAutomationExecution(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetCalendarState handles the GetCalendarState operation
func (r *Router) handleGetCalendarState(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetCalendarStateRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetCalendarState(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetCommandInvocation handles the GetCommandInvocation operation
func (r *Router) handleGetCommandInvocation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetCommandInvocationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetCommandInvocation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetConnectionStatus handles the GetConnectionStatus operation
func (r *Router) handleGetConnectionStatus(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetConnectionStatusRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetConnectionStatus(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDefaultPatchBaseline handles the GetDefaultPatchBaseline operation
func (r *Router) handleGetDefaultPatchBaseline(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDefaultPatchBaselineRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDefaultPatchBaseline(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDeployablePatchSnapshotForInstance handles the GetDeployablePatchSnapshotForInstance operation
func (r *Router) handleGetDeployablePatchSnapshotForInstance(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDeployablePatchSnapshotForInstanceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDeployablePatchSnapshotForInstance(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetDocument handles the GetDocument operation
func (r *Router) handleGetDocument(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetDocumentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetDocument(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetExecutionPreview handles the GetExecutionPreview operation
func (r *Router) handleGetExecutionPreview(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetExecutionPreviewRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetExecutionPreview(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetInventory handles the GetInventory operation
func (r *Router) handleGetInventory(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetInventoryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetInventory(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetInventorySchema handles the GetInventorySchema operation
func (r *Router) handleGetInventorySchema(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetInventorySchemaRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetInventorySchema(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetMaintenanceWindow handles the GetMaintenanceWindow operation
func (r *Router) handleGetMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetMaintenanceWindowExecution handles the GetMaintenanceWindowExecution operation
func (r *Router) handleGetMaintenanceWindowExecution(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetMaintenanceWindowExecutionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetMaintenanceWindowExecution(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetMaintenanceWindowExecutionTask handles the GetMaintenanceWindowExecutionTask operation
func (r *Router) handleGetMaintenanceWindowExecutionTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetMaintenanceWindowExecutionTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetMaintenanceWindowExecutionTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetMaintenanceWindowExecutionTaskInvocation handles the GetMaintenanceWindowExecutionTaskInvocation operation
func (r *Router) handleGetMaintenanceWindowExecutionTaskInvocation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetMaintenanceWindowExecutionTaskInvocationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetMaintenanceWindowExecutionTaskInvocation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetMaintenanceWindowTask handles the GetMaintenanceWindowTask operation
func (r *Router) handleGetMaintenanceWindowTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetMaintenanceWindowTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetMaintenanceWindowTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetOpsItem handles the GetOpsItem operation
func (r *Router) handleGetOpsItem(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetOpsItemRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetOpsItem(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetOpsMetadata handles the GetOpsMetadata operation
func (r *Router) handleGetOpsMetadata(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetOpsMetadataRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetOpsMetadata(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetOpsSummary handles the GetOpsSummary operation
func (r *Router) handleGetOpsSummary(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetOpsSummaryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetOpsSummary(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetParameter handles the GetParameter operation
func (r *Router) handleGetParameter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetParameterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetParameter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetParameterHistory handles the GetParameterHistory operation
func (r *Router) handleGetParameterHistory(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetParameterHistoryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetParameterHistory(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetParameters handles the GetParameters operation
func (r *Router) handleGetParameters(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetParametersRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetParameters(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetParametersByPath handles the GetParametersByPath operation
func (r *Router) handleGetParametersByPath(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetParametersByPathRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetParametersByPath(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetPatchBaseline handles the GetPatchBaseline operation
func (r *Router) handleGetPatchBaseline(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetPatchBaselineRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetPatchBaseline(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetPatchBaselineForPatchGroup handles the GetPatchBaselineForPatchGroup operation
func (r *Router) handleGetPatchBaselineForPatchGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetPatchBaselineForPatchGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetPatchBaselineForPatchGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetResourcePolicies handles the GetResourcePolicies operation
func (r *Router) handleGetResourcePolicies(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetResourcePoliciesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetResourcePolicies(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetServiceSetting handles the GetServiceSetting operation
func (r *Router) handleGetServiceSetting(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetServiceSettingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetServiceSetting(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleLabelParameterVersion handles the LabelParameterVersion operation
func (r *Router) handleLabelParameterVersion(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input LabelParameterVersionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.LabelParameterVersion(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAssociationVersions handles the ListAssociationVersions operation
func (r *Router) handleListAssociationVersions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAssociationVersionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAssociationVersions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListAssociations handles the ListAssociations operation
func (r *Router) handleListAssociations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListAssociationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListAssociations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListCommandInvocations handles the ListCommandInvocations operation
func (r *Router) handleListCommandInvocations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListCommandInvocationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListCommandInvocations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListCommands handles the ListCommands operation
func (r *Router) handleListCommands(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListCommandsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListCommands(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListComplianceItems handles the ListComplianceItems operation
func (r *Router) handleListComplianceItems(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListComplianceItemsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListComplianceItems(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListComplianceSummaries handles the ListComplianceSummaries operation
func (r *Router) handleListComplianceSummaries(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListComplianceSummariesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListComplianceSummaries(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListDocumentMetadataHistory handles the ListDocumentMetadataHistory operation
func (r *Router) handleListDocumentMetadataHistory(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListDocumentMetadataHistoryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListDocumentMetadataHistory(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListDocumentVersions handles the ListDocumentVersions operation
func (r *Router) handleListDocumentVersions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListDocumentVersionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListDocumentVersions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListDocuments handles the ListDocuments operation
func (r *Router) handleListDocuments(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListDocumentsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListDocuments(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListInventoryEntries handles the ListInventoryEntries operation
func (r *Router) handleListInventoryEntries(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListInventoryEntriesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListInventoryEntries(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListNodes handles the ListNodes operation
func (r *Router) handleListNodes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListNodesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListNodes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListNodesSummary handles the ListNodesSummary operation
func (r *Router) handleListNodesSummary(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListNodesSummaryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListNodesSummary(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListOpsItemEvents handles the ListOpsItemEvents operation
func (r *Router) handleListOpsItemEvents(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListOpsItemEventsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListOpsItemEvents(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListOpsItemRelatedItems handles the ListOpsItemRelatedItems operation
func (r *Router) handleListOpsItemRelatedItems(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListOpsItemRelatedItemsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListOpsItemRelatedItems(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListOpsMetadata handles the ListOpsMetadata operation
func (r *Router) handleListOpsMetadata(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListOpsMetadataRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListOpsMetadata(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListResourceComplianceSummaries handles the ListResourceComplianceSummaries operation
func (r *Router) handleListResourceComplianceSummaries(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListResourceComplianceSummariesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListResourceComplianceSummaries(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListResourceDataSync handles the ListResourceDataSync operation
func (r *Router) handleListResourceDataSync(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListResourceDataSyncRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListResourceDataSync(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTagsForResource handles the ListTagsForResource operation
func (r *Router) handleListTagsForResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTagsForResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTagsForResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleModifyDocumentPermission handles the ModifyDocumentPermission operation
func (r *Router) handleModifyDocumentPermission(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ModifyDocumentPermissionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ModifyDocumentPermission(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutComplianceItems handles the PutComplianceItems operation
func (r *Router) handlePutComplianceItems(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutComplianceItemsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutComplianceItems(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutInventory handles the PutInventory operation
func (r *Router) handlePutInventory(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutInventoryRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutInventory(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutParameter handles the PutParameter operation
func (r *Router) handlePutParameter(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutParameterRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutParameter(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutResourcePolicy handles the PutResourcePolicy operation
func (r *Router) handlePutResourcePolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutResourcePolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutResourcePolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterDefaultPatchBaseline handles the RegisterDefaultPatchBaseline operation
func (r *Router) handleRegisterDefaultPatchBaseline(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterDefaultPatchBaselineRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterDefaultPatchBaseline(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterPatchBaselineForPatchGroup handles the RegisterPatchBaselineForPatchGroup operation
func (r *Router) handleRegisterPatchBaselineForPatchGroup(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterPatchBaselineForPatchGroupRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterPatchBaselineForPatchGroup(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterTargetWithMaintenanceWindow handles the RegisterTargetWithMaintenanceWindow operation
func (r *Router) handleRegisterTargetWithMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterTargetWithMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterTargetWithMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterTaskWithMaintenanceWindow handles the RegisterTaskWithMaintenanceWindow operation
func (r *Router) handleRegisterTaskWithMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterTaskWithMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterTaskWithMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRemoveTagsFromResource handles the RemoveTagsFromResource operation
func (r *Router) handleRemoveTagsFromResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RemoveTagsFromResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RemoveTagsFromResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleResetServiceSetting handles the ResetServiceSetting operation
func (r *Router) handleResetServiceSetting(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ResetServiceSettingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ResetServiceSetting(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleResumeSession handles the ResumeSession operation
func (r *Router) handleResumeSession(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ResumeSessionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ResumeSession(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSendAutomationSignal handles the SendAutomationSignal operation
func (r *Router) handleSendAutomationSignal(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SendAutomationSignalRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SendAutomationSignal(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSendCommand handles the SendCommand operation
func (r *Router) handleSendCommand(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SendCommandRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SendCommand(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartAccessRequest handles the StartAccessRequest operation
func (r *Router) handleStartAccessRequest(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartAccessRequestRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartAccessRequest(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartAssociationsOnce handles the StartAssociationsOnce operation
func (r *Router) handleStartAssociationsOnce(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartAssociationsOnceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartAssociationsOnce(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartAutomationExecution handles the StartAutomationExecution operation
func (r *Router) handleStartAutomationExecution(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartAutomationExecutionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartAutomationExecution(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartChangeRequestExecution handles the StartChangeRequestExecution operation
func (r *Router) handleStartChangeRequestExecution(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartChangeRequestExecutionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartChangeRequestExecution(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartExecutionPreview handles the StartExecutionPreview operation
func (r *Router) handleStartExecutionPreview(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartExecutionPreviewRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartExecutionPreview(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStartSession handles the StartSession operation
func (r *Router) handleStartSession(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StartSessionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StartSession(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleStopAutomationExecution handles the StopAutomationExecution operation
func (r *Router) handleStopAutomationExecution(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input StopAutomationExecutionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.StopAutomationExecution(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTerminateSession handles the TerminateSession operation
func (r *Router) handleTerminateSession(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TerminateSessionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TerminateSession(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUnlabelParameterVersion handles the UnlabelParameterVersion operation
func (r *Router) handleUnlabelParameterVersion(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UnlabelParameterVersionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UnlabelParameterVersion(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateAssociation handles the UpdateAssociation operation
func (r *Router) handleUpdateAssociation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateAssociationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateAssociation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateAssociationStatus handles the UpdateAssociationStatus operation
func (r *Router) handleUpdateAssociationStatus(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateAssociationStatusRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateAssociationStatus(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateDocument handles the UpdateDocument operation
func (r *Router) handleUpdateDocument(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateDocumentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateDocument(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateDocumentDefaultVersion handles the UpdateDocumentDefaultVersion operation
func (r *Router) handleUpdateDocumentDefaultVersion(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateDocumentDefaultVersionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateDocumentDefaultVersion(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateDocumentMetadata handles the UpdateDocumentMetadata operation
func (r *Router) handleUpdateDocumentMetadata(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateDocumentMetadataRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateDocumentMetadata(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateMaintenanceWindow handles the UpdateMaintenanceWindow operation
func (r *Router) handleUpdateMaintenanceWindow(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateMaintenanceWindowRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateMaintenanceWindow(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateMaintenanceWindowTarget handles the UpdateMaintenanceWindowTarget operation
func (r *Router) handleUpdateMaintenanceWindowTarget(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateMaintenanceWindowTargetRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateMaintenanceWindowTarget(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateMaintenanceWindowTask handles the UpdateMaintenanceWindowTask operation
func (r *Router) handleUpdateMaintenanceWindowTask(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateMaintenanceWindowTaskRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateMaintenanceWindowTask(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateManagedInstanceRole handles the UpdateManagedInstanceRole operation
func (r *Router) handleUpdateManagedInstanceRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateManagedInstanceRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateManagedInstanceRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateOpsItem handles the UpdateOpsItem operation
func (r *Router) handleUpdateOpsItem(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateOpsItemRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateOpsItem(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateOpsMetadata handles the UpdateOpsMetadata operation
func (r *Router) handleUpdateOpsMetadata(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateOpsMetadataRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateOpsMetadata(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdatePatchBaseline handles the UpdatePatchBaseline operation
func (r *Router) handleUpdatePatchBaseline(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdatePatchBaselineRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdatePatchBaseline(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateResourceDataSync handles the UpdateResourceDataSync operation
func (r *Router) handleUpdateResourceDataSync(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateResourceDataSyncRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateResourceDataSync(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateServiceSetting handles the UpdateServiceSetting operation
func (r *Router) handleUpdateServiceSetting(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateServiceSettingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateServiceSetting(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
