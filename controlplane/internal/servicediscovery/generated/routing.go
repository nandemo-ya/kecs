// Code generated by cmd/codegen. DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for servicediscovery API
type Router struct {
	api Route53AutoNaming_v20170314API
}

// NewRouter creates a new router for servicediscovery API
func NewRouter(api Route53AutoNaming_v20170314API) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "CreateHttpNamespace":
		r.handleCreateHttpNamespace(w, req)

	case "CreatePrivateDnsNamespace":
		r.handleCreatePrivateDnsNamespace(w, req)

	case "CreatePublicDnsNamespace":
		r.handleCreatePublicDnsNamespace(w, req)

	case "CreateService":
		r.handleCreateService(w, req)

	case "DeleteNamespace":
		r.handleDeleteNamespace(w, req)

	case "DeleteService":
		r.handleDeleteService(w, req)

	case "DeleteServiceAttributes":
		r.handleDeleteServiceAttributes(w, req)

	case "DeregisterInstance":
		r.handleDeregisterInstance(w, req)

	case "DiscoverInstances":
		r.handleDiscoverInstances(w, req)

	case "DiscoverInstancesRevision":
		r.handleDiscoverInstancesRevision(w, req)

	case "GetInstance":
		r.handleGetInstance(w, req)

	case "GetInstancesHealthStatus":
		r.handleGetInstancesHealthStatus(w, req)

	case "GetNamespace":
		r.handleGetNamespace(w, req)

	case "GetOperation":
		r.handleGetOperation(w, req)

	case "GetService":
		r.handleGetService(w, req)

	case "GetServiceAttributes":
		r.handleGetServiceAttributes(w, req)

	case "ListInstances":
		r.handleListInstances(w, req)

	case "ListNamespaces":
		r.handleListNamespaces(w, req)

	case "ListOperations":
		r.handleListOperations(w, req)

	case "ListServices":
		r.handleListServices(w, req)

	case "ListTagsForResource":
		r.handleListTagsForResource(w, req)

	case "RegisterInstance":
		r.handleRegisterInstance(w, req)

	case "TagResource":
		r.handleTagResource(w, req)

	case "UntagResource":
		r.handleUntagResource(w, req)

	case "UpdateHttpNamespace":
		r.handleUpdateHttpNamespace(w, req)

	case "UpdateInstanceCustomHealthStatus":
		r.handleUpdateInstanceCustomHealthStatus(w, req)

	case "UpdatePrivateDnsNamespace":
		r.handleUpdatePrivateDnsNamespace(w, req)

	case "UpdatePublicDnsNamespace":
		r.handleUpdatePublicDnsNamespace(w, req)

	case "UpdateService":
		r.handleUpdateService(w, req)

	case "UpdateServiceAttributes":
		r.handleUpdateServiceAttributes(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleCreateHttpNamespace handles the CreateHttpNamespace operation
func (r *Router) handleCreateHttpNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateHttpNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateHttpNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreatePrivateDnsNamespace handles the CreatePrivateDnsNamespace operation
func (r *Router) handleCreatePrivateDnsNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreatePrivateDnsNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreatePrivateDnsNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreatePublicDnsNamespace handles the CreatePublicDnsNamespace operation
func (r *Router) handleCreatePublicDnsNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreatePublicDnsNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreatePublicDnsNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateService handles the CreateService operation
func (r *Router) handleCreateService(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateServiceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateService(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteNamespace handles the DeleteNamespace operation
func (r *Router) handleDeleteNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteService handles the DeleteService operation
func (r *Router) handleDeleteService(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteServiceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteService(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteServiceAttributes handles the DeleteServiceAttributes operation
func (r *Router) handleDeleteServiceAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteServiceAttributesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteServiceAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeregisterInstance handles the DeregisterInstance operation
func (r *Router) handleDeregisterInstance(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeregisterInstanceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeregisterInstance(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDiscoverInstances handles the DiscoverInstances operation
func (r *Router) handleDiscoverInstances(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DiscoverInstancesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DiscoverInstances(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDiscoverInstancesRevision handles the DiscoverInstancesRevision operation
func (r *Router) handleDiscoverInstancesRevision(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DiscoverInstancesRevisionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DiscoverInstancesRevision(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetInstance handles the GetInstance operation
func (r *Router) handleGetInstance(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetInstanceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetInstance(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetInstancesHealthStatus handles the GetInstancesHealthStatus operation
func (r *Router) handleGetInstancesHealthStatus(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetInstancesHealthStatusRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetInstancesHealthStatus(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetNamespace handles the GetNamespace operation
func (r *Router) handleGetNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetOperation handles the GetOperation operation
func (r *Router) handleGetOperation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetOperationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetOperation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetService handles the GetService operation
func (r *Router) handleGetService(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetServiceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetService(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetServiceAttributes handles the GetServiceAttributes operation
func (r *Router) handleGetServiceAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetServiceAttributesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetServiceAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListInstances handles the ListInstances operation
func (r *Router) handleListInstances(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListInstancesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListInstances(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListNamespaces handles the ListNamespaces operation
func (r *Router) handleListNamespaces(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListNamespacesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListNamespaces(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListOperations handles the ListOperations operation
func (r *Router) handleListOperations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListOperationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListOperations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListServices handles the ListServices operation
func (r *Router) handleListServices(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListServicesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListServices(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListTagsForResource handles the ListTagsForResource operation
func (r *Router) handleListTagsForResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListTagsForResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListTagsForResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRegisterInstance handles the RegisterInstance operation
func (r *Router) handleRegisterInstance(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RegisterInstanceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RegisterInstance(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleTagResource handles the TagResource operation
func (r *Router) handleTagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input TagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.TagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUntagResource handles the UntagResource operation
func (r *Router) handleUntagResource(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UntagResourceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UntagResource(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateHttpNamespace handles the UpdateHttpNamespace operation
func (r *Router) handleUpdateHttpNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateHttpNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateHttpNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateInstanceCustomHealthStatus handles the UpdateInstanceCustomHealthStatus operation
func (r *Router) handleUpdateInstanceCustomHealthStatus(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateInstanceCustomHealthStatusRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateInstanceCustomHealthStatus(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdatePrivateDnsNamespace handles the UpdatePrivateDnsNamespace operation
func (r *Router) handleUpdatePrivateDnsNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdatePrivateDnsNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdatePrivateDnsNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdatePublicDnsNamespace handles the UpdatePublicDnsNamespace operation
func (r *Router) handleUpdatePublicDnsNamespace(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdatePublicDnsNamespaceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdatePublicDnsNamespace(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateService handles the UpdateService operation
func (r *Router) handleUpdateService(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateServiceRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateService(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUpdateServiceAttributes handles the UpdateServiceAttributes operation
func (r *Router) handleUpdateServiceAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UpdateServiceAttributesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UpdateServiceAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
