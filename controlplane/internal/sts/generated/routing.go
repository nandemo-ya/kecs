// Code generated by cmd/codegen. DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for sts API
type Router struct {
	api AWSSecurityTokenServiceV20110615API
}

// NewRouter creates a new router for sts API
func NewRouter(api AWSSecurityTokenServiceV20110615API) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "AssumeRole":
		r.handleAssumeRole(w, req)

	case "AssumeRoleWithSAML":
		r.handleAssumeRoleWithSAML(w, req)

	case "AssumeRoleWithWebIdentity":
		r.handleAssumeRoleWithWebIdentity(w, req)

	case "AssumeRoot":
		r.handleAssumeRoot(w, req)

	case "DecodeAuthorizationMessage":
		r.handleDecodeAuthorizationMessage(w, req)

	case "GetAccessKeyInfo":
		r.handleGetAccessKeyInfo(w, req)

	case "GetCallerIdentity":
		r.handleGetCallerIdentity(w, req)

	case "GetFederationToken":
		r.handleGetFederationToken(w, req)

	case "GetSessionToken":
		r.handleGetSessionToken(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleAssumeRole handles the AssumeRole operation
func (r *Router) handleAssumeRole(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AssumeRoleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AssumeRole(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAssumeRoleWithSAML handles the AssumeRoleWithSAML operation
func (r *Router) handleAssumeRoleWithSAML(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AssumeRoleWithSAMLRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AssumeRoleWithSAML(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAssumeRoleWithWebIdentity handles the AssumeRoleWithWebIdentity operation
func (r *Router) handleAssumeRoleWithWebIdentity(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AssumeRoleWithWebIdentityRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AssumeRoleWithWebIdentity(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleAssumeRoot handles the AssumeRoot operation
func (r *Router) handleAssumeRoot(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AssumeRootRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AssumeRoot(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDecodeAuthorizationMessage handles the DecodeAuthorizationMessage operation
func (r *Router) handleDecodeAuthorizationMessage(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DecodeAuthorizationMessageRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DecodeAuthorizationMessage(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetAccessKeyInfo handles the GetAccessKeyInfo operation
func (r *Router) handleGetAccessKeyInfo(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetAccessKeyInfoRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetAccessKeyInfo(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetCallerIdentity handles the GetCallerIdentity operation
func (r *Router) handleGetCallerIdentity(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetCallerIdentityRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetCallerIdentity(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetFederationToken handles the GetFederationToken operation
func (r *Router) handleGetFederationToken(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetFederationTokenRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetFederationToken(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetSessionToken handles the GetSessionToken operation
func (r *Router) handleGetSessionToken(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetSessionTokenRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetSessionToken(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
