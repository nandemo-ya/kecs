// Code generated by cmd/codegen. DO NOT EDIT.

package generated

import (
	"time"
)

// Unit represents an empty response
type Unit = struct{}

// AssumeRoleRequest represents the AssumeRoleRequest structure
type AssumeRoleRequest struct {
	DurationSeconds *int32 `json:"DurationSeconds,omitempty"`

	ExternalId *string `json:"ExternalId,omitempty"`

	Policy *string `json:"Policy,omitempty"`

	PolicyArns []PolicyDescriptorType `json:"PolicyArns,omitempty"`

	ProvidedContexts []ProvidedContext `json:"ProvidedContexts,omitempty"`

	RoleArn string `json:"RoleArn"`

	RoleSessionName string `json:"RoleSessionName"`

	SerialNumber *string `json:"SerialNumber,omitempty"`

	SourceIdentity *string `json:"SourceIdentity,omitempty"`

	Tags []Tag `json:"Tags,omitempty"`

	TokenCode *string `json:"TokenCode,omitempty"`

	TransitiveTagKeys []string `json:"TransitiveTagKeys,omitempty"`
}

// AssumeRoleResponse represents the AssumeRoleResponse structure
type AssumeRoleResponse struct {
	AssumedRoleUser *AssumedRoleUser `json:"AssumedRoleUser,omitempty"`

	Credentials *Credentials `json:"Credentials,omitempty"`

	PackedPolicySize *int32 `json:"PackedPolicySize,omitempty"`

	SourceIdentity *string `json:"SourceIdentity,omitempty"`
}

// AssumeRoleWithSAMLRequest represents the AssumeRoleWithSAMLRequest structure
type AssumeRoleWithSAMLRequest struct {
	DurationSeconds *int32 `json:"DurationSeconds,omitempty"`

	Policy *string `json:"Policy,omitempty"`

	PolicyArns []PolicyDescriptorType `json:"PolicyArns,omitempty"`

	PrincipalArn string `json:"PrincipalArn"`

	RoleArn string `json:"RoleArn"`

	SAMLAssertion string `json:"SAMLAssertion"`
}

// AssumeRoleWithSAMLResponse represents the AssumeRoleWithSAMLResponse structure
type AssumeRoleWithSAMLResponse struct {
	AssumedRoleUser *AssumedRoleUser `json:"AssumedRoleUser,omitempty"`

	Audience *string `json:"Audience,omitempty"`

	Credentials *Credentials `json:"Credentials,omitempty"`

	Issuer *string `json:"Issuer,omitempty"`

	NameQualifier *string `json:"NameQualifier,omitempty"`

	PackedPolicySize *int32 `json:"PackedPolicySize,omitempty"`

	SourceIdentity *string `json:"SourceIdentity,omitempty"`

	Subject *string `json:"Subject,omitempty"`

	SubjectType *string `json:"SubjectType,omitempty"`
}

// AssumeRoleWithWebIdentityRequest represents the AssumeRoleWithWebIdentityRequest structure
type AssumeRoleWithWebIdentityRequest struct {
	DurationSeconds *int32 `json:"DurationSeconds,omitempty"`

	Policy *string `json:"Policy,omitempty"`

	PolicyArns []PolicyDescriptorType `json:"PolicyArns,omitempty"`

	ProviderId *string `json:"ProviderId,omitempty"`

	RoleArn string `json:"RoleArn"`

	RoleSessionName string `json:"RoleSessionName"`

	WebIdentityToken string `json:"WebIdentityToken"`
}

// AssumeRoleWithWebIdentityResponse represents the AssumeRoleWithWebIdentityResponse structure
type AssumeRoleWithWebIdentityResponse struct {
	AssumedRoleUser *AssumedRoleUser `json:"AssumedRoleUser,omitempty"`

	Audience *string `json:"Audience,omitempty"`

	Credentials *Credentials `json:"Credentials,omitempty"`

	PackedPolicySize *int32 `json:"PackedPolicySize,omitempty"`

	Provider *string `json:"Provider,omitempty"`

	SourceIdentity *string `json:"SourceIdentity,omitempty"`

	SubjectFromWebIdentityToken *string `json:"SubjectFromWebIdentityToken,omitempty"`
}

// AssumeRootRequest represents the AssumeRootRequest structure
type AssumeRootRequest struct {
	DurationSeconds *int32 `json:"DurationSeconds,omitempty"`

	TargetPrincipal string `json:"TargetPrincipal"`

	TaskPolicyArn PolicyDescriptorType `json:"TaskPolicyArn"`
}

// AssumeRootResponse represents the AssumeRootResponse structure
type AssumeRootResponse struct {
	Credentials *Credentials `json:"Credentials,omitempty"`

	SourceIdentity *string `json:"SourceIdentity,omitempty"`
}

// AssumedRoleUser represents the AssumedRoleUser structure
type AssumedRoleUser struct {
	Arn string `json:"Arn"`

	AssumedRoleId string `json:"AssumedRoleId"`
}

// Audience represents the Audience type
type Audience string

// Credentials represents the Credentials structure
type Credentials struct {
	AccessKeyId string `json:"AccessKeyId"`

	Expiration time.Time `json:"Expiration"`

	SecretAccessKey string `json:"SecretAccessKey"`

	SessionToken string `json:"SessionToken"`
}

// DecodeAuthorizationMessageRequest represents the DecodeAuthorizationMessageRequest structure
type DecodeAuthorizationMessageRequest struct {
	EncodedMessage string `json:"EncodedMessage"`
}

// DecodeAuthorizationMessageResponse represents the DecodeAuthorizationMessageResponse structure
type DecodeAuthorizationMessageResponse struct {
	DecodedMessage *string `json:"DecodedMessage,omitempty"`
}

// ExpiredTokenException represents the ExpiredTokenException structure
type ExpiredTokenException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for ExpiredTokenException
func (e ExpiredTokenException) Error() string {
	return "ExpiredTokenException: AWS client error (HTTP 400)"
}

// ErrorCode returns the AWS error code
func (e ExpiredTokenException) ErrorCode() string {
	return "ExpiredTokenException"
}

// ErrorFault indicates whether this is a client or server error
func (e ExpiredTokenException) ErrorFault() string {
	return "client"
}

// FederatedUser represents the FederatedUser structure
type FederatedUser struct {
	Arn string `json:"Arn"`

	FederatedUserId string `json:"FederatedUserId"`
}

// GetAccessKeyInfoRequest represents the GetAccessKeyInfoRequest structure
type GetAccessKeyInfoRequest struct {
	AccessKeyId string `json:"AccessKeyId"`
}

// GetAccessKeyInfoResponse represents the GetAccessKeyInfoResponse structure
type GetAccessKeyInfoResponse struct {
	Account *string `json:"Account,omitempty"`
}

// GetCallerIdentityRequest represents the GetCallerIdentityRequest structure
type GetCallerIdentityRequest struct {
}

// GetCallerIdentityResponse represents the GetCallerIdentityResponse structure
type GetCallerIdentityResponse struct {
	Account *string `json:"Account,omitempty"`

	Arn *string `json:"Arn,omitempty"`

	UserId *string `json:"UserId,omitempty"`
}

// GetFederationTokenRequest represents the GetFederationTokenRequest structure
type GetFederationTokenRequest struct {
	DurationSeconds *int32 `json:"DurationSeconds,omitempty"`

	Name string `json:"Name"`

	Policy *string `json:"Policy,omitempty"`

	PolicyArns []PolicyDescriptorType `json:"PolicyArns,omitempty"`

	Tags []Tag `json:"Tags,omitempty"`
}

// GetFederationTokenResponse represents the GetFederationTokenResponse structure
type GetFederationTokenResponse struct {
	Credentials *Credentials `json:"Credentials,omitempty"`

	FederatedUser *FederatedUser `json:"FederatedUser,omitempty"`

	PackedPolicySize *int32 `json:"PackedPolicySize,omitempty"`
}

// GetSessionTokenRequest represents the GetSessionTokenRequest structure
type GetSessionTokenRequest struct {
	DurationSeconds *int32 `json:"DurationSeconds,omitempty"`

	SerialNumber *string `json:"SerialNumber,omitempty"`

	TokenCode *string `json:"TokenCode,omitempty"`
}

// GetSessionTokenResponse represents the GetSessionTokenResponse structure
type GetSessionTokenResponse struct {
	Credentials *Credentials `json:"Credentials,omitempty"`
}

// IDPCommunicationErrorException represents the IDPCommunicationErrorException structure
type IDPCommunicationErrorException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for IDPCommunicationErrorException
func (e IDPCommunicationErrorException) Error() string {
	return "IDPCommunicationErrorException: AWS client error (HTTP 400)"
}

// ErrorCode returns the AWS error code
func (e IDPCommunicationErrorException) ErrorCode() string {
	return "IDPCommunicationErrorException"
}

// ErrorFault indicates whether this is a client or server error
func (e IDPCommunicationErrorException) ErrorFault() string {
	return "client"
}

// IDPRejectedClaimException represents the IDPRejectedClaimException structure
type IDPRejectedClaimException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for IDPRejectedClaimException
func (e IDPRejectedClaimException) Error() string {
	return "IDPRejectedClaimException: AWS client error (HTTP 403)"
}

// ErrorCode returns the AWS error code
func (e IDPRejectedClaimException) ErrorCode() string {
	return "IDPRejectedClaimException"
}

// ErrorFault indicates whether this is a client or server error
func (e IDPRejectedClaimException) ErrorFault() string {
	return "client"
}

// InvalidAuthorizationMessageException represents the InvalidAuthorizationMessageException structure
type InvalidAuthorizationMessageException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for InvalidAuthorizationMessageException
func (e InvalidAuthorizationMessageException) Error() string {
	return "InvalidAuthorizationMessageException: AWS client error (HTTP 400)"
}

// ErrorCode returns the AWS error code
func (e InvalidAuthorizationMessageException) ErrorCode() string {
	return "InvalidAuthorizationMessageException"
}

// ErrorFault indicates whether this is a client or server error
func (e InvalidAuthorizationMessageException) ErrorFault() string {
	return "client"
}

// InvalidIdentityTokenException represents the InvalidIdentityTokenException structure
type InvalidIdentityTokenException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for InvalidIdentityTokenException
func (e InvalidIdentityTokenException) Error() string {
	return "InvalidIdentityTokenException: AWS client error (HTTP 400)"
}

// ErrorCode returns the AWS error code
func (e InvalidIdentityTokenException) ErrorCode() string {
	return "InvalidIdentityTokenException"
}

// ErrorFault indicates whether this is a client or server error
func (e InvalidIdentityTokenException) ErrorFault() string {
	return "client"
}

// Issuer represents the Issuer type
type Issuer string

// MalformedPolicyDocumentException represents the MalformedPolicyDocumentException structure
type MalformedPolicyDocumentException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for MalformedPolicyDocumentException
func (e MalformedPolicyDocumentException) Error() string {
	return "MalformedPolicyDocumentException: AWS client error (HTTP 400)"
}

// ErrorCode returns the AWS error code
func (e MalformedPolicyDocumentException) ErrorCode() string {
	return "MalformedPolicyDocumentException"
}

// ErrorFault indicates whether this is a client or server error
func (e MalformedPolicyDocumentException) ErrorFault() string {
	return "client"
}

// NameQualifier represents the NameQualifier type
type NameQualifier string

// PackedPolicyTooLargeException represents the PackedPolicyTooLargeException structure
type PackedPolicyTooLargeException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for PackedPolicyTooLargeException
func (e PackedPolicyTooLargeException) Error() string {
	return "PackedPolicyTooLargeException: AWS client error (HTTP 400)"
}

// ErrorCode returns the AWS error code
func (e PackedPolicyTooLargeException) ErrorCode() string {
	return "PackedPolicyTooLargeException"
}

// ErrorFault indicates whether this is a client or server error
func (e PackedPolicyTooLargeException) ErrorFault() string {
	return "client"
}

// PolicyDescriptorType represents the PolicyDescriptorType structure
type PolicyDescriptorType struct {
	Arn *string `json:"arn,omitempty"`
}

// ProvidedContext represents the ProvidedContext structure
type ProvidedContext struct {
	ContextAssertion *string `json:"ContextAssertion,omitempty"`

	ProviderArn *string `json:"ProviderArn,omitempty"`
}

// ProvidedContextsListType represents the ProvidedContextsListType type
type ProvidedContextsListType []ProvidedContext

// RegionDisabledException represents the RegionDisabledException structure
type RegionDisabledException struct {
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for RegionDisabledException
func (e RegionDisabledException) Error() string {
	return "RegionDisabledException: AWS client error (HTTP 403)"
}

// ErrorCode returns the AWS error code
func (e RegionDisabledException) ErrorCode() string {
	return "RegionDisabledException"
}

// ErrorFault indicates whether this is a client or server error
func (e RegionDisabledException) ErrorFault() string {
	return "client"
}

// RootDurationSecondsType represents the RootDurationSecondsType type
type RootDurationSecondsType int32

// SAMLAssertionType represents the SAMLAssertionType type
type SAMLAssertionType string

// Subject represents the Subject type
type Subject string

// SubjectType represents the SubjectType type
type SubjectType string

// Tag represents the Tag structure
type Tag struct {
	Key string `json:"Key"`

	Value string `json:"Value"`
}

// TargetPrincipalType represents the TargetPrincipalType type
type TargetPrincipalType string

// accessKeyIdType represents the accessKeyIdType type
type accessKeyIdType string

// accessKeySecretType represents the accessKeySecretType type
type accessKeySecretType string

// accountType represents the accountType type
type accountType string

// arnType represents the arnType type
type arnType string

// assumedRoleIdType represents the assumedRoleIdType type
type assumedRoleIdType string

// clientTokenType represents the clientTokenType type
type clientTokenType string

// contextAssertionType represents the contextAssertionType type
type contextAssertionType string

// dateType represents the dateType type
type dateType time.Time

// decodedMessageType represents the decodedMessageType type
type decodedMessageType string

// durationSecondsType represents the durationSecondsType type
type durationSecondsType int32

// encodedMessageType represents the encodedMessageType type
type encodedMessageType string

// expiredIdentityTokenMessage represents the expiredIdentityTokenMessage type
type expiredIdentityTokenMessage string

// externalIdType represents the externalIdType type
type externalIdType string

// federatedIdType represents the federatedIdType type
type federatedIdType string

// idpCommunicationErrorMessage represents the idpCommunicationErrorMessage type
type idpCommunicationErrorMessage string

// idpRejectedClaimMessage represents the idpRejectedClaimMessage type
type idpRejectedClaimMessage string

// invalidAuthorizationMessage represents the invalidAuthorizationMessage type
type invalidAuthorizationMessage string

// invalidIdentityTokenMessage represents the invalidIdentityTokenMessage type
type invalidIdentityTokenMessage string

// malformedPolicyDocumentMessage represents the malformedPolicyDocumentMessage type
type malformedPolicyDocumentMessage string

// nonNegativeIntegerType represents the nonNegativeIntegerType type
type nonNegativeIntegerType int32

// packedPolicyTooLargeMessage represents the packedPolicyTooLargeMessage type
type packedPolicyTooLargeMessage string

// policyDescriptorListType represents the policyDescriptorListType type
type policyDescriptorListType []PolicyDescriptorType

// regionDisabledMessage represents the regionDisabledMessage type
type regionDisabledMessage string

// roleDurationSecondsType represents the roleDurationSecondsType type
type roleDurationSecondsType int32

// roleSessionNameType represents the roleSessionNameType type
type roleSessionNameType string

// serialNumberType represents the serialNumberType type
type serialNumberType string

// sessionPolicyDocumentType represents the sessionPolicyDocumentType type
type sessionPolicyDocumentType string

// sourceIdentityType represents the sourceIdentityType type
type sourceIdentityType string

// tagKeyListType represents the tagKeyListType type
type tagKeyListType []string

// tagKeyType represents the tagKeyType type
type tagKeyType string

// tagListType represents the tagListType type
type tagListType []Tag

// tagValueType represents the tagValueType type
type tagValueType string

// tokenCodeType represents the tokenCodeType type
type tokenCodeType string

// tokenType represents the tokenType type
type tokenType string

// unrestrictedSessionPolicyDocumentType represents the unrestrictedSessionPolicyDocumentType type
type unrestrictedSessionPolicyDocumentType string

// urlType represents the urlType type
type urlType string

// userIdType represents the userIdType type
type userIdType string

// userNameType represents the userNameType type
type userNameType string

// webIdentitySubjectType represents the webIdentitySubjectType type
type webIdentitySubjectType string
