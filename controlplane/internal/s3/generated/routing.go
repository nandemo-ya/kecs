// Code generated by cmd/codegen. DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

// Router handles HTTP routing for s3 API
type Router struct {
	api AmazonS3API
}

// NewRouter creates a new router for s3 API
func NewRouter(api AmazonS3API) *Router {
	return &Router{api: api}
}

// Route routes an HTTP request to the appropriate handler
func (r *Router) Route(w http.ResponseWriter, req *http.Request) {
	// Extract action from request
	action := r.extractAction(req)
	if action == "" {
		writeError(w, http.StatusBadRequest, "MissingAction", "Could not determine action from request")
		return
	}

	// Route to appropriate handler
	switch action {

	case "AbortMultipartUpload":
		r.handleAbortMultipartUpload(w, req)

	case "CompleteMultipartUpload":
		r.handleCompleteMultipartUpload(w, req)

	case "CopyObject":
		r.handleCopyObject(w, req)

	case "CreateBucket":
		r.handleCreateBucket(w, req)

	case "CreateBucketMetadataTableConfiguration":
		r.handleCreateBucketMetadataTableConfiguration(w, req)

	case "CreateMultipartUpload":
		r.handleCreateMultipartUpload(w, req)

	case "CreateSession":
		r.handleCreateSession(w, req)

	case "DeleteBucket":
		r.handleDeleteBucket(w, req)

	case "DeleteBucketAnalyticsConfiguration":
		r.handleDeleteBucketAnalyticsConfiguration(w, req)

	case "DeleteBucketCors":
		r.handleDeleteBucketCors(w, req)

	case "DeleteBucketEncryption":
		r.handleDeleteBucketEncryption(w, req)

	case "DeleteBucketIntelligentTieringConfiguration":
		r.handleDeleteBucketIntelligentTieringConfiguration(w, req)

	case "DeleteBucketInventoryConfiguration":
		r.handleDeleteBucketInventoryConfiguration(w, req)

	case "DeleteBucketLifecycle":
		r.handleDeleteBucketLifecycle(w, req)

	case "DeleteBucketMetadataTableConfiguration":
		r.handleDeleteBucketMetadataTableConfiguration(w, req)

	case "DeleteBucketMetricsConfiguration":
		r.handleDeleteBucketMetricsConfiguration(w, req)

	case "DeleteBucketOwnershipControls":
		r.handleDeleteBucketOwnershipControls(w, req)

	case "DeleteBucketPolicy":
		r.handleDeleteBucketPolicy(w, req)

	case "DeleteBucketReplication":
		r.handleDeleteBucketReplication(w, req)

	case "DeleteBucketTagging":
		r.handleDeleteBucketTagging(w, req)

	case "DeleteBucketWebsite":
		r.handleDeleteBucketWebsite(w, req)

	case "DeleteObject":
		r.handleDeleteObject(w, req)

	case "DeleteObjectTagging":
		r.handleDeleteObjectTagging(w, req)

	case "DeleteObjects":
		r.handleDeleteObjects(w, req)

	case "DeletePublicAccessBlock":
		r.handleDeletePublicAccessBlock(w, req)

	case "GetBucketAccelerateConfiguration":
		r.handleGetBucketAccelerateConfiguration(w, req)

	case "GetBucketAcl":
		r.handleGetBucketAcl(w, req)

	case "GetBucketAnalyticsConfiguration":
		r.handleGetBucketAnalyticsConfiguration(w, req)

	case "GetBucketCors":
		r.handleGetBucketCors(w, req)

	case "GetBucketEncryption":
		r.handleGetBucketEncryption(w, req)

	case "GetBucketIntelligentTieringConfiguration":
		r.handleGetBucketIntelligentTieringConfiguration(w, req)

	case "GetBucketInventoryConfiguration":
		r.handleGetBucketInventoryConfiguration(w, req)

	case "GetBucketLifecycleConfiguration":
		r.handleGetBucketLifecycleConfiguration(w, req)

	case "GetBucketLocation":
		r.handleGetBucketLocation(w, req)

	case "GetBucketLogging":
		r.handleGetBucketLogging(w, req)

	case "GetBucketMetadataTableConfiguration":
		r.handleGetBucketMetadataTableConfiguration(w, req)

	case "GetBucketMetricsConfiguration":
		r.handleGetBucketMetricsConfiguration(w, req)

	case "GetBucketNotificationConfiguration":
		r.handleGetBucketNotificationConfiguration(w, req)

	case "GetBucketOwnershipControls":
		r.handleGetBucketOwnershipControls(w, req)

	case "GetBucketPolicy":
		r.handleGetBucketPolicy(w, req)

	case "GetBucketPolicyStatus":
		r.handleGetBucketPolicyStatus(w, req)

	case "GetBucketReplication":
		r.handleGetBucketReplication(w, req)

	case "GetBucketRequestPayment":
		r.handleGetBucketRequestPayment(w, req)

	case "GetBucketTagging":
		r.handleGetBucketTagging(w, req)

	case "GetBucketVersioning":
		r.handleGetBucketVersioning(w, req)

	case "GetBucketWebsite":
		r.handleGetBucketWebsite(w, req)

	case "GetObject":
		r.handleGetObject(w, req)

	case "GetObjectAcl":
		r.handleGetObjectAcl(w, req)

	case "GetObjectAttributes":
		r.handleGetObjectAttributes(w, req)

	case "GetObjectLegalHold":
		r.handleGetObjectLegalHold(w, req)

	case "GetObjectLockConfiguration":
		r.handleGetObjectLockConfiguration(w, req)

	case "GetObjectRetention":
		r.handleGetObjectRetention(w, req)

	case "GetObjectTagging":
		r.handleGetObjectTagging(w, req)

	case "GetObjectTorrent":
		r.handleGetObjectTorrent(w, req)

	case "GetPublicAccessBlock":
		r.handleGetPublicAccessBlock(w, req)

	case "HeadBucket":
		r.handleHeadBucket(w, req)

	case "HeadObject":
		r.handleHeadObject(w, req)

	case "ListBucketAnalyticsConfigurations":
		r.handleListBucketAnalyticsConfigurations(w, req)

	case "ListBucketIntelligentTieringConfigurations":
		r.handleListBucketIntelligentTieringConfigurations(w, req)

	case "ListBucketInventoryConfigurations":
		r.handleListBucketInventoryConfigurations(w, req)

	case "ListBucketMetricsConfigurations":
		r.handleListBucketMetricsConfigurations(w, req)

	case "ListBuckets":
		r.handleListBuckets(w, req)

	case "ListDirectoryBuckets":
		r.handleListDirectoryBuckets(w, req)

	case "ListMultipartUploads":
		r.handleListMultipartUploads(w, req)

	case "ListObjectVersions":
		r.handleListObjectVersions(w, req)

	case "ListObjects":
		r.handleListObjects(w, req)

	case "ListObjectsV2":
		r.handleListObjectsV2(w, req)

	case "ListParts":
		r.handleListParts(w, req)

	case "PutBucketAccelerateConfiguration":
		r.handlePutBucketAccelerateConfiguration(w, req)

	case "PutBucketAcl":
		r.handlePutBucketAcl(w, req)

	case "PutBucketAnalyticsConfiguration":
		r.handlePutBucketAnalyticsConfiguration(w, req)

	case "PutBucketCors":
		r.handlePutBucketCors(w, req)

	case "PutBucketEncryption":
		r.handlePutBucketEncryption(w, req)

	case "PutBucketIntelligentTieringConfiguration":
		r.handlePutBucketIntelligentTieringConfiguration(w, req)

	case "PutBucketInventoryConfiguration":
		r.handlePutBucketInventoryConfiguration(w, req)

	case "PutBucketLifecycleConfiguration":
		r.handlePutBucketLifecycleConfiguration(w, req)

	case "PutBucketLogging":
		r.handlePutBucketLogging(w, req)

	case "PutBucketMetricsConfiguration":
		r.handlePutBucketMetricsConfiguration(w, req)

	case "PutBucketNotificationConfiguration":
		r.handlePutBucketNotificationConfiguration(w, req)

	case "PutBucketOwnershipControls":
		r.handlePutBucketOwnershipControls(w, req)

	case "PutBucketPolicy":
		r.handlePutBucketPolicy(w, req)

	case "PutBucketReplication":
		r.handlePutBucketReplication(w, req)

	case "PutBucketRequestPayment":
		r.handlePutBucketRequestPayment(w, req)

	case "PutBucketTagging":
		r.handlePutBucketTagging(w, req)

	case "PutBucketVersioning":
		r.handlePutBucketVersioning(w, req)

	case "PutBucketWebsite":
		r.handlePutBucketWebsite(w, req)

	case "PutObject":
		r.handlePutObject(w, req)

	case "PutObjectAcl":
		r.handlePutObjectAcl(w, req)

	case "PutObjectLegalHold":
		r.handlePutObjectLegalHold(w, req)

	case "PutObjectLockConfiguration":
		r.handlePutObjectLockConfiguration(w, req)

	case "PutObjectRetention":
		r.handlePutObjectRetention(w, req)

	case "PutObjectTagging":
		r.handlePutObjectTagging(w, req)

	case "PutPublicAccessBlock":
		r.handlePutPublicAccessBlock(w, req)

	case "RenameObject":
		r.handleRenameObject(w, req)

	case "RestoreObject":
		r.handleRestoreObject(w, req)

	case "SelectObjectContent":
		r.handleSelectObjectContent(w, req)

	case "UploadPart":
		r.handleUploadPart(w, req)

	case "UploadPartCopy":
		r.handleUploadPartCopy(w, req)

	case "WriteGetObjectResponse":
		r.handleWriteGetObjectResponse(w, req)

	default:
		writeError(w, http.StatusBadRequest, "InvalidAction", fmt.Sprintf("Unknown action: %s", action))
	}
}

// extractAction extracts the action from the request
func (r *Router) extractAction(req *http.Request) string {
	// Check X-Amz-Target header
	if target := req.Header.Get("X-Amz-Target"); target != "" {
		parts := strings.Split(target, ".")
		if len(parts) > 1 {
			return parts[1]
		}
	}

	// Check URL path
	if strings.HasPrefix(req.URL.Path, "/v1/") {
		parts := strings.Split(strings.TrimPrefix(req.URL.Path, "/v1/"), "/")
		if len(parts) > 0 {
			return parts[0]
		}
	}

	// Check query parameter
	return req.URL.Query().Get("Action")
}

// handleAbortMultipartUpload handles the AbortMultipartUpload operation
func (r *Router) handleAbortMultipartUpload(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input AbortMultipartUploadRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.AbortMultipartUpload(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCompleteMultipartUpload handles the CompleteMultipartUpload operation
func (r *Router) handleCompleteMultipartUpload(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CompleteMultipartUploadRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CompleteMultipartUpload(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCopyObject handles the CopyObject operation
func (r *Router) handleCopyObject(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CopyObjectRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CopyObject(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateBucket handles the CreateBucket operation
func (r *Router) handleCreateBucket(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateBucketRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateBucket(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateBucketMetadataTableConfiguration handles the CreateBucketMetadataTableConfiguration operation
func (r *Router) handleCreateBucketMetadataTableConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateBucketMetadataTableConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateBucketMetadataTableConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateMultipartUpload handles the CreateMultipartUpload operation
func (r *Router) handleCreateMultipartUpload(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateMultipartUploadRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateMultipartUpload(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleCreateSession handles the CreateSession operation
func (r *Router) handleCreateSession(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input CreateSessionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.CreateSession(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucket handles the DeleteBucket operation
func (r *Router) handleDeleteBucket(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucket(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketAnalyticsConfiguration handles the DeleteBucketAnalyticsConfiguration operation
func (r *Router) handleDeleteBucketAnalyticsConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketAnalyticsConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketAnalyticsConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketCors handles the DeleteBucketCors operation
func (r *Router) handleDeleteBucketCors(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketCorsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketCors(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketEncryption handles the DeleteBucketEncryption operation
func (r *Router) handleDeleteBucketEncryption(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketEncryptionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketEncryption(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketIntelligentTieringConfiguration handles the DeleteBucketIntelligentTieringConfiguration operation
func (r *Router) handleDeleteBucketIntelligentTieringConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketIntelligentTieringConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketIntelligentTieringConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketInventoryConfiguration handles the DeleteBucketInventoryConfiguration operation
func (r *Router) handleDeleteBucketInventoryConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketInventoryConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketInventoryConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketLifecycle handles the DeleteBucketLifecycle operation
func (r *Router) handleDeleteBucketLifecycle(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketLifecycleRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketLifecycle(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketMetadataTableConfiguration handles the DeleteBucketMetadataTableConfiguration operation
func (r *Router) handleDeleteBucketMetadataTableConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketMetadataTableConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketMetadataTableConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketMetricsConfiguration handles the DeleteBucketMetricsConfiguration operation
func (r *Router) handleDeleteBucketMetricsConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketMetricsConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketMetricsConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketOwnershipControls handles the DeleteBucketOwnershipControls operation
func (r *Router) handleDeleteBucketOwnershipControls(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketOwnershipControlsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketOwnershipControls(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketPolicy handles the DeleteBucketPolicy operation
func (r *Router) handleDeleteBucketPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketReplication handles the DeleteBucketReplication operation
func (r *Router) handleDeleteBucketReplication(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketReplicationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketReplication(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketTagging handles the DeleteBucketTagging operation
func (r *Router) handleDeleteBucketTagging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketTaggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketTagging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteBucketWebsite handles the DeleteBucketWebsite operation
func (r *Router) handleDeleteBucketWebsite(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteBucketWebsiteRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteBucketWebsite(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteObject handles the DeleteObject operation
func (r *Router) handleDeleteObject(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteObjectRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteObject(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteObjectTagging handles the DeleteObjectTagging operation
func (r *Router) handleDeleteObjectTagging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteObjectTaggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteObjectTagging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeleteObjects handles the DeleteObjects operation
func (r *Router) handleDeleteObjects(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeleteObjectsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeleteObjects(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleDeletePublicAccessBlock handles the DeletePublicAccessBlock operation
func (r *Router) handleDeletePublicAccessBlock(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input DeletePublicAccessBlockRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.DeletePublicAccessBlock(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketAccelerateConfiguration handles the GetBucketAccelerateConfiguration operation
func (r *Router) handleGetBucketAccelerateConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketAccelerateConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketAccelerateConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketAcl handles the GetBucketAcl operation
func (r *Router) handleGetBucketAcl(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketAclRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketAcl(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketAnalyticsConfiguration handles the GetBucketAnalyticsConfiguration operation
func (r *Router) handleGetBucketAnalyticsConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketAnalyticsConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketAnalyticsConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketCors handles the GetBucketCors operation
func (r *Router) handleGetBucketCors(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketCorsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketCors(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketEncryption handles the GetBucketEncryption operation
func (r *Router) handleGetBucketEncryption(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketEncryptionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketEncryption(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketIntelligentTieringConfiguration handles the GetBucketIntelligentTieringConfiguration operation
func (r *Router) handleGetBucketIntelligentTieringConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketIntelligentTieringConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketIntelligentTieringConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketInventoryConfiguration handles the GetBucketInventoryConfiguration operation
func (r *Router) handleGetBucketInventoryConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketInventoryConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketInventoryConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketLifecycleConfiguration handles the GetBucketLifecycleConfiguration operation
func (r *Router) handleGetBucketLifecycleConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketLifecycleConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketLifecycleConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketLocation handles the GetBucketLocation operation
func (r *Router) handleGetBucketLocation(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketLocationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketLocation(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketLogging handles the GetBucketLogging operation
func (r *Router) handleGetBucketLogging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketLoggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketLogging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketMetadataTableConfiguration handles the GetBucketMetadataTableConfiguration operation
func (r *Router) handleGetBucketMetadataTableConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketMetadataTableConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketMetadataTableConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketMetricsConfiguration handles the GetBucketMetricsConfiguration operation
func (r *Router) handleGetBucketMetricsConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketMetricsConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketMetricsConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketNotificationConfiguration handles the GetBucketNotificationConfiguration operation
func (r *Router) handleGetBucketNotificationConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketNotificationConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketNotificationConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketOwnershipControls handles the GetBucketOwnershipControls operation
func (r *Router) handleGetBucketOwnershipControls(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketOwnershipControlsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketOwnershipControls(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketPolicy handles the GetBucketPolicy operation
func (r *Router) handleGetBucketPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketPolicyStatus handles the GetBucketPolicyStatus operation
func (r *Router) handleGetBucketPolicyStatus(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketPolicyStatusRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketPolicyStatus(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketReplication handles the GetBucketReplication operation
func (r *Router) handleGetBucketReplication(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketReplicationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketReplication(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketRequestPayment handles the GetBucketRequestPayment operation
func (r *Router) handleGetBucketRequestPayment(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketRequestPaymentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketRequestPayment(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketTagging handles the GetBucketTagging operation
func (r *Router) handleGetBucketTagging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketTaggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketTagging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketVersioning handles the GetBucketVersioning operation
func (r *Router) handleGetBucketVersioning(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketVersioningRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketVersioning(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetBucketWebsite handles the GetBucketWebsite operation
func (r *Router) handleGetBucketWebsite(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetBucketWebsiteRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetBucketWebsite(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObject handles the GetObject operation
func (r *Router) handleGetObject(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObject(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObjectAcl handles the GetObjectAcl operation
func (r *Router) handleGetObjectAcl(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectAclRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObjectAcl(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObjectAttributes handles the GetObjectAttributes operation
func (r *Router) handleGetObjectAttributes(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectAttributesRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObjectAttributes(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObjectLegalHold handles the GetObjectLegalHold operation
func (r *Router) handleGetObjectLegalHold(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectLegalHoldRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObjectLegalHold(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObjectLockConfiguration handles the GetObjectLockConfiguration operation
func (r *Router) handleGetObjectLockConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectLockConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObjectLockConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObjectRetention handles the GetObjectRetention operation
func (r *Router) handleGetObjectRetention(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectRetentionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObjectRetention(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObjectTagging handles the GetObjectTagging operation
func (r *Router) handleGetObjectTagging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectTaggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObjectTagging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetObjectTorrent handles the GetObjectTorrent operation
func (r *Router) handleGetObjectTorrent(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetObjectTorrentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetObjectTorrent(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleGetPublicAccessBlock handles the GetPublicAccessBlock operation
func (r *Router) handleGetPublicAccessBlock(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input GetPublicAccessBlockRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.GetPublicAccessBlock(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleHeadBucket handles the HeadBucket operation
func (r *Router) handleHeadBucket(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input HeadBucketRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.HeadBucket(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleHeadObject handles the HeadObject operation
func (r *Router) handleHeadObject(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input HeadObjectRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.HeadObject(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListBucketAnalyticsConfigurations handles the ListBucketAnalyticsConfigurations operation
func (r *Router) handleListBucketAnalyticsConfigurations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListBucketAnalyticsConfigurationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListBucketAnalyticsConfigurations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListBucketIntelligentTieringConfigurations handles the ListBucketIntelligentTieringConfigurations operation
func (r *Router) handleListBucketIntelligentTieringConfigurations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListBucketIntelligentTieringConfigurationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListBucketIntelligentTieringConfigurations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListBucketInventoryConfigurations handles the ListBucketInventoryConfigurations operation
func (r *Router) handleListBucketInventoryConfigurations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListBucketInventoryConfigurationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListBucketInventoryConfigurations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListBucketMetricsConfigurations handles the ListBucketMetricsConfigurations operation
func (r *Router) handleListBucketMetricsConfigurations(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListBucketMetricsConfigurationsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListBucketMetricsConfigurations(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListBuckets handles the ListBuckets operation
func (r *Router) handleListBuckets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListBucketsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListBuckets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListDirectoryBuckets handles the ListDirectoryBuckets operation
func (r *Router) handleListDirectoryBuckets(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListDirectoryBucketsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListDirectoryBuckets(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListMultipartUploads handles the ListMultipartUploads operation
func (r *Router) handleListMultipartUploads(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListMultipartUploadsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListMultipartUploads(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListObjectVersions handles the ListObjectVersions operation
func (r *Router) handleListObjectVersions(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListObjectVersionsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListObjectVersions(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListObjects handles the ListObjects operation
func (r *Router) handleListObjects(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListObjectsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListObjects(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListObjectsV2 handles the ListObjectsV2 operation
func (r *Router) handleListObjectsV2(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListObjectsV2Request
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListObjectsV2(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleListParts handles the ListParts operation
func (r *Router) handleListParts(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input ListPartsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.ListParts(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketAccelerateConfiguration handles the PutBucketAccelerateConfiguration operation
func (r *Router) handlePutBucketAccelerateConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketAccelerateConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketAccelerateConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketAcl handles the PutBucketAcl operation
func (r *Router) handlePutBucketAcl(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketAclRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketAcl(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketAnalyticsConfiguration handles the PutBucketAnalyticsConfiguration operation
func (r *Router) handlePutBucketAnalyticsConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketAnalyticsConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketAnalyticsConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketCors handles the PutBucketCors operation
func (r *Router) handlePutBucketCors(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketCorsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketCors(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketEncryption handles the PutBucketEncryption operation
func (r *Router) handlePutBucketEncryption(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketEncryptionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketEncryption(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketIntelligentTieringConfiguration handles the PutBucketIntelligentTieringConfiguration operation
func (r *Router) handlePutBucketIntelligentTieringConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketIntelligentTieringConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketIntelligentTieringConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketInventoryConfiguration handles the PutBucketInventoryConfiguration operation
func (r *Router) handlePutBucketInventoryConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketInventoryConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketInventoryConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketLifecycleConfiguration handles the PutBucketLifecycleConfiguration operation
func (r *Router) handlePutBucketLifecycleConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketLifecycleConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketLifecycleConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketLogging handles the PutBucketLogging operation
func (r *Router) handlePutBucketLogging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketLoggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketLogging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketMetricsConfiguration handles the PutBucketMetricsConfiguration operation
func (r *Router) handlePutBucketMetricsConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketMetricsConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketMetricsConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketNotificationConfiguration handles the PutBucketNotificationConfiguration operation
func (r *Router) handlePutBucketNotificationConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketNotificationConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketNotificationConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketOwnershipControls handles the PutBucketOwnershipControls operation
func (r *Router) handlePutBucketOwnershipControls(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketOwnershipControlsRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketOwnershipControls(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketPolicy handles the PutBucketPolicy operation
func (r *Router) handlePutBucketPolicy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketPolicyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketPolicy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketReplication handles the PutBucketReplication operation
func (r *Router) handlePutBucketReplication(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketReplicationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketReplication(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketRequestPayment handles the PutBucketRequestPayment operation
func (r *Router) handlePutBucketRequestPayment(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketRequestPaymentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketRequestPayment(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketTagging handles the PutBucketTagging operation
func (r *Router) handlePutBucketTagging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketTaggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketTagging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketVersioning handles the PutBucketVersioning operation
func (r *Router) handlePutBucketVersioning(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketVersioningRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketVersioning(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutBucketWebsite handles the PutBucketWebsite operation
func (r *Router) handlePutBucketWebsite(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutBucketWebsiteRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutBucketWebsite(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutObject handles the PutObject operation
func (r *Router) handlePutObject(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutObjectRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutObject(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutObjectAcl handles the PutObjectAcl operation
func (r *Router) handlePutObjectAcl(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutObjectAclRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutObjectAcl(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutObjectLegalHold handles the PutObjectLegalHold operation
func (r *Router) handlePutObjectLegalHold(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutObjectLegalHoldRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutObjectLegalHold(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutObjectLockConfiguration handles the PutObjectLockConfiguration operation
func (r *Router) handlePutObjectLockConfiguration(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutObjectLockConfigurationRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutObjectLockConfiguration(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutObjectRetention handles the PutObjectRetention operation
func (r *Router) handlePutObjectRetention(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutObjectRetentionRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutObjectRetention(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutObjectTagging handles the PutObjectTagging operation
func (r *Router) handlePutObjectTagging(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutObjectTaggingRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutObjectTagging(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handlePutPublicAccessBlock handles the PutPublicAccessBlock operation
func (r *Router) handlePutPublicAccessBlock(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input PutPublicAccessBlockRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.PutPublicAccessBlock(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRenameObject handles the RenameObject operation
func (r *Router) handleRenameObject(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RenameObjectRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RenameObject(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleRestoreObject handles the RestoreObject operation
func (r *Router) handleRestoreObject(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input RestoreObjectRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.RestoreObject(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleSelectObjectContent handles the SelectObjectContent operation
func (r *Router) handleSelectObjectContent(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input SelectObjectContentRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.SelectObjectContent(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUploadPart handles the UploadPart operation
func (r *Router) handleUploadPart(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UploadPartRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UploadPart(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleUploadPartCopy handles the UploadPartCopy operation
func (r *Router) handleUploadPartCopy(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input UploadPartCopyRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.UploadPartCopy(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// handleWriteGetObjectResponse handles the WriteGetObjectResponse operation
func (r *Router) handleWriteGetObjectResponse(w http.ResponseWriter, req *http.Request) {
	// Parse input
	var input WriteGetObjectResponseRequest
	if req.ContentLength > 0 {
		if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
			writeError(w, http.StatusBadRequest, "InvalidParameterValue", fmt.Sprintf("Invalid JSON: %v", err))
			return
		}
	}

	// Call API
	output, err := r.api.WriteGetObjectResponse(req.Context(), &input)
	if err != nil {
		writeAPIError(w, err)
		return
	}

	// Write response
	writeJSON(w, http.StatusOK, output)
}

// writeJSON writes a JSON response
func writeJSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	if data != nil {
		encoder := json.NewEncoder(w)
		encoder.SetEscapeHTML(false)
		_ = encoder.Encode(data)
	}
}

// writeError writes an error response
func writeError(w http.ResponseWriter, statusCode int, code, message string) {
	w.Header().Set("Content-Type", "application/x-amz-json-1.1")
	w.WriteHeader(statusCode)

	_ = json.NewEncoder(w).Encode(map[string]interface{}{
		"__type":  code,
		"message": message,
	})
}

// writeAPIError writes an API error response
func writeAPIError(w http.ResponseWriter, err error) {
	// TODO: Handle specific error types
	writeError(w, http.StatusInternalServerError, "InternalError", err.Error())
}
