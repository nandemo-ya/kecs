# syntax=docker/dockerfile:1
# Production Dockerfile with embedded Web UI

# Stage 1: Build Web UI
FROM --platform=$BUILDPLATFORM node:20-alpine AS webui-builder
WORKDIR /app

# Copy Web UI source
COPY web-ui/package*.json ./
RUN npm ci --only=production

COPY web-ui/ ./
RUN npm run build

# Stage 2: Build the Go application with embedded Web UI
FROM --platform=$BUILDPLATFORM golang:1.24.3 AS go-builder
WORKDIR /app

ARG TARGETOS=linux
ARG TARGETARCH
ARG VERSION=dev

# Install cross-compilers with cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    case "$TARGETARCH" in \
        arm64) apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu ;; \
        amd64) apt-get install -y gcc-x86-64-linux-gnu g++-x86-64-linux-gnu ;; \
    esac

# Copy go mod files for dependency caching
COPY controlplane/go.mod controlplane/go.sum ./
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download && go mod verify

# Copy Web UI build artifacts
COPY --from=webui-builder /app/build ./internal/controlplane/api/webui_dist/

# Copy source files
COPY controlplane/cmd/ ./cmd/
COPY controlplane/internal/ ./internal/

# Build with embedded Web UI using cache mount
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    case "$TARGETARCH" in \
        arm64) export CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ ;; \
        amd64) export CC=x86_64-linux-gnu-gcc CXX=x86_64-linux-gnu-g++ ;; \
    esac && \
    CGO_ENABLED=1 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -tags embed_webui \
    -ldflags="-s -w -X github.com/nandemo-ya/kecs/controlplane/internal/controlplane/cmd.Version=${VERSION}" \
    -o controlplane ./cmd/controlplane

# Stage 3: Final production image (distroless)
FROM gcr.io/distroless/base-debian12:nonroot

# Create data directory with proper ownership
# Note: We need to do this in a separate stage since distroless doesn't have a shell
USER root
COPY --from=go-builder --chown=nonroot:nonroot /app/controlplane /controlplane

# Create data directory with nonroot ownership
# We use a builder stage to create the directory structure
FROM busybox:latest AS dir-creator
RUN mkdir -p /data && chown -R 65532:65532 /data

# Final stage
FROM gcr.io/distroless/base-debian12:nonroot

# Copy binary and data directory
COPY --from=go-builder --chown=nonroot:nonroot /app/controlplane /controlplane
COPY --from=dir-creator --chown=nonroot:nonroot /data /data

# Add labels for metadata
LABEL org.opencontainers.image.title="KECS Control Plane" \
      org.opencontainers.image.description="Kubernetes-based ECS Compatible Service Control Plane with Web UI" \
      org.opencontainers.image.vendor="KECS Project" \
      org.opencontainers.image.licenses="Apache-2.0"

# Environment variables
ENV PORT=8080 \
    ADMIN_PORT=8081 \
    KECS_UI_BASE_PATH=/ui \
    KECS_LOG_LEVEL=info \
    KECS_DATA_DIR=/data

# Expose ports
EXPOSE 8080 8081

# Note: distroless doesn't support:
# - Health check with curl (no shell/curl in distroless)
# - Creating directories at runtime
# - Volume declaration (handled by orchestrator)

# Entry point
ENTRYPOINT ["/controlplane"]
CMD ["server"]