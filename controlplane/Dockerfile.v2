# syntax=docker/dockerfile:1
# KECS Control Plane v2 - Optimized for in-cluster deployment

# Build stage
FROM --platform=$BUILDPLATFORM golang:1.25.0-alpine AS builder
WORKDIR /app

ARG TARGETOS=linux
ARG TARGETARCH

# Install build dependencies
RUN apk add --no-cache gcc musl-dev

# Copy go mod files for better caching
COPY go.mod go.sum ./
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download && go mod verify

# Copy source files
COPY cmd/ ./cmd/
COPY internal/ ./internal/

# Build with cache mount - static binary for better portability
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -ldflags="-s -w -X main.version=v2" \
    -o controlplane ./cmd/controlplane

# Final stage - distroless for minimal attack surface
FROM gcr.io/distroless/static-debian12:nonroot

# Copy the binary
COPY --from=builder /app/controlplane /controlplane

# Set environment variables for in-cluster deployment
ENV KECS_MODE=in-cluster
ENV KECS_DATA_DIR=/data
ENV PORT=8080
ENV ADMIN_PORT=8081

# Use nonroot user from distroless
USER nonroot:nonroot

# Data volume for DuckDB persistence
VOLUME ["/data"]

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD ["/controlplane", "health"]

EXPOSE 8080 8081

ENTRYPOINT ["/controlplane", "server", "--mode=in-cluster"]