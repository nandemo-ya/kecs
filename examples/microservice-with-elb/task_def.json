{
  "family": "microservice-api",
  "networkMode": "awsvpc",
  "requiresCompatibilities": ["FARGATE"],
  "cpu": "256",
  "memory": "512",
  "containerDefinitions": [
    {
      "name": "api",
      "image": "node:18-alpine",
      "essential": true,
      "command": [
        "sh", "-c",
        "mkdir -p /app && echo 'const http = require(\"http\"); const url = require(\"url\"); const server = http.createServer((req, res) => { const parsedUrl = url.parse(req.url, true); const path = parsedUrl.pathname; res.setHeader(\"Content-Type\", \"application/json\"); switch(path) { case \"/health\": res.writeHead(200); res.end(JSON.stringify({ status: \"healthy\", service: \"microservice-api\" })); break; case \"/api/users\": res.writeHead(200); res.end(JSON.stringify({ users: [{ id: 1, name: \"John\" }, { id: 2, name: \"Jane\" }] })); break; case \"/api/products\": res.writeHead(200); res.end(JSON.stringify({ products: [{ id: 1, name: \"Widget\", price: 9.99 }, { id: 2, name: \"Gadget\", price: 19.99 }] })); break; case \"/api/info\": res.writeHead(200); res.end(JSON.stringify({ service: \"microservice-api\", version: \"1.0.0\", instance: process.env.ECS_TASK_ARN || \"local\", timestamp: new Date().toISOString() })); break; default: res.writeHead(404); res.end(JSON.stringify({ error: \"Not found\" })); } }); const PORT = process.env.PORT || 3000; server.listen(PORT, () => { console.log(`API server running on port ${PORT}`); });' > /app/server.js && node /app/server.js"
      ],
      "portMappings": [
        {
          "containerPort": 3000,
          "protocol": "tcp"
        }
      ],
      "environment": [
        {
          "name": "PORT",
          "value": "3000"
        },
        {
          "name": "NODE_ENV",
          "value": "production"
        }
      ],
      "healthCheck": {
        "command": ["CMD-SHELL", "wget -q -O - http://localhost:3000/health || exit 1"],
        "interval": 30,
        "timeout": 5,
        "retries": 3,
        "startPeriod": 30
      },
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "/ecs/microservice-api",
          "awslogs-region": "us-east-1",
          "awslogs-stream-prefix": "api"
        }
      }
    }
  ],
  "executionRoleArn": "arn:aws:iam::000000000000:role/ecsTaskExecutionRole"
}