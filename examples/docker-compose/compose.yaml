# Example Docker Compose configuration for KECS

services:
  # Single KECS instance
  kecs:
    image: ghcr.io/nandemo-ya/kecs:latest
    container_name: kecs-server
    ports:
      - "8080:8080"  # API port
      - "8081:8081"  # Admin port
    volumes:
      - kecs-data:/data
    environment:
      - KECS_CONTAINER_MODE=true
      - KECS_LOG_LEVEL=info
      - KECS_DATA_DIR=/data
    labels:
      - app=kecs
      - environment=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Multiple instances example
  kecs-dev:
    image: ghcr.io/nandemo-ya/kecs:latest
    container_name: kecs-dev
    ports:
      - "8080:8080"
      - "8081:8081"
    volumes:
      - kecs-dev-data:/data
    environment:
      - KECS_CONTAINER_MODE=true
      - KECS_LOG_LEVEL=debug
      - KECS_TEST_MODE=true
    labels:
      - app=kecs
      - instance=dev
    profiles:
      - multi

  kecs-staging:
    image: ghcr.io/nandemo-ya/kecs:latest
    container_name: kecs-staging
    ports:
      - "8090:8080"
      - "8091:8081"
    volumes:
      - kecs-staging-data:/data
    environment:
      - KECS_CONTAINER_MODE=true
      - KECS_LOG_LEVEL=info
    labels:
      - app=kecs
      - instance=staging
    profiles:
      - multi

  # Example application using KECS
  app:
    image: your-app:latest
    depends_on:
      kecs:
        condition: service_healthy
    environment:
      - AWS_ENDPOINT_URL=http://kecs:8080
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    profiles:
      - with-app

volumes:
  kecs-data:
    driver: local
  kecs-dev-data:
    driver: local
  kecs-staging-data:
    driver: local

networks:
  default:
    name: kecs-network