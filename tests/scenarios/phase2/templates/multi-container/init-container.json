{
  "family": "init-container",
  "networkMode": "bridge",
  "requiresCompatibilities": ["EC2"],
  "cpu": "512",
  "memory": "1024",
  "containerDefinitions": [
    {
      "name": "init-db",
      "image": "alpine:latest",
      "cpu": 128,
      "memory": 256,
      "essential": false,
      "command": [
        "sh",
        "-c",
        "echo 'Initializing database schema...' && sleep 5 && echo 'CREATE TABLE users (id INT, name VARCHAR(100));' > /shared/schema.sql && echo 'INSERT INTO users VALUES (1, \"admin\");' >> /shared/schema.sql && echo 'Database initialization complete' && cat /shared/schema.sql"
      ],
      "mountPoints": [
        {
          "sourceVolume": "init-data",
          "containerPath": "/shared"
        }
      ],
      "logConfiguration": {
        "logDriver": "json-file",
        "options": {
          "max-size": "10m",
          "max-file": "3"
        }
      }
    },
    {
      "name": "init-config",
      "image": "alpine:latest",
      "cpu": 128,
      "memory": 256,
      "essential": false,
      "command": [
        "sh",
        "-c",
        "echo 'Generating configuration...' && echo '{\"database\": {\"host\": \"localhost\", \"port\": 5432, \"name\": \"myapp\"}, \"app\": {\"port\": 8080, \"env\": \"production\"}}' > /shared/config.json && echo 'Configuration generated' && cat /shared/config.json"
      ],
      "dependsOn": [
        {
          "containerName": "init-db",
          "condition": "SUCCESS"
        }
      ],
      "mountPoints": [
        {
          "sourceVolume": "init-data",
          "containerPath": "/shared"
        }
      ],
      "logConfiguration": {
        "logDriver": "json-file",
        "options": {
          "max-size": "10m",
          "max-file": "3"
        }
      }
    },
    {
      "name": "main-app",
      "image": "python:3.9-alpine",
      "cpu": 256,
      "memory": 512,
      "essential": true,
      "command": [
        "sh",
        "-c",
        "echo 'Waiting for initialization...' && sleep 10 && echo 'Starting main application' && echo 'from http.server import HTTPServer, SimpleHTTPRequestHandler\nimport json\nimport os\n\n# Read config\nwith open(\"/shared/config.json\", \"r\") as f:\n    config = json.load(f)\n\n# Read schema\nwith open(\"/shared/schema.sql\", \"r\") as f:\n    schema = f.read()\n\nprint(f\"Loaded config: {config}\", flush=True)\nprint(f\"Loaded schema: {schema}\", flush=True)\n\nclass Handler(SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"application/json\")\n        self.end_headers()\n        response = {\n            \"status\": \"running\",\n            \"config\": config,\n            \"schema_loaded\": bool(schema)\n        }\n        self.wfile.write(json.dumps(response).encode())\n\nprint(f\"Starting server on port {config[\"app\"][\"port\"]}\", flush=True)\nhttpd = HTTPServer((\"0.0.0.0\", config[\"app\"][\"port\"]), Handler)\nhttpd.serve_forever()' > app.py && python -u app.py"
      ],
      "portMappings": [
        {
          "containerPort": 8080,
          "protocol": "tcp"
        }
      ],
      "dependsOn": [
        {
          "containerName": "init-config",
          "condition": "SUCCESS"
        }
      ],
      "mountPoints": [
        {
          "sourceVolume": "init-data",
          "containerPath": "/shared",
          "readOnly": true
        }
      ],
      "healthCheck": {
        "command": ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"],
        "interval": 30,
        "timeout": 5,
        "retries": 3,
        "startPeriod": 30
      },
      "logConfiguration": {
        "logDriver": "json-file",
        "options": {
          "max-size": "10m",
          "max-file": "3"
        }
      }
    }
  ],
  "volumes": [
    {
      "name": "init-data",
      "host": {}
    }
  ]
}