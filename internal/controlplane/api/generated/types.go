// Code generated by cmd/codegen. DO NOT EDIT.

package generated
// ClusterServiceConnectDefaultsRequest <p>Use this parameter to set a default Service Connect namespace. After you set a default 
	Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as
	client services in the namespace. This setting only applies to new services that set the <code>enabled</code> parameter to
	<code>true</code> in the <code>ServiceConnectConfiguration</code>.
	You can set the namespace of each service individually in the <code>ServiceConnectConfiguration</code> to override this default
	parameter.</p>
         <p>Tasks that run in a namespace can use short names to connect
	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
	Tasks connect through a managed proxy container
	that collects logs and metrics for increased visibility.
	Only the tasks that Amazon ECS services create are supported with Service Connect.
	For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
type ClusterServiceConnectDefaultsRequest struct {
	// namespace <p>The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace that's used when you create a service and don't specify
			a Service Connect configuration. The namespace name can include up to 1024 characters.
			The name is case-sensitive. The name can't include greater than (>), less than
			(<), double quotation marks ("), or slash (/).</p>
         <p>If you enter an existing namespace name or ARN, then that namespace will be used.
			Any namespace type is supported. The namespace must be in this account and this Amazon Web Services
			Region.</p>
         <p>If you enter a new name, a Cloud Map namespace will be created. Amazon ECS creates a
			Cloud Map namespace with the "API calls" method of instance discovery only. This instance
			discovery method is the "HTTP" namespace type in the Command Line Interface. Other types of instance
			discovery aren't used by Service Connect.</p>
         <p>If you update the cluster with an empty string <code>""</code> for the namespace name,
			the cluster configuration for Service Connect is removed. Note that the namespace will
			remain in Cloud Map and must be deleted separately.</p>
         <p>For more information about Cloud Map, see <a href="https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html">Working with Services</a>
			in the <i>Cloud Map Developer Guide</i>.</p>
	namespace *string `json:"namespace"`
}
// CreateCapacityProviderRequest represents the CreateCapacityProviderRequest structure
type CreateCapacityProviderRequest struct {
	// name <p>The name of the capacity provider. Up to 255 characters are allowed. They include
			letters (both upper and lowercase letters), numbers, underscores (_), and hyphens (-).
			The name can't be prefixed with "<code>aws</code>", "<code>ecs</code>", or
				"<code>fargate</code>".</p>
	name *string `json:"name"`
	// autoScalingGroupProvider <p>The details of the Auto Scaling group for the capacity provider.</p>
	autoScalingGroupProvider *AutoScalingGroupProvider `json:"autoScalingGroupProvider"`
	// tags <p>The metadata that you apply to the capacity provider to categorize and organize them
			more conveniently. Each tag consists of a key and an optional value. You define both of
			them.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
}
// CreateCapacityProviderResponse represents the CreateCapacityProviderResponse structure
type CreateCapacityProviderResponse struct {
	// capacityProvider <p>The full description of the new capacity provider.</p>
	capacityProvider *CapacityProvider `json:"capacityProvider,omitempty"`
}
// CreateClusterRequest represents the CreateClusterRequest structure
type CreateClusterRequest struct {
	// tags <p>The metadata that you apply to the cluster to help you categorize and organize them.
			Each tag consists of a key and an optional value. You define both.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
	// settings <p>The setting to use when creating a cluster. This parameter is used to turn on CloudWatch
			Container Insights for a cluster. If this value is specified, it overrides the
				<code>containerInsights</code> value set with <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html">PutAccountSetting</a> or <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html">PutAccountSettingDefault</a>.</p>
	settings *ClusterSettings `json:"settings,omitempty"`
	// configuration <p>The <code>execute</code> command configuration for the cluster.</p>
	configuration *ClusterConfiguration `json:"configuration,omitempty"`
	// capacityProviders <p>The short name of one or more capacity providers to associate with the cluster. A
			capacity provider must be associated with a cluster before it can be included as part of
			the default capacity provider strategy of the cluster or used in a capacity provider
			strategy when calling the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html">CreateService</a> or
				<a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html">RunTask</a> actions.</p>
         <p>If specifying a capacity provider that uses an Auto Scaling group, the capacity
			provider must be created but not associated with another cluster. New Auto Scaling group
			capacity providers can be created with the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html">CreateCapacityProvider</a> API operation.</p>
         <p>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or
				<code>FARGATE_SPOT</code> capacity providers. The Fargate capacity providers are
			available to all accounts and only need to be associated with a cluster to be
			used.</p>
         <p>The <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html">PutCapacityProvider</a> API operation is used to update the list of available
			capacity providers for a cluster after the cluster is created.</p>
	capacityProviders *StringList `json:"capacityProviders,omitempty"`
	// defaultCapacityProviderStrategy <p>The capacity provider strategy to set as the default for the cluster. After a default
			capacity provider strategy is set for a cluster, when you call the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html">CreateService</a> or <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html">RunTask</a> APIs with no
			capacity provider strategy or launch type specified, the default capacity provider
			strategy for the cluster is used.</p>
         <p>If a default capacity provider strategy isn't defined for a cluster when it was
			created, it can be defined later with the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html">PutClusterCapacityProviders</a> API operation.</p>
	defaultCapacityProviderStrategy *CapacityProviderStrategy `json:"defaultCapacityProviderStrategy,omitempty"`
	// serviceConnectDefaults <p>Use this parameter to set a default Service Connect namespace. After you set a default 
	Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as
	client services in the namespace. This setting only applies to new services that set the <code>enabled</code> parameter to
	<code>true</code> in the <code>ServiceConnectConfiguration</code>.
	You can set the namespace of each service individually in the <code>ServiceConnectConfiguration</code> to override this default
	parameter.</p>
         <p>Tasks that run in a namespace can use short names to connect
	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
	Tasks connect through a managed proxy container
	that collects logs and metrics for increased visibility.
	Only the tasks that Amazon ECS services create are supported with Service Connect.
	For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	serviceConnectDefaults *ClusterServiceConnectDefaultsRequest `json:"serviceConnectDefaults,omitempty"`
	// clusterName <p>The name of your cluster. If you don't specify a name for your cluster, you create a
			cluster that's named <code>default</code>. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. </p>
	clusterName *string `json:"clusterName,omitempty"`
}
// CreateClusterResponse represents the CreateClusterResponse structure
type CreateClusterResponse struct {
	// cluster <p>The full description of your new cluster.</p>
	cluster *Cluster `json:"cluster,omitempty"`
}
// CreateServiceRequest represents the CreateServiceRequest structure
type CreateServiceRequest struct {
	// serviceName <p>The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within
			a cluster, but you can have similarly named services in multiple clusters within a
			Region or across multiple Regions.</p>
	serviceName *string `json:"serviceName"`
	// availabilityZoneRebalancing <p>Indicates whether to use Availability Zone rebalancing for the service.</p>
         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html">Balancing an Amazon ECS service across Availability Zones</a> in
			the <i>
               <i>Amazon Elastic Container Service Developer Guide</i>
            </i>.</p>
	availabilityZoneRebalancing *AvailabilityZoneRebalancing `json:"availabilityZoneRebalancing,omitempty"`
	// desiredCount <p>The number of instantiations of the specified task definition to place and keep
			running in your service.</p>
         <p>This is required if <code>schedulingStrategy</code> is <code>REPLICA</code> or isn't
			specified. If <code>schedulingStrategy</code> is <code>DAEMON</code> then this isn't
			required.</p>
	desiredCount *BoxedInteger `json:"desiredCount,omitempty"`
	// clientToken <p>An identifier that you provide to ensure the idempotency of the request. It must be
			unique and is case sensitive. Up to 36 ASCII characters in the range of 33-126 (inclusive) are allowed.</p>
	clientToken *string `json:"clientToken,omitempty"`
	// capacityProviderStrategy <p>The capacity provider strategy to use for the service.</p>
         <p>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
			parameter must be omitted. If no <code>capacityProviderStrategy</code> or
				<code>launchType</code> is specified, the
				<code>defaultCapacityProviderStrategy</code> for the cluster is used.</p>
         <p>A capacity provider strategy can contain a maximum of 20 capacity providers.</p>
	capacityProviderStrategy *CapacityProviderStrategy `json:"capacityProviderStrategy,omitempty"`
	// networkConfiguration <p>The network configuration for the service. This parameter is required for task
			definitions that use the <code>awsvpc</code> network mode to receive their own elastic
			network interface, and it isn't supported for other network modes. For more information,
			see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task networking</a>
			in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	networkConfiguration *NetworkConfiguration `json:"networkConfiguration,omitempty"`
	// propagateTags <p>Specifies whether to propagate the tags from the task definition to the task. If no
			value is specified, the tags aren't propagated. Tags can only be propagated to the task
			during task creation. To add tags to a task after task creation, use the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html">TagResource</a> API action.</p>
         <p>You must set this to a value other than <code>NONE</code> when you use Cost Explorer.
			For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html">Amazon ECS usage reports</a>
			in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>The default is <code>NONE</code>.</p>
	propagateTags *PropagateTags `json:"propagateTags,omitempty"`
	// taskDefinition <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
			full ARN of the task definition to run in your service. If a <code>revision</code>
			isn't specified, the latest <code>ACTIVE</code> revision is used.</p>
         <p>A task definition must be specified if the service uses either the <code>ECS</code> or
				<code>CODE_DEPLOY</code> deployment controllers.</p>
         <p>For more information about deployment types, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html">Amazon ECS deployment
				types</a>.</p>
	taskDefinition *string `json:"taskDefinition,omitempty"`
	// serviceRegistries <p>The details of the service discovery registry to associate with this service. For more
			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
				discovery</a>.</p>
         <note>
            <p>Each service may be associated with one service registry. Multiple service
				registries for each service isn't supported.</p>
         </note>
	serviceRegistries *ServiceRegistries `json:"serviceRegistries,omitempty"`
	// platformVersion <p>The platform version that your tasks in the service are running on. A platform version
			is specified only for tasks using the Fargate launch type. If one isn't
			specified, the <code>LATEST</code> platform version is used. For more information, see
				<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform
				versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	platformVersion *string `json:"platformVersion,omitempty"`
	// placementConstraints <p>An array of placement constraint objects to use for tasks in your service. You can
			specify a maximum of 10 constraints for each task. This limit includes constraints in
			the task definition and those specified at runtime.</p>
	placementConstraints *PlacementConstraints `json:"placementConstraints,omitempty"`
	// deploymentController <p>The deployment controller to use for the service. If no deployment controller is
			specified, the default value of <code>ECS</code> is used.</p>
	deploymentController *DeploymentController `json:"deploymentController,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on.
			If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// loadBalancers <p>A load balancer object representing the load balancers to use with your service. For
			more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html">Service load balancing</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>If the service uses the rolling update (<code>ECS</code>) deployment controller and
			using either an Application Load Balancer or Network Load Balancer, you must specify one or more target group ARNs to attach
			to the service. The service-linked role is required for services that use multiple
			target groups. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html">Using service-linked roles for Amazon ECS</a> in the
			<i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>If the service uses the <code>CODE_DEPLOY</code> deployment controller, the service is
			required to use either an Application Load Balancer or Network Load Balancer. When creating an CodeDeploy deployment group, you
			specify two target groups (referred to as a <code>targetGroupPair</code>). During a
			deployment, CodeDeploy determines which task set in your service has the status
				<code>PRIMARY</code>, and it associates one target group with it. Then, it also
			associates the other target group with the replacement task set. The load balancer can
			also have up to two listeners: a required listener for production traffic and an
			optional listener that you can use to perform validation tests with Lambda functions
			before routing production traffic to it.</p>
         <p>If you use the <code>CODE_DEPLOY</code> deployment controller, these values can be
			changed when updating the service.</p>
         <p>For Application Load Balancers and Network Load Balancers, this object must contain the load balancer target group ARN,
			the container name, and the container port to access from the load balancer. The
			container name must be as it appears in a container definition. The load balancer name
			parameter must be omitted. When a task from this service is placed on a container
			instance, the container instance and port combination is registered as a target in the
			target group that's specified here.</p>
         <p>For Classic Load Balancers, this object must contain the load balancer name, the container name , and
			the container port to access from the load balancer. The container name must be as it
			appears in a container definition. The target group ARN parameter must be omitted.
			When a task from this service is placed on a container instance, the container instance
			is registered with the load balancer that's specified here.</p>
         <p>Services with tasks that use the <code>awsvpc</code> network mode (for example, those
			with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers
			aren't supported. Also, when you create any target groups for these services, you must
			choose <code>ip</code> as the target type, not <code>instance</code>. This is because
			tasks that use the <code>awsvpc</code> network mode are associated with an elastic
			network interface, not an Amazon EC2 instance.</p>
	loadBalancers *LoadBalancers `json:"loadBalancers,omitempty"`
	// role <p>The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your
			load balancer on your behalf. This parameter is only permitted if you are using a load
			balancer with your service and your task definition doesn't use the <code>awsvpc</code>
			network mode. If you specify the <code>role</code> parameter, you must also specify a
			load balancer object with the <code>loadBalancers</code> parameter.</p>
         <important>
            <p>If your account has already created the Amazon ECS service-linked role, that role is
				used for your service unless you specify a role here. The service-linked role is
				required if your task definition uses the <code>awsvpc</code> network mode or if the
				service is configured to use service discovery, an external deployment controller,
				multiple target groups, or Elastic Inference accelerators in which case you don't
				specify a role here. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html">Using
					service-linked roles for Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         </important>
         <p>If your specified role has a path other than <code>/</code>, then you must either
			specify the full role ARN (this is recommended) or prefix the role name with the path.
			For example, if a role with the name <code>bar</code> has a path of <code>/foo/</code>
			then you would specify <code>/foo/bar</code> as the role name. For more information, see
				<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names">Friendly names and paths</a> in the <i>IAM User
			Guide</i>.</p>
	role *string `json:"role,omitempty"`
	// deploymentConfiguration <p>Optional deployment parameters that control how many tasks run during the deployment
			and the ordering of stopping and starting tasks.</p>
	deploymentConfiguration *DeploymentConfiguration `json:"deploymentConfiguration,omitempty"`
	// placementStrategy <p>The placement strategy objects to use for tasks in your service. You can specify a
			maximum of 5 strategy rules for each service.</p>
	placementStrategy *PlacementStrategies `json:"placementStrategy,omitempty"`
	// healthCheckGracePeriodSeconds <p>The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
			Elastic Load Balancing, VPC Lattice, and container health checks after a task has first started. If you don't
			specify a health check grace period value, the default value of <code>0</code> is used.
			If you don't use any of the health checks, then
				<code>healthCheckGracePeriodSeconds</code> is unused.</p>
         <p>If your service's tasks take a while to start and respond to health checks, you can
			specify a health check grace period of up to 2,147,483,647 seconds (about 69 years).
			During that time, the Amazon ECS service scheduler ignores health check status. This grace
			period can prevent the service scheduler from marking tasks as unhealthy and stopping
			them before they have time to come up.</p>
	healthCheckGracePeriodSeconds *BoxedInteger `json:"healthCheckGracePeriodSeconds,omitempty"`
	// tags <p>The metadata that you apply to the service to help you categorize and organize them.
			Each tag consists of a key and an optional value, both of which you define. When a
			service is deleted, the tags are deleted as well.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
	// enableECSManagedTags <p>Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For
			more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging your Amazon ECS
				resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>When you use Amazon ECS managed tags, you need to set the <code>propagateTags</code>
			request parameter.</p>
	enableECSManagedTags *bool `json:"enableECSManagedTags,omitempty"`
	// launchType <p>The infrastructure that you run your service on. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS
				launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>The <code>FARGATE</code> launch type runs your tasks on Fargate On-Demand
			infrastructure.</p>
         <note>
            <p>Fargate Spot infrastructure is available for use but a capacity provider
				strategy must be used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-capacity-providers.html">Fargate capacity providers</a> in the <i>Amazon ECS
					Developer Guide</i>.</p>
         </note>
         <p>The <code>EC2</code> launch type runs your tasks on Amazon EC2 instances registered to your
			cluster.</p>
         <p>The <code>EXTERNAL</code> launch type runs your tasks on your on-premises server or
			virtual machine (VM) capacity registered to your cluster.</p>
         <p>A service can use either a launch type or a capacity provider strategy. If a
				<code>launchType</code> is specified, the <code>capacityProviderStrategy</code>
			parameter must be omitted.</p>
	launchType *LaunchType `json:"launchType,omitempty"`
	// schedulingStrategy <p>The scheduling strategy to use for the service. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html">Services</a>.</p>
         <p>There are two service scheduler strategies available:</p>
         <ul>
            <li>
               <p>
                  <code>REPLICA</code>-The replica scheduling strategy places and
					maintains the desired number of tasks across your cluster. By default, the
					service scheduler spreads tasks across Availability Zones. You can use task
					placement strategies and constraints to customize task placement decisions. This
					scheduler strategy is required if the service uses the <code>CODE_DEPLOY</code>
					or <code>EXTERNAL</code> deployment controller types.</p>
            </li>
            <li>
               <p>
                  <code>DAEMON</code>-The daemon scheduling strategy deploys exactly one
					task on each active container instance that meets all of the task placement
					constraints that you specify in your cluster. The service scheduler also
					evaluates the task placement constraints for running tasks and will stop tasks
					that don't meet the placement constraints. When you're using this strategy, you
					don't need to specify a desired number of tasks, a task placement strategy, or
					use Service Auto Scaling policies.</p>
               <note>
                  <p>Tasks using the Fargate launch type or the
							<code>CODE_DEPLOY</code> or <code>EXTERNAL</code> deployment controller
						types don't support the <code>DAEMON</code> scheduling strategy.</p>
               </note>
            </li>
         </ul>
	schedulingStrategy *SchedulingStrategy `json:"schedulingStrategy,omitempty"`
	// enableExecuteCommand <p>Determines whether the execute command functionality is turned on for the service. If
				<code>true</code>, this enables execute command functionality on all containers in
			the service tasks.</p>
	enableExecuteCommand *bool `json:"enableExecuteCommand,omitempty"`
	// serviceConnectConfiguration <p>The configuration for this service to discover and connect to
	services, and be discovered by, and connected from, other services within a namespace.</p>
         <p>Tasks that run in a namespace can use short names to connect
	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
	Tasks connect through a managed proxy container
	that collects logs and metrics for increased visibility.
	Only the tasks that Amazon ECS services create are supported with Service Connect.
	For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	serviceConnectConfiguration *ServiceConnectConfiguration `json:"serviceConnectConfiguration,omitempty"`
	// volumeConfigurations <p>The configuration for a volume specified in the task definition as a volume that is
			configured at launch time. Currently, the only supported volume type is an Amazon EBS
			volume.</p>
	volumeConfigurations *ServiceVolumeConfigurations `json:"volumeConfigurations,omitempty"`
	// vpcLatticeConfigurations <p>The VPC Lattice configuration for the service being created.</p>
	vpcLatticeConfigurations *VpcLatticeConfigurations `json:"vpcLatticeConfigurations,omitempty"`
}
// CreateServiceResponse represents the CreateServiceResponse structure
type CreateServiceResponse struct {
	// service <p>The full description of your service following the create call.</p>
         <p>A service will return either a <code>capacityProviderStrategy</code> or
				<code>launchType</code> parameter, but not both, depending where one was specified
			when it was created.</p>
         <p>If a service is using the <code>ECS</code> deployment controller, the
				<code>deploymentController</code> and <code>taskSets</code> parameters will not be
			returned.</p>
         <p>if the service uses the <code>CODE_DEPLOY</code> deployment controller, the
				<code>deploymentController</code>, <code>taskSets</code> and
				<code>deployments</code> parameters will be returned, however the
				<code>deployments</code> parameter will be an empty list.</p>
	service *Service `json:"service,omitempty"`
}
// CreateTaskSetRequest represents the CreateTaskSetRequest structure
type CreateTaskSetRequest struct {
	// networkConfiguration <p>An object representing the network configuration for a task set.</p>
	networkConfiguration *NetworkConfiguration `json:"networkConfiguration,omitempty"`
	// launchType <p>The launch type that new tasks in the task set uses. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS
				launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>If a <code>launchType</code> is specified, the <code>capacityProviderStrategy</code>
			parameter must be omitted.</p>
	launchType *LaunchType `json:"launchType,omitempty"`
	// capacityProviderStrategy <p>The capacity provider strategy to use for the task set.</p>
         <p>A capacity provider strategy consists of one or more capacity providers along with the
				<code>base</code> and <code>weight</code> to assign to them. A capacity provider
			must be associated with the cluster to be used in a capacity provider strategy. The
				<a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html">PutClusterCapacityProviders</a> API is used to associate a capacity provider
			with a cluster. Only capacity providers with an <code>ACTIVE</code> or
				<code>UPDATING</code> status can be used.</p>
         <p>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
			parameter must be omitted. If no <code>capacityProviderStrategy</code> or
				<code>launchType</code> is specified, the
				<code>defaultCapacityProviderStrategy</code> for the cluster is used.</p>
         <p>If specifying a capacity provider that uses an Auto Scaling group, the capacity
			provider must already be created. New capacity providers can be created with the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProviderProvider.html">CreateCapacityProviderProvider</a>API operation.</p>
         <p>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or
				<code>FARGATE_SPOT</code> capacity providers. The Fargate capacity providers are
			available to all accounts and only need to be associated with a cluster to be
			used.</p>
         <p>The <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html">PutClusterCapacityProviders</a> API operation is used to update the list of
			available capacity providers for a cluster after the cluster is created.</p>
	capacityProviderStrategy *CapacityProviderStrategy `json:"capacityProviderStrategy,omitempty"`
	// scale <p>A floating-point percentage of the desired number of tasks to place and keep running
			in the task set.</p>
	scale *Scale `json:"scale,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the
			task set in.</p>
	cluster *string `json:"cluster"`
	// externalId <p>An optional non-unique tag that identifies this task set in external systems. If the
			task set is associated with a service discovery registry, the tasks in this task set
			will have the <code>ECS_TASK_SET_EXTERNAL_ID</code> Cloud Map attribute set to the provided
			value.</p>
	externalId *string `json:"externalId,omitempty"`
	// loadBalancers <p>A load balancer object representing the load balancer to use with the task set. The
			supported load balancer types are either an Application Load Balancer or a Network Load Balancer.</p>
	loadBalancers *LoadBalancers `json:"loadBalancers,omitempty"`
	// serviceRegistries <p>The details of the service discovery registries to assign to this task set. For more
			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
				discovery</a>.</p>
	serviceRegistries *ServiceRegistries `json:"serviceRegistries,omitempty"`
	// platformVersion <p>The platform version that the tasks in the task set uses. A platform version is
			specified only for tasks using the Fargate launch type. If one isn't
			specified, the <code>LATEST</code> platform version is used.</p>
	platformVersion *string `json:"platformVersion,omitempty"`
	// clientToken <p>An identifier that you provide to ensure the idempotency of the request. It must be
			unique and is case sensitive. Up to 36 ASCII characters in the range of 33-126 (inclusive) are allowed.</p>
	clientToken *string `json:"clientToken,omitempty"`
	// tags <p>The metadata that you apply to the task set to help you categorize and organize them.
			Each tag consists of a key and an optional value. You define both. When a service is
			deleted, the tags are deleted.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
	// service <p>The short name or full Amazon Resource Name (ARN) of the service to create the task set in.</p>
	service *string `json:"service"`
	// taskDefinition <p>The task definition for the tasks in the task set to use. If a revision isn't
			specified, the latest <code>ACTIVE</code> revision is used.</p>
	taskDefinition *string `json:"taskDefinition"`
}
// CreateTaskSetResponse represents the CreateTaskSetResponse structure
type CreateTaskSetResponse struct {
	// taskSet <p>Information about a set of Amazon ECS tasks in either an CodeDeploy or an
				<code>EXTERNAL</code> deployment. A task set includes details such as the desired
			number of tasks, how many tasks are running, and whether the task set serves production
			traffic.</p>
	taskSet *TaskSet `json:"taskSet,omitempty"`
}
// DeleteAccountSettingRequest represents the DeleteAccountSettingRequest structure
type DeleteAccountSettingRequest struct {
	// name <p>The resource name to disable the account setting for. If
				<code>serviceLongArnFormat</code> is specified, the ARN for your Amazon ECS services is
			affected. If <code>taskLongArnFormat</code> is specified, the ARN and resource ID for
			your Amazon ECS tasks is affected. If <code>containerInstanceLongArnFormat</code> is
			specified, the ARN and resource ID for your Amazon ECS container instances is affected. If
				<code>awsvpcTrunking</code> is specified, the ENI limit for your Amazon ECS container
			instances is affected.</p>
	name *SettingName `json:"name"`
	// principalArn <p>The Amazon Resource Name (ARN) of the principal. It can be a user, role, or the
			root user. If you specify the root user, it disables the account setting for all users, roles,
			and the root user of the account unless a user or role explicitly overrides these settings.
			If this field is omitted, the setting is changed only for the authenticated user.</p>
         <p>In order to use this parameter, you must be the root user, or the principal.</p>
	principalArn *string `json:"principalArn,omitempty"`
}
// DeleteAccountSettingResponse represents the DeleteAccountSettingResponse structure
type DeleteAccountSettingResponse struct {
	// setting <p>The account setting for the specified principal ARN.</p>
	setting *Setting `json:"setting,omitempty"`
}
// DeleteAttributesRequest represents the DeleteAttributesRequest structure
type DeleteAttributesRequest struct {
	// attributes <p>The attributes to delete from your resource. You can specify up to 10 attributes for
			each request. For custom attributes, specify the attribute name and target ID, but don't
			specify the value. If you specify the target ID using the short form, you must also
			specify the target type.</p>
	attributes *Attributes `json:"attributes"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to delete
			attributes. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
}
// DeleteAttributesResponse represents the DeleteAttributesResponse structure
type DeleteAttributesResponse struct {
	// attributes <p>A list of attribute objects that were successfully deleted from your resource.</p>
	attributes *Attributes `json:"attributes,omitempty"`
}
// DeleteCapacityProviderRequest represents the DeleteCapacityProviderRequest structure
type DeleteCapacityProviderRequest struct {
	// capacityProvider <p>The short name or full Amazon Resource Name (ARN) of the capacity provider to delete.</p>
	capacityProvider *string `json:"capacityProvider"`
}
// DeleteCapacityProviderResponse represents the DeleteCapacityProviderResponse structure
type DeleteCapacityProviderResponse struct {
	// capacityProvider <p>The details of the capacity provider.</p>
	capacityProvider *CapacityProvider `json:"capacityProvider,omitempty"`
}
// DeleteClusterRequest represents the DeleteClusterRequest structure
type DeleteClusterRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster to delete.</p>
	cluster *string `json:"cluster"`
}
// DeleteClusterResponse represents the DeleteClusterResponse structure
type DeleteClusterResponse struct {
	// cluster <p>The full description of the deleted cluster.</p>
	cluster *Cluster `json:"cluster,omitempty"`
}
// DeleteServiceRequest represents the DeleteServiceRequest structure
type DeleteServiceRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to delete.
			If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// service <p>The name of the service to delete.</p>
	service *string `json:"service"`
	// force <p>If <code>true</code>, allows you to delete a service even if it wasn't scaled down to
			zero tasks. It's only necessary to use this if the service uses the <code>REPLICA</code>
			scheduling strategy.</p>
	force *BoxedBoolean `json:"force,omitempty"`
}
// DeleteServiceResponse represents the DeleteServiceResponse structure
type DeleteServiceResponse struct {
	// service <p>The full description of the deleted service.</p>
	service *Service `json:"service,omitempty"`
}
// DeleteTaskDefinitionsRequest represents the DeleteTaskDefinitionsRequest structure
type DeleteTaskDefinitionsRequest struct {
	// taskDefinitions <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
			full Amazon Resource Name (ARN) of the task definition to delete. You must specify a
				<code>revision</code>.</p>
         <p>You can specify up to 10 task definitions as a comma separated list.</p>
	taskDefinitions *StringList `json:"taskDefinitions"`
}
// DeleteTaskDefinitionsResponse represents the DeleteTaskDefinitionsResponse structure
type DeleteTaskDefinitionsResponse struct {
	// taskDefinitions <p>The list of deleted task definitions.</p>
	taskDefinitions *TaskDefinitionList `json:"taskDefinitions,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DeleteTaskSetRequest represents the DeleteTaskSetRequest structure
type DeleteTaskSetRequest struct {
	// taskSet <p>The task set ID or full Amazon Resource Name (ARN) of the task set to delete.</p>
	taskSet *string `json:"taskSet"`
	// force <p>If <code>true</code>, you can delete a task set even if it hasn't been scaled down to
			zero.</p>
	force *BoxedBoolean `json:"force,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
			set found in to delete.</p>
	cluster *string `json:"cluster"`
	// service <p>The short name or full Amazon Resource Name (ARN) of the service that hosts the task set to
			delete.</p>
	service *string `json:"service"`
}
// DeleteTaskSetResponse represents the DeleteTaskSetResponse structure
type DeleteTaskSetResponse struct {
	// taskSet <p>Details about the task set.</p>
	taskSet *TaskSet `json:"taskSet,omitempty"`
}
// DeregisterContainerInstanceRequest represents the DeregisterContainerInstanceRequest structure
type DeregisterContainerInstanceRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to
			deregister. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// containerInstance <p>The container instance ID or full ARN of the container instance to deregister. For
			more information about the ARN format, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids">Amazon Resource Name (ARN)</a> in the <i>Amazon ECS Developer Guide</i>.</p>
	containerInstance *string `json:"containerInstance"`
	// force <p>Forces the container instance to be deregistered. If you have tasks running on the
			container instance when you deregister it with the <code>force</code> option, these
			tasks remain running until you terminate the instance or the tasks stop through some
			other means, but they're orphaned (no longer monitored or accounted for by Amazon ECS). If an
			orphaned task on your container instance is part of an Amazon ECS service, then the service
			scheduler starts another copy of that task, on a different container instance if
			possible. </p>
         <p>Any containers in orphaned service tasks that are registered with a Classic Load Balancer or an Application Load Balancer
			target group are deregistered. They begin connection draining according to the settings
			on the load balancer or target group.</p>
	force *BoxedBoolean `json:"force,omitempty"`
}
// DeregisterContainerInstanceResponse represents the DeregisterContainerInstanceResponse structure
type DeregisterContainerInstanceResponse struct {
	// containerInstance <p>The container instance that was deregistered.</p>
	containerInstance *ContainerInstance `json:"containerInstance,omitempty"`
}
// DeregisterTaskDefinitionRequest represents the DeregisterTaskDefinitionRequest structure
type DeregisterTaskDefinitionRequest struct {
	// taskDefinition <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
			full Amazon Resource Name (ARN) of the task definition to deregister. You must specify a
				<code>revision</code>.</p>
	taskDefinition *string `json:"taskDefinition"`
}
// DeregisterTaskDefinitionResponse represents the DeregisterTaskDefinitionResponse structure
type DeregisterTaskDefinitionResponse struct {
	// taskDefinition <p>The full description of the deregistered task.</p>
	taskDefinition *TaskDefinition `json:"taskDefinition,omitempty"`
}
// DescribeCapacityProvidersRequest represents the DescribeCapacityProvidersRequest structure
type DescribeCapacityProvidersRequest struct {
	// include <p>Specifies whether or not you want to see the resource tags for the capacity provider.
			If <code>TAGS</code> is specified, the tags are included in the response. If this field
			is omitted, tags aren't included in the response.</p>
	include *CapacityProviderFieldList `json:"include,omitempty"`
	// maxResults <p>The maximum number of account setting results returned by
				<code>DescribeCapacityProviders</code> in paginated output. When this parameter is
			used, <code>DescribeCapacityProviders</code> only returns <code>maxResults</code>
			results in a single page along with a <code>nextToken</code> response element. The
			remaining results of the initial request can be seen by sending another
				<code>DescribeCapacityProviders</code> request with the returned
				<code>nextToken</code> value. This value can be between
			1 and 10. If this
			parameter is not used, then <code>DescribeCapacityProviders</code> returns up to
			10 results and a <code>nextToken</code> value
			if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a previous paginated
				<code>DescribeCapacityProviders</code> request where <code>maxResults</code> was
			used and the results exceeded the value of that parameter. Pagination continues from the
			end of the previous results that returned the <code>nextToken</code> value.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// capacityProviders <p>The short name or full Amazon Resource Name (ARN) of one or more capacity providers. Up to
				<code>100</code> capacity providers can be described in an action.</p>
	capacityProviders *StringList `json:"capacityProviders,omitempty"`
}
// DescribeCapacityProvidersResponse represents the DescribeCapacityProvidersResponse structure
type DescribeCapacityProvidersResponse struct {
	// capacityProviders <p>The list of capacity providers.</p>
	capacityProviders *CapacityProviders `json:"capacityProviders,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future
				<code>DescribeCapacityProviders</code> request. When the results of a
				<code>DescribeCapacityProviders</code> request exceed <code>maxResults</code>, this
			value can be used to retrieve the next page of results. This value is <code>null</code>
			when there are no more results to return.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// DescribeClustersRequest represents the DescribeClustersRequest structure
type DescribeClustersRequest struct {
	// clusters <p>A list of up to 100 cluster names or full cluster Amazon Resource Name (ARN) entries.
			If you do not specify a cluster, the default cluster is assumed.</p>
	clusters *StringList `json:"clusters,omitempty"`
	// include <p>Determines whether to include additional information about the clusters in the
			response. If this field is omitted, this information isn't included.</p>
         <p>If <code>ATTACHMENTS</code> is specified, the attachments for the container instances
			or tasks within the cluster are included, for example the capacity providers.</p>
         <p>If <code>SETTINGS</code> is specified, the settings for the cluster are
			included.</p>
         <p>If <code>CONFIGURATIONS</code> is specified, the configuration for the cluster is
			included.</p>
         <p>If <code>STATISTICS</code> is specified, the task and service count is included,
			separated by launch type.</p>
         <p>If <code>TAGS</code> is specified, the metadata tags associated with the cluster are
			included.</p>
	include *ClusterFieldList `json:"include,omitempty"`
}
// DescribeClustersResponse represents the DescribeClustersResponse structure
type DescribeClustersResponse struct {
	// clusters <p>The list of clusters.</p>
	clusters *Clusters `json:"clusters,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DescribeContainerInstancesRequest represents the DescribeContainerInstancesRequest structure
type DescribeContainerInstancesRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to
			describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the container instance
			or container instances you are describing were launched in any cluster other than the
			default cluster.</p>
	cluster *string `json:"cluster,omitempty"`
	// containerInstances <p>A list of up to 100 container instance IDs or full Amazon Resource Name (ARN) entries.</p>
	containerInstances *StringList `json:"containerInstances"`
	// include <p>Specifies whether you want to see the resource tags for the container instance. If
				<code>TAGS</code> is specified, the tags are included in the response. If
				<code>CONTAINER_INSTANCE_HEALTH</code> is specified, the container instance health
			is included in the response. If this field is omitted, tags and container instance
			health status aren't included in the response.</p>
	include *ContainerInstanceFieldList `json:"include,omitempty"`
}
// DescribeContainerInstancesResponse represents the DescribeContainerInstancesResponse structure
type DescribeContainerInstancesResponse struct {
	// containerInstances <p>The list of container instances.</p>
	containerInstances *ContainerInstances `json:"containerInstances,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DescribeServiceDeploymentsRequest represents the DescribeServiceDeploymentsRequest structure
type DescribeServiceDeploymentsRequest struct {
	// serviceDeploymentArns <p>The ARN of the service deployment.</p>
         <p>You can specify a maximum of 20 ARNs.</p>
	serviceDeploymentArns *StringList `json:"serviceDeploymentArns"`
}
// DescribeServiceDeploymentsResponse represents the DescribeServiceDeploymentsResponse structure
type DescribeServiceDeploymentsResponse struct {
	// serviceDeployments <p>The list of service deployments described.</p>
	serviceDeployments *ServiceDeployments `json:"serviceDeployments,omitempty"`
	// failures <p>Any failures associated with the call.</p>
         <p>If you decsribe a deployment with a service revision created before October 25, 2024,
			the call fails. The failure includes the service revision ARN and the reason set to
				<code>MISSING</code>.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DescribeServiceRevisionsRequest represents the DescribeServiceRevisionsRequest structure
type DescribeServiceRevisionsRequest struct {
	// serviceRevisionArns <p>The ARN of the service revision. </p>
         <p>You can specify a maximum of 20 ARNs.</p>
         <p>You can call <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListServiceDeployments.html">ListServiceDeployments</a> to get the ARNs.</p>
	serviceRevisionArns *StringList `json:"serviceRevisionArns"`
}
// DescribeServiceRevisionsResponse represents the DescribeServiceRevisionsResponse structure
type DescribeServiceRevisionsResponse struct {
	// serviceRevisions <p>The list of service revisions described.</p>
	serviceRevisions *ServiceRevisions `json:"serviceRevisions,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DescribeServicesRequest represents the DescribeServicesRequest structure
type DescribeServicesRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN)the cluster that hosts the service to describe.
			If you do not specify a cluster, the default cluster is assumed. This parameter is required if the service or services you are
			describing were launched in any cluster other than the default cluster.</p>
	cluster *string `json:"cluster,omitempty"`
	// services <p>A list of services to describe. You may specify up to 10 services to describe in a
			single operation.</p>
	services *StringList `json:"services"`
	// include <p>Determines whether you want to see the resource tags for the service. If
				<code>TAGS</code> is specified, the tags are included in the response. If this field
			is omitted, tags aren't included in the response.</p>
	include *ServiceFieldList `json:"include,omitempty"`
}
// DescribeServicesResponse represents the DescribeServicesResponse structure
type DescribeServicesResponse struct {
	// services <p>The list of services described.</p>
	services *Services `json:"services,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DescribeTaskDefinitionRequest represents the DescribeTaskDefinitionRequest structure
type DescribeTaskDefinitionRequest struct {
	// taskDefinition <p>The <code>family</code> for the latest <code>ACTIVE</code> revision,
				<code>family</code> and <code>revision</code> (<code>family:revision</code>) for a
			specific revision in the family, or full Amazon Resource Name (ARN) of the task definition to
			describe.</p>
	taskDefinition *string `json:"taskDefinition"`
	// include <p>Determines whether to see the resource tags for the task definition. If
				<code>TAGS</code> is specified, the tags are included in the response. If this field
			is omitted, tags aren't included in the response.</p>
	include *TaskDefinitionFieldList `json:"include,omitempty"`
}
// DescribeTaskDefinitionResponse represents the DescribeTaskDefinitionResponse structure
type DescribeTaskDefinitionResponse struct {
	// taskDefinition <p>The full task definition description.</p>
	taskDefinition *TaskDefinition `json:"taskDefinition,omitempty"`
	// tags <p>The metadata that's applied to the task definition to help you categorize and organize
			them. Each tag consists of a key and an optional value. You define both.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
}
// DescribeTaskSetsRequest represents the DescribeTaskSetsRequest structure
type DescribeTaskSetsRequest struct {
	// service <p>The short name or full Amazon Resource Name (ARN) of the service that the task sets exist in.</p>
	service *string `json:"service"`
	// taskSets <p>The ID or full Amazon Resource Name (ARN) of task sets to
			describe.</p>
	taskSets *StringList `json:"taskSets,omitempty"`
	// include <p>Specifies whether to see the resource tags for the task set. If <code>TAGS</code> is
			specified, the tags are included in the response. If this field is omitted, tags aren't
			included in the response.</p>
	include *TaskSetFieldList `json:"include,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
			sets exist in.</p>
	cluster *string `json:"cluster"`
}
// DescribeTaskSetsResponse represents the DescribeTaskSetsResponse structure
type DescribeTaskSetsResponse struct {
	// taskSets <p>The list of task sets described.</p>
	taskSets *TaskSets `json:"taskSets,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DescribeTasksRequest represents the DescribeTasksRequest structure
type DescribeTasksRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task or tasks to
			describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required. If you do not specify a
			value, the <code>default</code> cluster is used.</p>
	cluster *string `json:"cluster,omitempty"`
	// tasks <p>A list of up to 100 task IDs or full ARN entries.</p>
	tasks *StringList `json:"tasks"`
	// include <p>Specifies whether you want to see the resource tags for the task. If <code>TAGS</code>
			is specified, the tags are included in the response. If this field is omitted, tags
			aren't included in the response.</p>
	include *TaskFieldList `json:"include,omitempty"`
}
// DescribeTasksResponse represents the DescribeTasksResponse structure
type DescribeTasksResponse struct {
	// tasks <p>The list of tasks.</p>
	tasks *Tasks `json:"tasks,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// DiscoverPollEndpointRequest represents the DiscoverPollEndpointRequest structure
type DiscoverPollEndpointRequest struct {
	// containerInstance <p>The container instance ID or full ARN of the container instance. For more
			information about the ARN format, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids">Amazon Resource Name (ARN)</a> in the <i>Amazon ECS Developer Guide</i>.</p>
	containerInstance *string `json:"containerInstance,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that the container instance belongs
			to.</p>
	cluster *string `json:"cluster,omitempty"`
}
// DiscoverPollEndpointResponse represents the DiscoverPollEndpointResponse structure
type DiscoverPollEndpointResponse struct {
	// telemetryEndpoint <p>The telemetry endpoint for the Amazon ECS agent.</p>
	telemetryEndpoint *string `json:"telemetryEndpoint,omitempty"`
	// serviceConnectEndpoint <p>The endpoint for the Amazon ECS agent to poll for Service Connect configuration.
			For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	serviceConnectEndpoint *string `json:"serviceConnectEndpoint,omitempty"`
	// endpoint <p>The endpoint for the Amazon ECS agent to poll.</p>
	endpoint *string `json:"endpoint,omitempty"`
}
// ExecuteCommandRequest represents the ExecuteCommandRequest structure
type ExecuteCommandRequest struct {
	// cluster <p>The Amazon Resource Name (ARN) or short name of the cluster the task is running in.
			If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// container <p>The name of the container to execute the command on. A container name only needs to be
			specified for tasks containing multiple containers.</p>
	container *string `json:"container,omitempty"`
	// command <p>The command to run on the container.</p>
	command *string `json:"command"`
	// interactive <p>Use this flag to run your command in interactive mode.</p>
	interactive *bool `json:"interactive"`
	// task <p>The Amazon Resource Name (ARN) or ID of the task the container is part of.</p>
	task *string `json:"task"`
}
// ExecuteCommandResponse represents the ExecuteCommandResponse structure
type ExecuteCommandResponse struct {
	// clusterArn <p>The Amazon Resource Name (ARN) of the cluster.</p>
	clusterArn *string `json:"clusterArn,omitempty"`
	// containerArn <p>The Amazon Resource Name (ARN) of the container.</p>
	containerArn *string `json:"containerArn,omitempty"`
	// containerName <p>The name of the container.</p>
	containerName *string `json:"containerName,omitempty"`
	// interactive <p>Determines whether the execute command session is running in interactive mode. Amazon ECS
			only supports initiating interactive sessions, so you must specify <code>true</code> for
			this value.</p>
	interactive *bool `json:"interactive,omitempty"`
	// session <p>The details of the SSM session that was created for this instance of
			execute-command.</p>
	session *Session `json:"session,omitempty"`
	// taskArn <p>The Amazon Resource Name (ARN) of the task.</p>
	taskArn *string `json:"taskArn,omitempty"`
}
// GetTaskProtectionRequest represents the GetTaskProtectionRequest structure
type GetTaskProtectionRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
			sets exist in.</p>
	cluster *string `json:"cluster"`
	// tasks <p>A list of up to 100 task IDs or full ARN entries.</p>
	tasks *StringList `json:"tasks,omitempty"`
}
// GetTaskProtectionResponse represents the GetTaskProtectionResponse structure
type GetTaskProtectionResponse struct {
	// protectedTasks <p>A list of tasks with the following information.</p>
         <ul>
            <li>
               <p>
                  <code>taskArn</code>: The task ARN.</p>
            </li>
            <li>
               <p>
                  <code>protectionEnabled</code>: The protection status of the task. If scale-in
					protection is turned on for a task, the value is <code>true</code>. Otherwise,
					it is <code>false</code>.</p>
            </li>
            <li>
               <p>
                  <code>expirationDate</code>: The epoch time when protection for the task will
					expire.</p>
            </li>
         </ul>
	protectedTasks *ProtectedTasks `json:"protectedTasks,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// ListAccountSettingsRequest represents the ListAccountSettingsRequest structure
type ListAccountSettingsRequest struct {
	// maxResults <p>The maximum number of account setting results returned by
				<code>ListAccountSettings</code> in paginated output. When this parameter is used,
				<code>ListAccountSettings</code> only returns <code>maxResults</code> results in a
			single page along with a <code>nextToken</code> response element. The remaining results
			of the initial request can be seen by sending another <code>ListAccountSettings</code>
			request with the returned <code>nextToken</code> value. This value can be between
			1 and 10. If this
			parameter isn't used, then <code>ListAccountSettings</code> returns up to
			10 results and a <code>nextToken</code> value
			if applicable.</p>
	maxResults *int32 `json:"maxResults,omitempty"`
	// name <p>The name of the account setting you want to list the settings for.</p>
	name *SettingName `json:"name,omitempty"`
	// value <p>The value of the account settings to filter results with. You must also specify an
			account setting name to use this parameter.</p>
	value *string `json:"value,omitempty"`
	// principalArn <p>The ARN of the principal, which can be a user, role, or the root user. If this field is
			omitted, the account settings are listed only for the authenticated user.</p>
         <p>In order to use this parameter, you must be the root user, or the principal.</p>
         <note>
            <p>Federated users assume the account setting of the root user and can't have explicit
				account settings set for them.</p>
         </note>
	principalArn *string `json:"principalArn,omitempty"`
	// effectiveSettings <p>Determines whether to return the effective settings. If <code>true</code>, the account
			settings for the root user or the default setting for the <code>principalArn</code> are
			returned. If <code>false</code>, the account settings for the <code>principalArn</code>
			are returned if they're set. Otherwise, no account settings are returned.</p>
	effectiveSettings *bool `json:"effectiveSettings,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListAccountSettings</code>
			request indicating that more results are available to fulfill the request and further
			calls will be needed. If <code>maxResults</code> was provided, it's possible the number
			of results to be fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
}
// ListAccountSettingsResponse represents the ListAccountSettingsResponse structure
type ListAccountSettingsResponse struct {
	// settings <p>The account settings for the resource.</p>
	settings *Settings `json:"settings,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future
				<code>ListAccountSettings</code> request. When the results of a
				<code>ListAccountSettings</code> request exceed <code>maxResults</code>, this value
			can be used to retrieve the next page of results. This value is <code>null</code> when
			there are no more results to return.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// ListAttributesRequest represents the ListAttributesRequest structure
type ListAttributesRequest struct {
	// targetType <p>The type of the target to list attributes with.</p>
	targetType *TargetType `json:"targetType"`
	// attributeName <p>The name of the attribute to filter the results with. </p>
	attributeName *string `json:"attributeName,omitempty"`
	// attributeValue <p>The value of the attribute to filter results with. You must also specify an attribute
			name to use this parameter.</p>
	attributeValue *string `json:"attributeValue,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListAttributes</code> request
			indicating that more results are available to fulfill the request and further calls are
			needed. If <code>maxResults</code> was provided, it's possible the number of results to
			be fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of cluster results that <code>ListAttributes</code> returned in
			paginated output. When this parameter is used, <code>ListAttributes</code> only returns
				<code>maxResults</code> results in a single page along with a <code>nextToken</code>
			response element. The remaining results of the initial request can be seen by sending
			another <code>ListAttributes</code> request with the returned <code>nextToken</code>
			value. This value can be between 1 and 100. If this
			parameter isn't used, then <code>ListAttributes</code> returns up to
			100 results and a <code>nextToken</code> value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster to list attributes.
			If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
}
// ListAttributesResponse represents the ListAttributesResponse structure
type ListAttributesResponse struct {
	// nextToken <p>The <code>nextToken</code> value to include in a future <code>ListAttributes</code>
			request. When the results of a <code>ListAttributes</code> request exceed
				<code>maxResults</code>, this value can be used to retrieve the next page of
			results. This value is <code>null</code> when there are no more results to
			return.</p>
	nextToken *string `json:"nextToken,omitempty"`
	// attributes <p>A list of attribute objects that meet the criteria of the request.</p>
	attributes *Attributes `json:"attributes,omitempty"`
}
// ListClustersRequest represents the ListClustersRequest structure
type ListClustersRequest struct {
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListClusters</code> request
			indicating that more results are available to fulfill the request and further calls are
			needed. If <code>maxResults</code> was provided, it's possible the number of results to
			be fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of cluster results that <code>ListClusters</code> returned in
			paginated output. When this parameter is used, <code>ListClusters</code> only returns
				<code>maxResults</code> results in a single page along with a <code>nextToken</code>
			response element. The remaining results of the initial request can be seen by sending
			another <code>ListClusters</code> request with the returned <code>nextToken</code>
			value. This value can be between 1 and 100. If this
			parameter isn't used, then <code>ListClusters</code> returns up to 100
			results and a <code>nextToken</code> value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
}
// ListClustersResponse represents the ListClustersResponse structure
type ListClustersResponse struct {
	// nextToken <p>The <code>nextToken</code> value to include in a future <code>ListClusters</code>
			request. When the results of a <code>ListClusters</code> request exceed
				<code>maxResults</code>, this value can be used to retrieve the next page of
			results. This value is <code>null</code> when there are no more results to
			return.</p>
	nextToken *string `json:"nextToken,omitempty"`
	// clusterArns <p>The list of full Amazon Resource Name (ARN) entries for each cluster that's associated with your
			account.</p>
	clusterArns *StringList `json:"clusterArns,omitempty"`
}
// ListContainerInstancesRequest represents the ListContainerInstancesRequest structure
type ListContainerInstancesRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to
			list. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// filter <p>You can filter the results of a <code>ListContainerInstances</code> operation with
			cluster query language statements. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html">Cluster Query Language</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	filter *string `json:"filter,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListContainerInstances</code>
			request indicating that more results are available to fulfill the request and further
			calls are needed. If <code>maxResults</code> was provided, it's possible the number of
			results to be fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of container instance results that
				<code>ListContainerInstances</code> returned in paginated output. When this
			parameter is used, <code>ListContainerInstances</code> only returns
				<code>maxResults</code> results in a single page along with a <code>nextToken</code>
			response element. The remaining results of the initial request can be seen by sending
			another <code>ListContainerInstances</code> request with the returned
				<code>nextToken</code> value. This value can be between 1 and
			100. If this parameter isn't used, then
				<code>ListContainerInstances</code> returns up to 100 results and
			a <code>nextToken</code> value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
	// status <p>Filters the container instances by status. For example, if you specify the
				<code>DRAINING</code> status, the results include only container instances that have
			been set to <code>DRAINING</code> using <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_UpdateContainerInstancesState.html">UpdateContainerInstancesState</a>. If you don't specify this parameter, the
			default is to include container instances set to all states other than
				<code>INACTIVE</code>.</p>
	status *ContainerInstanceStatus `json:"status,omitempty"`
}
// ListContainerInstancesResponse represents the ListContainerInstancesResponse structure
type ListContainerInstancesResponse struct {
	// containerInstanceArns <p>The list of container instances with full ARN entries for each container instance
			associated with the specified cluster.</p>
	containerInstanceArns *StringList `json:"containerInstanceArns,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future
				<code>ListContainerInstances</code> request. When the results of a
				<code>ListContainerInstances</code> request exceed <code>maxResults</code>, this
			value can be used to retrieve the next page of results. This value is <code>null</code>
			when there are no more results to return.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// ListServiceDeploymentsRequest represents the ListServiceDeploymentsRequest structure
type ListServiceDeploymentsRequest struct {
	// service <p>The ARN or name of the service</p>
	service *string `json:"service"`
	// cluster <p>The cluster that hosts the service. This can either be the cluster name or ARN.
			Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon
			Elastic Inference (EI), and will help current customers migrate their workloads to
			options that offer better price and performance. If you don't specify a cluster,
				<code>default</code> is used.</p>
	cluster *string `json:"cluster,omitempty"`
	// status <p>An optional filter you can use to narrow the results. If you do not specify a status,
			then all status values are included in the result.</p>
	status *ServiceDeploymentStatusList `json:"status,omitempty"`
	// createdAt <p>An optional filter you can use to narrow the results by the service creation date. If
			you do not specify a value, the result includes all services created before the current
			time. The format is yyyy-MM-dd HH:mm:ss.SSSSSS.</p>
	createdAt *CreatedAt `json:"createdAt,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListServiceDeployments</code>
			request indicating that more results are available to fulfill the request and further
			calls are needed. If you provided <code>maxResults</code>, it's possible the number of
			results is fewer than <code>maxResults</code>.</p>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of service deployment results that
				<code>ListServiceDeployments</code> returned in paginated output. When this
			parameter is used, <code>ListServiceDeployments</code> only returns
				<code>maxResults</code> results in a single page along with a <code>nextToken</code>
			response element. The remaining results of the initial request can be seen by sending
			another <code>ListServiceDeployments</code> request with the returned
				<code>nextToken</code> value. This value can be between 1 and 100. If this parameter
			isn't used, then <code>ListServiceDeployments</code> returns up to 20 results and a
				<code>nextToken</code> value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
}
// ListServiceDeploymentsResponse represents the ListServiceDeploymentsResponse structure
type ListServiceDeploymentsResponse struct {
	// nextToken <p>The <code>nextToken</code> value to include in a future
				<code>ListServiceDeployments</code> request. When the results of a
				<code>ListServiceDeployments</code> request exceed <code>maxResults</code>, this
			value can be used to retrieve the next page of results. This value is null when there
			are no more results to return.</p>
	nextToken *string `json:"nextToken,omitempty"`
	// serviceDeployments <p>An overview of the service deployment, including the following properties:</p>
         <ul>
            <li>
               <p>The ARN of the service deployment.</p>
            </li>
            <li>
               <p>The ARN of the service being deployed.</p>
            </li>
            <li>
               <p>The ARN of the cluster that hosts the service in the service
					deployment.</p>
            </li>
            <li>
               <p>The time that the service deployment started.</p>
            </li>
            <li>
               <p>The time that the service deployment completed.</p>
            </li>
            <li>
               <p>The service deployment status.</p>
            </li>
            <li>
               <p>Information about why the service deployment is in the current state.</p>
            </li>
            <li>
               <p>The ARN of the service revision that is being deployed.</p>
            </li>
         </ul>
	serviceDeployments *ServiceDeploymentsBrief `json:"serviceDeployments,omitempty"`
}
// ListServicesByNamespaceRequest represents the ListServicesByNamespaceRequest structure
type ListServicesByNamespaceRequest struct {
	// namespace <p>The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace to list the services in.</p>
         <p>Tasks that run in a namespace can use short names to connect
	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
	Tasks connect through a managed proxy container
	that collects logs and metrics for increased visibility.
	Only the tasks that Amazon ECS services create are supported with Service Connect.
	For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	namespace *string `json:"namespace"`
	// nextToken <p>The <code>nextToken</code> value that's returned from a
				<code>ListServicesByNamespace</code> request. It indicates that more results are
			available to fulfill the request and further calls are needed. If
				<code>maxResults</code> is returned, it is possible the number of results is less
			than <code>maxResults</code>.</p>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of service results that <code>ListServicesByNamespace</code>
			returns in paginated output. When this parameter is used,
				<code>ListServicesByNamespace</code> only returns <code>maxResults</code> results in
			a single page along with a <code>nextToken</code> response element. The remaining
			results of the initial request can be seen by sending another
				<code>ListServicesByNamespace</code> request with the returned
				<code>nextToken</code> value. This value can be between 1 and
			100. If this parameter isn't used, then
				<code>ListServicesByNamespace</code> returns up to
			10 results and a <code>nextToken</code>
			value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
}
// ListServicesByNamespaceResponse represents the ListServicesByNamespaceResponse structure
type ListServicesByNamespaceResponse struct {
	// serviceArns <p>The list of full ARN entries for each service that's associated with the specified
			namespace.</p>
	serviceArns *StringList `json:"serviceArns,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future
				<code>ListServicesByNamespace</code> request. When the results of a
				<code>ListServicesByNamespace</code> request exceed <code>maxResults</code>, this
			value can be used to retrieve the next page of results. When there are no more results
			to return, this value is <code>null</code>.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// ListServicesRequest represents the ListServicesRequest structure
type ListServicesRequest struct {
	// launchType <p>The launch type to use when filtering the <code>ListServices</code> results.</p>
	launchType *LaunchType `json:"launchType,omitempty"`
	// schedulingStrategy <p>The scheduling strategy to use when filtering the <code>ListServices</code>
			results.</p>
	schedulingStrategy *SchedulingStrategy `json:"schedulingStrategy,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering the
				<code>ListServices</code> results. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListServices</code> request
			indicating that more results are available to fulfill the request and further calls will
			be needed. If <code>maxResults</code> was provided, it is possible the number of results
			to be fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of service results that <code>ListServices</code> returned in
			paginated output. When this parameter is used, <code>ListServices</code> only returns
				<code>maxResults</code> results in a single page along with a <code>nextToken</code>
			response element. The remaining results of the initial request can be seen by sending
			another <code>ListServices</code> request with the returned <code>nextToken</code>
			value. This value can be between 1 and 100. If
			this parameter isn't used, then <code>ListServices</code> returns up to
			10 results and a <code>nextToken</code> value if
			applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
}
// ListServicesResponse represents the ListServicesResponse structure
type ListServicesResponse struct {
	// serviceArns <p>The list of full ARN entries for each service that's associated with the specified
			cluster.</p>
	serviceArns *StringList `json:"serviceArns,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future <code>ListServices</code>
			request. When the results of a <code>ListServices</code> request exceed
				<code>maxResults</code>, this value can be used to retrieve the next page of
			results. This value is <code>null</code> when there are no more results to
			return.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// ListTagsForResourceRequest represents the ListTagsForResourceRequest structure
type ListTagsForResourceRequest struct {
	// resourceArn <p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the
			supported resources are Amazon ECS tasks, services, task definitions, clusters, and container
			instances.</p>
	resourceArn *string `json:"resourceArn"`
}
// ListTagsForResourceResponse represents the ListTagsForResourceResponse structure
type ListTagsForResourceResponse struct {
	// tags <p>The tags for the resource.</p>
	tags *Tags `json:"tags,omitempty"`
}
// ListTaskDefinitionFamiliesRequest represents the ListTaskDefinitionFamiliesRequest structure
type ListTaskDefinitionFamiliesRequest struct {
	// status <p>The task definition family status to filter the
				<code>ListTaskDefinitionFamilies</code> results with. By default, both
				<code>ACTIVE</code> and <code>INACTIVE</code> task definition families are listed.
			If this parameter is set to <code>ACTIVE</code>, only task definition families that have
			an <code>ACTIVE</code> task definition revision are returned. If this parameter is set
			to <code>INACTIVE</code>, only task definition families that do not have any
				<code>ACTIVE</code> task definition revisions are returned. If you paginate the
			resulting output, be sure to keep the <code>status</code> value constant in each
			subsequent request.</p>
	status *TaskDefinitionFamilyStatus `json:"status,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a
				<code>ListTaskDefinitionFamilies</code> request indicating that more results are
			available to fulfill the request and further calls will be needed. If
				<code>maxResults</code> was provided, it is possible the number of results to be
			fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of task definition family results that
				<code>ListTaskDefinitionFamilies</code> returned in paginated output. When this
			parameter is used, <code>ListTaskDefinitions</code> only returns <code>maxResults</code>
			results in a single page along with a <code>nextToken</code> response element. The
			remaining results of the initial request can be seen by sending another
				<code>ListTaskDefinitionFamilies</code> request with the returned
				<code>nextToken</code> value. This value can be between 1 and
			100. If this parameter isn't used, then
				<code>ListTaskDefinitionFamilies</code> returns up to 100 results
			and a <code>nextToken</code> value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
	// familyPrefix <p>The <code>familyPrefix</code> is a string that's used to filter the results of
				<code>ListTaskDefinitionFamilies</code>. If you specify a <code>familyPrefix</code>,
			only task definition family names that begin with the <code>familyPrefix</code> string
			are returned.</p>
	familyPrefix *string `json:"familyPrefix,omitempty"`
}
// ListTaskDefinitionFamiliesResponse represents the ListTaskDefinitionFamiliesResponse structure
type ListTaskDefinitionFamiliesResponse struct {
	// families <p>The list of task definition family names that match the
				<code>ListTaskDefinitionFamilies</code> request.</p>
	families *StringList `json:"families,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future
				<code>ListTaskDefinitionFamilies</code> request. When the results of a
				<code>ListTaskDefinitionFamilies</code> request exceed <code>maxResults</code>, this
			value can be used to retrieve the next page of results. This value is <code>null</code>
			when there are no more results to return.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// ListTaskDefinitionsRequest represents the ListTaskDefinitionsRequest structure
type ListTaskDefinitionsRequest struct {
	// familyPrefix <p>The full family name to filter the <code>ListTaskDefinitions</code> results with.
			Specifying a <code>familyPrefix</code> limits the listed task definitions to task
			definition revisions that belong to that family.</p>
	familyPrefix *string `json:"familyPrefix,omitempty"`
	// status <p>The task definition status to filter the <code>ListTaskDefinitions</code> results
			with. By default, only <code>ACTIVE</code> task definitions are listed. By setting this
			parameter to <code>INACTIVE</code>, you can view task definitions that are
				<code>INACTIVE</code> as long as an active task or service still references them. If
			you paginate the resulting output, be sure to keep the <code>status</code> value
			constant in each subsequent request.</p>
	status *TaskDefinitionStatus `json:"status,omitempty"`
	// sort <p>The order to sort the results in. Valid values are <code>ASC</code> and
				<code>DESC</code>. By default, (<code>ASC</code>) task definitions are listed
			lexicographically by family name and in ascending numerical order by revision so that
			the newest task definitions in a family are listed last. Setting this parameter to
				<code>DESC</code> reverses the sort order on family name and revision. This is so
			that the newest task definitions in a family are listed first.</p>
	sort *SortOrder `json:"sort,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListTaskDefinitions</code>
			request indicating that more results are available to fulfill the request and further
			calls will be needed. If <code>maxResults</code> was provided, it is possible the number
			of results to be fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of task definition results that <code>ListTaskDefinitions</code>
			returned in paginated output. When this parameter is used,
				<code>ListTaskDefinitions</code> only returns <code>maxResults</code> results in a
			single page along with a <code>nextToken</code> response element. The remaining results
			of the initial request can be seen by sending another <code>ListTaskDefinitions</code>
			request with the returned <code>nextToken</code> value. This value can be between
			1 and 100. If this parameter isn't used, then
				<code>ListTaskDefinitions</code> returns up to 100 results and a
				<code>nextToken</code> value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
}
// ListTaskDefinitionsResponse represents the ListTaskDefinitionsResponse structure
type ListTaskDefinitionsResponse struct {
	// taskDefinitionArns <p>The list of task definition Amazon Resource Name (ARN) entries for the <code>ListTaskDefinitions</code>
			request.</p>
	taskDefinitionArns *StringList `json:"taskDefinitionArns,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future
				<code>ListTaskDefinitions</code> request. When the results of a
				<code>ListTaskDefinitions</code> request exceed <code>maxResults</code>, this value
			can be used to retrieve the next page of results. This value is <code>null</code> when
			there are no more results to return.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// ListTasksRequest represents the ListTasksRequest structure
type ListTasksRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering the
				<code>ListTasks</code> results. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// containerInstance <p>The container instance ID or full ARN of the container instance to use when
			filtering the <code>ListTasks</code> results. Specifying a
				<code>containerInstance</code> limits the results to tasks that belong to that
			container instance.</p>
	containerInstance *string `json:"containerInstance,omitempty"`
	// family <p>The name of the task definition family to use when filtering the
				<code>ListTasks</code> results. Specifying a <code>family</code> limits the results
			to tasks that belong to that family.</p>
	family *string `json:"family,omitempty"`
	// desiredStatus <p>The task desired status to use when filtering the <code>ListTasks</code> results.
			Specifying a <code>desiredStatus</code> of <code>STOPPED</code> limits the results to
			tasks that Amazon ECS has set the desired status to <code>STOPPED</code>. This can be useful
			for debugging tasks that aren't starting properly or have died or finished. The default
			status filter is <code>RUNNING</code>, which shows tasks that Amazon ECS has set the desired
			status to <code>RUNNING</code>.</p>
         <note>
            <p>Although you can filter results based on a desired status of <code>PENDING</code>,
				this doesn't return any results. Amazon ECS never sets the desired status of a task to
				that value (only a task's <code>lastStatus</code> may have a value of
					<code>PENDING</code>).</p>
         </note>
	desiredStatus *DesiredStatus `json:"desiredStatus,omitempty"`
	// nextToken <p>The <code>nextToken</code> value returned from a <code>ListTasks</code> request
			indicating that more results are available to fulfill the request and further calls will
			be needed. If <code>maxResults</code> was provided, it's possible the number of results
			to be fewer than <code>maxResults</code>.</p>
         <note>
            <p>This token should be treated as an opaque identifier that is only used to
                retrieve the next items in a list and not for other programmatic purposes.</p>
         </note>
	nextToken *string `json:"nextToken,omitempty"`
	// maxResults <p>The maximum number of task results that <code>ListTasks</code> returned in paginated
			output. When this parameter is used, <code>ListTasks</code> only returns
				<code>maxResults</code> results in a single page along with a <code>nextToken</code>
			response element. The remaining results of the initial request can be seen by sending
			another <code>ListTasks</code> request with the returned <code>nextToken</code> value.
			This value can be between 1 and 100. If this parameter
			isn't used, then <code>ListTasks</code> returns up to 100 results and
			a <code>nextToken</code> value if applicable.</p>
	maxResults *BoxedInteger `json:"maxResults,omitempty"`
	// startedBy <p>The <code>startedBy</code> value to filter the task results with. Specifying a
				<code>startedBy</code> value limits the results to tasks that were started with that
			value.</p>
         <p>When you specify <code>startedBy</code> as the filter, it must be the only filter that
			you use.</p>
	startedBy *string `json:"startedBy,omitempty"`
	// serviceName <p>The name of the service to use when filtering the <code>ListTasks</code> results.
			Specifying a <code>serviceName</code> limits the results to tasks that belong to that
			service.</p>
	serviceName *string `json:"serviceName,omitempty"`
	// launchType <p>The launch type to use when filtering the <code>ListTasks</code> results.</p>
	launchType *LaunchType `json:"launchType,omitempty"`
}
// ListTasksResponse represents the ListTasksResponse structure
type ListTasksResponse struct {
	// taskArns <p>The list of task ARN entries for the <code>ListTasks</code> request.</p>
	taskArns *StringList `json:"taskArns,omitempty"`
	// nextToken <p>The <code>nextToken</code> value to include in a future <code>ListTasks</code>
			request. When the results of a <code>ListTasks</code> request exceed
				<code>maxResults</code>, this value can be used to retrieve the next page of
			results. This value is <code>null</code> when there are no more results to
			return.</p>
	nextToken *string `json:"nextToken,omitempty"`
}
// PutAccountSettingDefaultRequest represents the PutAccountSettingDefaultRequest structure
type PutAccountSettingDefaultRequest struct {
	// name <p>The resource name for which to modify the account setting.</p>
         <p>The following are the valid values for the account setting name.</p>
         <ul>
            <li>
               <p>
                  <code>serviceLongArnFormat</code> - When modified, the Amazon Resource Name
					(ARN) and resource ID format of the resource type for a specified user, role, or
					the root user for an account is affected. The opt-in and opt-out account setting
					must be set for each Amazon ECS resource separately. The ARN and resource ID format
					of a resource is defined by the opt-in status of the user or role that created
					the resource. You must turn on this setting to use Amazon ECS features such as
					resource tagging.</p>
            </li>
            <li>
               <p>
                  <code>taskLongArnFormat</code> - When modified, the Amazon Resource Name (ARN)
					and resource ID format of the resource type for a specified user, role, or the
					root user for an account is affected. The opt-in and opt-out account setting must
					be set for each Amazon ECS resource separately. The ARN and resource ID format of a
					resource is defined by the opt-in status of the user or role that created the
					resource. You must turn on this setting to use Amazon ECS features such as resource
					tagging.</p>
            </li>
            <li>
               <p>
                  <code>containerInstanceLongArnFormat</code> - When modified, the Amazon
					Resource Name (ARN) and resource ID format of the resource type for a specified
					user, role, or the root user for an account is affected. The opt-in and opt-out
					account setting must be set for each Amazon ECS resource separately. The ARN and
					resource ID format of a resource is defined by the opt-in status of the user or
					role that created the resource. You must turn on this setting to use Amazon ECS
					features such as resource tagging.</p>
            </li>
            <li>
               <p>
                  <code>awsvpcTrunking</code> - When modified, the elastic network interface
					(ENI) limit for any new container instances that support the feature is changed.
					If <code>awsvpcTrunking</code> is turned on, any new container instances that
					support the feature are launched have the increased ENI limits available to
					them. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html">Elastic
						Network Interface Trunking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>containerInsights</code> - Container Insights with enhanced
					observability provides all the Container Insights metrics, plus additional task
					and container metrics. This version supports enhanced observability for Amazon ECS
					clusters using the Amazon EC2 and Fargate launch types. After you configure
					Container Insights with enhanced observability on Amazon ECS, Container Insights
					auto-collects detailed infrastructure telemetry from the cluster level down to
					the container level in your environment and displays these critical performance
					data in curated dashboards removing the heavy lifting in observability set-up. </p>
               <p>To use Container Insights with enhanced observability, set the
						<code>containerInsights</code> account setting to
					<code>enhanced</code>.</p>
               <p>To use Container Insights, set the <code>containerInsights</code> account
					setting to <code>enabled</code>.</p>
               <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html">Monitor Amazon ECS containers using Container Insights with enhanced
						observability</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>dualStackIPv6</code> - When turned on, when using a VPC in dual stack
					mode, your tasks using the <code>awsvpc</code> network mode can have an IPv6
					address assigned. For more information on using IPv6 with tasks launched on
					Amazon EC2 instances, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking-awsvpc.html#task-networking-vpc-dual-stack">Using a VPC in dual-stack mode</a>. For more information on using IPv6
					with tasks launched on Fargate, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-networking.html#fargate-task-networking-vpc-dual-stack">Using a VPC in dual-stack mode</a>.</p>
            </li>
            <li>
               <p>
                  <code>fargateFIPSMode</code> - If you specify <code>fargateFIPSMode</code>,
					Fargate FIPS 140 compliance is affected.</p>
            </li>
            <li>
               <p>
                  <code>fargateTaskRetirementWaitPeriod</code> - When Amazon Web Services determines that a
					security or infrastructure update is needed for an Amazon ECS task hosted on
					Fargate, the tasks need to be stopped and new tasks launched to replace them.
					Use <code>fargateTaskRetirementWaitPeriod</code> to configure the wait time to
					retire a Fargate task. For information about the Fargate tasks maintenance,
					see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-maintenance.html">Amazon Web Services Fargate
						task maintenance</a> in the <i>Amazon ECS Developer
					Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>tagResourceAuthorization</code> - Amazon ECS is introducing tagging
					authorization for resource creation. Users must have permissions for actions
					that create the resource, such as <code>ecsCreateCluster</code>. If tags are
					specified when you create a resource, Amazon Web Services performs additional authorization to
					verify if users or roles have permissions to create tags. Therefore, you must
					grant explicit permissions to use the <code>ecs:TagResource</code> action. For
					more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/supported-iam-actions-tagging.html">Grant permission to tag resources on creation</a> in the
						<i>Amazon ECS Developer Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>defaultLogDriverMode</code> -Amazon ECS supports setting a default delivery
					mode of log messages from a container to the <code>logDriver</code> that you specify in the container's <code>logConfiguration</code>. The delivery mode affects
					application stability when the flow of logs from the container to the log driver is
					interrupted. The <code>defaultLogDriverMode</code> setting supports two values:
						<code>blocking</code> and <code>non-blocking</code>. If you don't specify a
					delivery mode in your container definition's <code>logConfiguration</code>, the
					mode you specify using this account setting will be used as the default. For
					more information about log delivery modes, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html">LogConfiguration</a>.</p>
            </li>
            <li>
               <p>
                  <code>guardDutyActivate</code> - The <code>guardDutyActivate</code> parameter is read-only in Amazon ECS and indicates whether
			Amazon ECS Runtime Monitoring is enabled or disabled by your security administrator in your
			Amazon ECS account. Amazon GuardDuty controls this account setting on your behalf. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-guard-duty-integration.html">Protecting Amazon ECS workloads with Amazon ECS Runtime Monitoring</a>.</p>
            </li>
         </ul>
	name *SettingName `json:"name"`
	// value <p>The account setting value for the specified principal ARN. Accepted values are
				<code>enabled</code>, <code>disabled</code>, <code>on</code>, <code>enhanced</code>,
			and <code>off</code>.</p>
         <p>When you specify <code>fargateTaskRetirementWaitPeriod</code> for the
				<code>name</code>, the following are the valid values:</p>
         <ul>
            <li>
               <p>
                  <code>0</code> - Amazon Web Services sends the notification, and immediately retires the
					affected tasks.</p>
            </li>
            <li>
               <p>
                  <code>7</code> - Amazon Web Services sends the notification, and waits 7 calendar days to
					retire the tasks.</p>
            </li>
            <li>
               <p>
                  <code>14</code> - Amazon Web Services sends the notification, and waits 14 calendar days to
					retire the tasks.</p>
            </li>
         </ul>
	value *string `json:"value"`
}
// PutAccountSettingDefaultResponse represents the PutAccountSettingDefaultResponse structure
type PutAccountSettingDefaultResponse struct {
	// setting <p>The current setting for a resource.</p>
	setting *Setting `json:"setting,omitempty"`
}
// PutAccountSettingRequest represents the PutAccountSettingRequest structure
type PutAccountSettingRequest struct {
	// name <p>The Amazon ECS account setting name to modify.</p>
         <p>The following are the valid values for the account setting name.</p>
         <ul>
            <li>
               <p>
                  <code>serviceLongArnFormat</code> - When modified, the Amazon Resource Name
					(ARN) and resource ID format of the resource type for a specified user, role, or
					the root user for an account is affected. The opt-in and opt-out account setting
					must be set for each Amazon ECS resource separately. The ARN and resource ID format
					of a resource is defined by the opt-in status of the user or role that created
					the resource. You must turn on this setting to use Amazon ECS features such as
					resource tagging.</p>
            </li>
            <li>
               <p>
                  <code>taskLongArnFormat</code> - When modified, the Amazon Resource Name (ARN)
					and resource ID format of the resource type for a specified user, role, or the
					root user for an account is affected. The opt-in and opt-out account setting must
					be set for each Amazon ECS resource separately. The ARN and resource ID format of a
					resource is defined by the opt-in status of the user or role that created the
					resource. You must turn on this setting to use Amazon ECS features such as resource
					tagging.</p>
            </li>
            <li>
               <p>
                  <code>containerInstanceLongArnFormat</code> - When modified, the Amazon
					Resource Name (ARN) and resource ID format of the resource type for a specified
					user, role, or the root user for an account is affected. The opt-in and opt-out
					account setting must be set for each Amazon ECS resource separately. The ARN and
					resource ID format of a resource is defined by the opt-in status of the user or
					role that created the resource. You must turn on this setting to use Amazon ECS
					features such as resource tagging.</p>
            </li>
            <li>
               <p>
                  <code>awsvpcTrunking</code> - When modified, the elastic network interface
					(ENI) limit for any new container instances that support the feature is changed.
					If <code>awsvpcTrunking</code> is turned on, any new container instances that
					support the feature are launched have the increased ENI limits available to
					them. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html">Elastic
						Network Interface Trunking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>containerInsights</code> - Container Insights with enhanced
					observability provides all the Container Insights metrics, plus additional task
					and container metrics. This version supports enhanced observability for Amazon ECS
					clusters using the Amazon EC2 and Fargate launch types. After you configure
					Container Insights with enhanced observability on Amazon ECS, Container Insights
					auto-collects detailed infrastructure telemetry from the cluster level down to
					the container level in your environment and displays these critical performance
					data in curated dashboards removing the heavy lifting in observability set-up. </p>
               <p>To use Container Insights with enhanced observability, set the
						<code>containerInsights</code> account setting to
					<code>enhanced</code>.</p>
               <p>To use Container Insights, set the <code>containerInsights</code> account
					setting to <code>enabled</code>.</p>
               <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html">Monitor Amazon ECS containers using Container Insights with enhanced
						observability</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>dualStackIPv6</code> - When turned on, when using a VPC in dual stack
					mode, your tasks using the <code>awsvpc</code> network mode can have an IPv6
					address assigned. For more information on using IPv6 with tasks launched on
					Amazon EC2 instances, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking-awsvpc.html#task-networking-vpc-dual-stack">Using a VPC in dual-stack mode</a>. For more information on using IPv6
					with tasks launched on Fargate, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-networking.html#fargate-task-networking-vpc-dual-stack">Using a VPC in dual-stack mode</a>.</p>
            </li>
            <li>
               <p>
                  <code>fargateTaskRetirementWaitPeriod</code> - When Amazon Web Services determines that a
					security or infrastructure update is needed for an Amazon ECS task hosted on
					Fargate, the tasks need to be stopped and new tasks launched to replace them.
					Use <code>fargateTaskRetirementWaitPeriod</code> to configure the wait time to
					retire a Fargate task. For information about the Fargate tasks maintenance,
					see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-maintenance.html">Amazon Web Services Fargate
						task maintenance</a> in the <i>Amazon ECS Developer
					Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>tagResourceAuthorization</code> - Amazon ECS is introducing tagging
					authorization for resource creation. Users must have permissions for actions
					that create the resource, such as <code>ecsCreateCluster</code>. If tags are
					specified when you create a resource, Amazon Web Services performs additional authorization to
					verify if users or roles have permissions to create tags. Therefore, you must
					grant explicit permissions to use the <code>ecs:TagResource</code> action. For
					more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/supported-iam-actions-tagging.html">Grant permission to tag resources on creation</a> in the
						<i>Amazon ECS Developer Guide</i>.</p>
            </li>
            <li>
               <p>
                  <code>defaultLogDriverMode</code> - Amazon ECS supports setting a default delivery
					mode of log messages from a container to the <code>logDriver</code> that you specify in the container's <code>logConfiguration</code>. The delivery mode affects
					application stability when the flow of logs from the container to the log driver is
					interrupted. The <code>defaultLogDriverMode</code> setting supports two values:
					<code>blocking</code> and <code>non-blocking</code>. If you don't specify a
					delivery mode in your container definition's <code>logConfiguration</code>, the
					mode you specify using this account setting will be used as the default. For
					more information about log delivery modes, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html">LogConfiguration</a>.</p>
            </li>
            <li>
               <p>
                  <code>guardDutyActivate</code> - The <code>guardDutyActivate</code> parameter is read-only in Amazon ECS and indicates whether
			Amazon ECS Runtime Monitoring is enabled or disabled by your security administrator in your
			Amazon ECS account. Amazon GuardDuty controls this account setting on your behalf. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-guard-duty-integration.html">Protecting Amazon ECS workloads with Amazon ECS Runtime Monitoring</a>.</p>
            </li>
         </ul>
	name *SettingName `json:"name"`
	// value <p>The account setting value for the specified principal ARN. Accepted values are
				<code>enabled</code>, <code>disabled</code>, <code>enhanced</code>, <code>on</code>,
			and <code>off</code>.</p>
         <p>When you specify <code>fargateTaskRetirementWaitPeriod</code> for the
				<code>name</code>, the following are the valid values:</p>
         <ul>
            <li>
               <p>
                  <code>0</code> - Amazon Web Services sends the notification, and immediately retires the
					affected tasks.</p>
            </li>
            <li>
               <p>
                  <code>7</code> - Amazon Web Services sends the notification, and waits 7 calendar days to
					retire the tasks.</p>
            </li>
            <li>
               <p>
                  <code>14</code> - Amazon Web Services sends the notification, and waits 14 calendar days to
					retire the tasks.</p>
            </li>
         </ul>
	value *string `json:"value"`
	// principalArn <p>The ARN of the principal, which can be a user, role, or the root user. If you specify
			the root user, it modifies the account setting for all users, roles, and the root user of the
			account unless a user or role explicitly overrides these settings. If this field is
			omitted, the setting is changed only for the authenticated user.</p>
         <p>In order to use this parameter, you must be the root user, or the principal.</p>
         <note>
            <p>You must use the root user when you set the Fargate wait time
					(<code>fargateTaskRetirementWaitPeriod</code>). </p>
            <p>Federated users assume the account setting of the root user and can't have explicit
				account settings set for them.</p>
         </note>
	principalArn *string `json:"principalArn,omitempty"`
}
// PutAccountSettingResponse represents the PutAccountSettingResponse structure
type PutAccountSettingResponse struct {
	// setting <p>The current account setting for a resource.</p>
	setting *Setting `json:"setting,omitempty"`
}
// PutAttributesRequest represents the PutAttributesRequest structure
type PutAttributesRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to apply
			attributes. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// attributes <p>The attributes to apply to your resource. You can specify up to 10 custom attributes
			for each resource. You can specify up to 10 attributes in a single call.</p>
	attributes *Attributes `json:"attributes"`
}
// PutAttributesResponse represents the PutAttributesResponse structure
type PutAttributesResponse struct {
	// attributes <p>The attributes applied to your resource.</p>
	attributes *Attributes `json:"attributes,omitempty"`
}
// PutClusterCapacityProvidersRequest represents the PutClusterCapacityProvidersRequest structure
type PutClusterCapacityProvidersRequest struct {
	// capacityProviders <p>The name of one or more capacity providers to associate with the cluster.</p>
         <p>If specifying a capacity provider that uses an Auto Scaling group, the capacity
			provider must already be created. New capacity providers can be created with the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html">CreateCapacityProvider</a> API operation.</p>
         <p>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or
				<code>FARGATE_SPOT</code> capacity providers. The Fargate capacity providers are
			available to all accounts and only need to be associated with a cluster to be
			used.</p>
	capacityProviders *StringList `json:"capacityProviders"`
	// defaultCapacityProviderStrategy <p>The capacity provider strategy to use by default for the cluster.</p>
         <p>When creating a service or running a task on a cluster, if no capacity provider or
			launch type is specified then the default capacity provider strategy for the cluster is
			used.</p>
         <p>A capacity provider strategy consists of one or more capacity providers along with the
				<code>base</code> and <code>weight</code> to assign to them. A capacity provider
			must be associated with the cluster to be used in a capacity provider strategy. The
				<a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html">PutClusterCapacityProviders</a> API is used to associate a capacity provider
			with a cluster. Only capacity providers with an <code>ACTIVE</code> or
				<code>UPDATING</code> status can be used.</p>
         <p>If specifying a capacity provider that uses an Auto Scaling group, the capacity
			provider must already be created. New capacity providers can be created with the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html">CreateCapacityProvider</a> API operation.</p>
         <p>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or
				<code>FARGATE_SPOT</code> capacity providers. The Fargate capacity providers are
			available to all accounts and only need to be associated with a cluster to be
			used.</p>
	defaultCapacityProviderStrategy *CapacityProviderStrategy `json:"defaultCapacityProviderStrategy"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster to modify the capacity provider
			settings for. If you don't specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster"`
}
// PutClusterCapacityProvidersResponse represents the PutClusterCapacityProvidersResponse structure
type PutClusterCapacityProvidersResponse struct {
	// cluster <p>Details about the cluster.</p>
	cluster *Cluster `json:"cluster,omitempty"`
}
// RegisterContainerInstanceRequest represents the RegisterContainerInstanceRequest structure
type RegisterContainerInstanceRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster to register your container instance
			with. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// instanceIdentityDocument <p>The instance identity document for the EC2 instance to register. This document can be
			found by running the following command from the instance: <code>curl
				http://169.254.169.254/latest/dynamic/instance-identity/document/</code>
         </p>
	instanceIdentityDocument *string `json:"instanceIdentityDocument,omitempty"`
	// totalResources <p>The resources available on the instance.</p>
	totalResources *Resources `json:"totalResources,omitempty"`
	// containerInstanceArn <p>The ARN of the container instance (if it was previously registered).</p>
	containerInstanceArn *string `json:"containerInstanceArn,omitempty"`
	// attributes <p>The container instance attributes that this container instance supports.</p>
	attributes *Attributes `json:"attributes,omitempty"`
	// tags <p>The metadata that you apply to the container instance to help you categorize and
			organize them. Each tag consists of a key and an optional value. You define both.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
	// instanceIdentityDocumentSignature <p>The instance identity document signature for the EC2 instance to register. This
			signature can be found by running the following command from the instance: <code>curl
				http://169.254.169.254/latest/dynamic/instance-identity/signature/</code>
         </p>
	instanceIdentityDocumentSignature *string `json:"instanceIdentityDocumentSignature,omitempty"`
	// versionInfo <p>The version information for the Amazon ECS container agent and Docker daemon that runs on
			the container instance.</p>
	versionInfo *VersionInfo `json:"versionInfo,omitempty"`
	// platformDevices <p>The devices that are available on the container instance. The only supported device
			type is a GPU.</p>
	platformDevices *PlatformDevices `json:"platformDevices,omitempty"`
}
// RegisterContainerInstanceResponse represents the RegisterContainerInstanceResponse structure
type RegisterContainerInstanceResponse struct {
	// containerInstance <p>The container instance that was registered.</p>
	containerInstance *ContainerInstance `json:"containerInstance,omitempty"`
}
// RegisterTaskDefinitionRequest represents the RegisterTaskDefinitionRequest structure
type RegisterTaskDefinitionRequest struct {
	// networkMode <p>The Docker networking mode to use for the containers in the task. The valid values are
                <code>none</code>, <code>bridge</code>, <code>awsvpc</code>, and <code>host</code>.
            If no network mode is specified, the default is <code>bridge</code>.</p>
         <p>For Amazon ECS tasks on Fargate, the <code>awsvpc</code> network mode is required. 
            For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used.  For Amazon ECS tasks on Amazon EC2 Windows instances, <code><default></code> or <code>awsvpc</code> can be used. If the network
            mode is set to <code>none</code>, you cannot specify port mappings in your container
            definitions, and the tasks containers do not have external connectivity. The
                <code>host</code> and <code>awsvpc</code> network modes offer the highest networking
            performance for containers because they use the EC2 network stack instead of the
            virtualized network stack provided by the <code>bridge</code> mode.</p>
         <p>With the <code>host</code> and <code>awsvpc</code> network modes, exposed container
            ports are mapped directly to the corresponding host port (for the <code>host</code>
            network mode) or the attached elastic network interface port (for the
                <code>awsvpc</code> network mode), so you cannot take advantage of dynamic host port
            mappings. </p>
         <important>
            <p>When using the <code>host</code> network mode, you should not run
                            containers using the root user (UID 0). It is considered best practice
                            to use a non-root user.</p>
         </important>
         <p>If the network mode is <code>awsvpc</code>, the task is allocated an elastic network
            interface, and you must specify a <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_NetworkConfiguration.html">NetworkConfiguration</a> value when you create
            a service or run a task with the task definition. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task Networking</a> in the
                <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>If the network mode is <code>host</code>, you cannot run multiple instantiations of the
            same task on a single container instance when port mappings are used.</p>
	networkMode *NetworkMode `json:"networkMode,omitempty"`
	// placementConstraints <p>An array of placement constraint objects to use for the task. You can specify a
			maximum of 10 constraints for each task. This limit includes constraints in the task
			definition and those specified at runtime.</p>
	placementConstraints *TaskDefinitionPlacementConstraints `json:"placementConstraints,omitempty"`
	// memory <p>The amount of memory (in MiB) used by the task. It can be expressed as an integer
			using MiB (for example ,<code>1024</code>) or as a string using GB (for example,
				<code>1GB</code> or <code>1 GB</code>) in a task definition. String values are
			converted to an integer indicating the MiB when the task definition is
			registered.</p>
         <note>
            <p>Task-level CPU and memory parameters are ignored for Windows containers. We
				recommend specifying container-level resources for Windows containers.</p>
         </note>
         <p>If using the EC2 launch type, this field is optional.</p>
         <p>If using the Fargate launch type, this field is required and you must
			use one of the following values. This determines your range of supported values for the
				<code>cpu</code> parameter.</p>
         <p>The CPU units cannot be less than 1 vCPU when you use Windows containers on
			Fargate.</p>
         <ul>
            <li>
               <p>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <code>cpu</code> values: 256 (.25 vCPU)</p>
            </li>
            <li>
               <p>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available <code>cpu</code> values: 512 (.5 vCPU)</p>
            </li>
            <li>
               <p>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available <code>cpu</code> values: 1024 (1 vCPU)</p>
            </li>
            <li>
               <p>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available <code>cpu</code> values: 2048 (2 vCPU)</p>
            </li>
            <li>
               <p>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available <code>cpu</code> values: 4096 (4 vCPU)</p>
            </li>
            <li>
               <p>Between 16 GB and 60 GB in 4 GB increments - Available <code>cpu</code> values: 8192 (8 vCPU)</p>
               <p>This option requires Linux platform <code>1.4.0</code> or
                                        later.</p>
            </li>
            <li>
               <p>Between 32GB and 120 GB in 8 GB increments - Available <code>cpu</code> values: 16384 (16 vCPU)</p>
               <p>This option requires Linux platform <code>1.4.0</code> or
                                        later.</p>
            </li>
         </ul>
	memory *string `json:"memory,omitempty"`
	// tags <p>The metadata that you apply to the task definition to help you categorize and organize
			them. Each tag consists of a key and an optional value. You define both of them.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
	// ipcMode <p>The IPC resource namespace to use for the containers in the task. The valid values are
                <code>host</code>, <code>task</code>, or <code>none</code>. If <code>host</code> is
            specified, then all containers within the tasks that specified the <code>host</code> IPC
            mode on the same container instance share the same IPC resources with the host Amazon EC2
            instance. If <code>task</code> is specified, all containers within the specified task
            share the same IPC resources. If <code>none</code> is specified, then IPC resources
            within the containers of a task are private and not shared with other containers in a
            task or on the container instance. If no value is specified, then the IPC resource
            namespace sharing depends on the Docker daemon setting on the container instance.</p>
         <p>If the <code>host</code> IPC mode is used, be aware that there is a heightened risk of
            undesired IPC namespace expose.</p>
         <p>If you are setting namespaced kernel parameters using <code>systemControls</code> for
            the containers in the task, the following will apply to your IPC resource namespace. For
            more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html">System
                Controls</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <ul>
            <li>
               <p>For tasks that use the <code>host</code> IPC mode, IPC namespace related
                        <code>systemControls</code> are not supported.</p>
            </li>
            <li>
               <p>For tasks that use the <code>task</code> IPC mode, IPC namespace related
                        <code>systemControls</code> will apply to all containers within a
                    task.</p>
            </li>
         </ul>
         <note>
            <p>This parameter is not supported for Windows containers or tasks run on Fargate.</p>
         </note>
	ipcMode *IpcMode `json:"ipcMode,omitempty"`
	// family <p>You must specify a <code>family</code> for a task definition. You can use it track
			multiple versions of the same task definition. The <code>family</code> is used as a name
			for your task definition. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.</p>
	family *string `json:"family"`
	// taskRoleArn <p>The short name or full Amazon Resource Name (ARN) of the IAM role that containers in this task can
			assume. All containers in this task are granted the permissions that are specified in
			this role. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html">IAM Roles for
				Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	taskRoleArn *string `json:"taskRoleArn,omitempty"`
	// containerDefinitions <p>A list of container definitions in JSON format that describe the different containers
			that make up your task.</p>
	containerDefinitions *ContainerDefinitions `json:"containerDefinitions"`
	// proxyConfiguration <p>The configuration details for the App Mesh proxy.</p>
         <p>For tasks hosted on Amazon EC2 instances, the container instances require at least version
				<code>1.26.0</code> of the container agent and at least version
				<code>1.26.0-1</code> of the <code>ecs-init</code> package to use a proxy
			configuration. If your container instances are launched from the Amazon ECS-optimized
			AMI version <code>20190301</code> or later, then they contain the required versions of
			the container agent and <code>ecs-init</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-ami-versions.html">Amazon ECS-optimized AMI versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	proxyConfiguration *ProxyConfiguration `json:"proxyConfiguration,omitempty"`
	// inferenceAccelerators <p>The Elastic Inference accelerators to use for the containers in the task.</p>
	inferenceAccelerators *InferenceAccelerators `json:"inferenceAccelerators,omitempty"`
	// ephemeralStorage <p>The amount of ephemeral storage to allocate for the task. This parameter is used to
			expand the total amount of ephemeral storage available, beyond the default amount, for
			tasks hosted on Fargate. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html">Using data volumes in
				tasks</a> in the <i>Amazon ECS Developer Guide</i>.</p>
         <note>
            <p>For tasks using the Fargate launch type, the task requires the
				following platforms:</p>
            <ul>
               <li>
                  <p>Linux platform version <code>1.4.0</code> or later.</p>
               </li>
               <li>
                  <p>Windows platform version <code>1.0.0</code> or later.</p>
               </li>
            </ul>
         </note>
	ephemeralStorage *EphemeralStorage `json:"ephemeralStorage,omitempty"`
	// enableFaultInjection <p>Enables fault injection when you register your task definition and allows for fault
			injection requests to be accepted from the task's containers. The default value is
				<code>false</code>.</p>
	enableFaultInjection *BoxedBoolean `json:"enableFaultInjection,omitempty"`
	// requiresCompatibilities <p>The task launch type that Amazon ECS validates the task definition against. A client
			exception is returned if the task definition doesn't validate against the
			compatibilities specified. If no value is specified, the parameter is omitted from the
			response.</p>
	requiresCompatibilities *CompatibilityList `json:"requiresCompatibilities,omitempty"`
	// pidMode <p>The process namespace to use for the containers in the task. The valid
                            values are <code>host</code> or <code>task</code>. On Fargate for
                            Linux containers, the only valid value is <code>task</code>. For
                            example, monitoring sidecars might need <code>pidMode</code> to access
                            information about other containers running in the same task.</p>
         <p>If <code>host</code> is specified, all containers within the tasks
                            that specified the <code>host</code> PID mode on the same container
                            instance share the same process namespace with the host Amazon EC2
                            instance.</p>
         <p>If <code>task</code> is specified, all containers within the specified
                            task share the same process namespace.</p>
         <p>If no value is specified, the
                            default is a private namespace for each container.</p>
         <p>If the <code>host</code> PID mode is used, there's a heightened risk
                            of undesired process namespace exposure.</p>
         <note>
            <p>This parameter is not supported for Windows containers.</p>
         </note>
         <note>
            <p>This parameter is only supported for tasks that are hosted on
        Fargate if the tasks are using platform version <code>1.4.0</code> or later
        (Linux). This isn't supported for Windows containers on
        Fargate.</p>
         </note>
	pidMode *PidMode `json:"pidMode,omitempty"`
	// runtimePlatform <p>The operating system that your tasks definitions run on. A platform family is
			specified only for tasks using the Fargate launch type. </p>
	runtimePlatform *RuntimePlatform `json:"runtimePlatform,omitempty"`
	// executionRoleArn <p>The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent
            permission to make Amazon Web Services API calls on your behalf. For informationabout the required IAM roles for Amazon ECS, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html">IAM roles for Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	executionRoleArn *string `json:"executionRoleArn,omitempty"`
	// volumes <p>A list of volume definitions in JSON format that containers in your task might
			use.</p>
	volumes *VolumeList `json:"volumes,omitempty"`
	// cpu <p>The number of CPU units used by the task. It can be expressed as an integer using CPU
			units (for example, <code>1024</code>) or as a string using vCPUs (for example, <code>1
				vCPU</code> or <code>1 vcpu</code>) in a task definition. String values are
			converted to an integer indicating the CPU units when the task definition is
			registered.</p>
         <note>
            <p>Task-level CPU and memory parameters are ignored for Windows containers. We
				recommend specifying container-level resources for Windows containers.</p>
         </note>
         <p>If you're using the EC2 launch type or external launch type, this field
			is optional. Supported values are between <code>128</code> CPU units (<code>0.125</code>
			vCPUs) and <code>196608</code> CPU units (<code>192</code> vCPUs). If you do not specify
			a value, the parameter is ignored.</p>
         <p>This field is required for Fargate. For information about the valid values, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size">Task size</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	cpu *string `json:"cpu,omitempty"`
}
// RegisterTaskDefinitionResponse represents the RegisterTaskDefinitionResponse structure
type RegisterTaskDefinitionResponse struct {
	// taskDefinition <p>The full description of the registered task definition.</p>
	taskDefinition *TaskDefinition `json:"taskDefinition,omitempty"`
	// tags <p>The list of tags associated with the task definition.</p>
	tags *Tags `json:"tags,omitempty"`
}
// RunTaskRequest represents the RunTaskRequest structure
type RunTaskRequest struct {
	// overrides <p>A list of container overrides in JSON format that specify the name of a container in
			the specified task definition and the overrides it should receive. You can override the
			default command for a container (that's specified in the task definition or Docker
			image) with a <code>command</code> override. You can also override existing environment
			variables (that are specified in the task definition or Docker image) on a container or
			add new environment variables to it with an <code>environment</code> override.</p>
         <p>A total of 8192 characters are allowed for overrides. This limit includes the JSON
			formatting characters of the override structure.</p>
	overrides *TaskOverride `json:"overrides,omitempty"`
	// placementConstraints <p>An array of placement constraint objects to use for the task. You can specify up to 10
			constraints for each task (including constraints in the task definition and those
			specified at runtime).</p>
	placementConstraints *PlacementConstraints `json:"placementConstraints,omitempty"`
	// volumeConfigurations <p>The details of the volume that was <code>configuredAtLaunch</code>. You can configure
			the size, volumeType, IOPS, throughput, snapshot and encryption in in <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TaskManagedEBSVolumeConfiguration.html">TaskManagedEBSVolumeConfiguration</a>. The <code>name</code> of the volume must
			match the <code>name</code> from the task definition.</p>
	volumeConfigurations *TaskVolumeConfigurations `json:"volumeConfigurations,omitempty"`
	// referenceId <p>This parameter is only used by Amazon ECS. It is not intended for use by customers.</p>
	referenceId *string `json:"referenceId,omitempty"`
	// count <p>The number of instantiations of the specified task to place on your cluster. You can
			specify up to 10 tasks for each call.</p>
	count *BoxedInteger `json:"count,omitempty"`
	// enableExecuteCommand <p>Determines whether to use the execute command functionality for the containers in this
			task. If <code>true</code>, this enables execute command functionality on all containers
			in the task.</p>
         <p>If <code>true</code>, then the task definition must have a task role, or you must
			provide one as an override.</p>
	enableExecuteCommand *bool `json:"enableExecuteCommand,omitempty"`
	// launchType <p>The infrastructure to run your standalone task on. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">Amazon ECS
				launch types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>The <code>FARGATE</code> launch type runs your tasks on Fargate On-Demand
			infrastructure.</p>
         <note>
            <p>Fargate Spot infrastructure is available for use but a capacity provider
				strategy must be used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-capacity-providers.html">Fargate capacity providers</a> in the
					<i>Amazon ECS Developer Guide</i>.</p>
         </note>
         <p>The <code>EC2</code> launch type runs your tasks on Amazon EC2 instances registered to your
			cluster.</p>
         <p>The <code>EXTERNAL</code> launch type runs your tasks on your on-premises server or
			virtual machine (VM) capacity registered to your cluster.</p>
         <p>A task can use either a launch type or a capacity provider strategy. If a
				<code>launchType</code> is specified, the <code>capacityProviderStrategy</code>
			parameter must be omitted.</p>
         <p>When you use cluster auto scaling, you must specify
				<code>capacityProviderStrategy</code> and not <code>launchType</code>. </p>
	launchType *LaunchType `json:"launchType,omitempty"`
	// platformVersion <p>The platform version the task uses. A platform version is only specified for tasks
			hosted on Fargate. If one isn't specified, the <code>LATEST</code>
			platform version is used. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform
				versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	platformVersion *string `json:"platformVersion,omitempty"`
	// startedBy <p>An optional tag specified when a task is started. For example, if you automatically
			trigger a task to run a batch process job, you could apply a unique identifier for that
			job to your task with the <code>startedBy</code> parameter. You can then identify which
			tasks belong to that job by filtering the results of a <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListTasks.html">ListTasks</a> call with
			the <code>startedBy</code> value. Up to 128 letters (uppercase and lowercase), numbers,
			hyphens (-), forward slash (/), and underscores (_) are allowed.</p>
         <p>If a task is started by an Amazon ECS service, then the <code>startedBy</code> parameter
			contains the deployment ID of the service that starts it.</p>
	startedBy *string `json:"startedBy,omitempty"`
	// tags <p>The metadata that you apply to the task to help you categorize and organize them. Each
			tag consists of a key and an optional value, both of which you define.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
	// placementStrategy <p>The placement strategy objects to use for the task. You can specify a maximum of 5
			strategy rules for each task.</p>
	placementStrategy *PlacementStrategies `json:"placementStrategy,omitempty"`
	// taskDefinition <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
			full ARN of the task definition to run. If a <code>revision</code> isn't specified,
			the latest <code>ACTIVE</code> revision is used.</p>
         <p>The full ARN value must match the value that you specified as the
				<code>Resource</code> of the principal's permissions policy.</p>
         <p>When you specify a task definition, you must either specify a specific revision, or
			all revisions in the ARN.</p>
         <p>To specify a specific revision, include the revision number in the ARN. For example,
			to specify revision 2, use
				<code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:2</code>.</p>
         <p>To specify all revisions, use the wildcard (*) in the ARN. For example, to specify
			all revisions, use
				<code>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*</code>.</p>
         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-resources">Policy Resources for Amazon ECS</a> in the Amazon Elastic Container Service Developer Guide.</p>
	taskDefinition *string `json:"taskDefinition"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster to run your task on.
			If you do not specify a cluster, the default cluster is assumed.</p>
         <p>Each account receives a default cluster the first time you use the service, but you
			may also create other clusters.</p>
	cluster *string `json:"cluster,omitempty"`
	// enableECSManagedTags <p>Specifies whether to use Amazon ECS managed tags for the task. For more information, see
				<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS
				Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	enableECSManagedTags *bool `json:"enableECSManagedTags,omitempty"`
	// networkConfiguration <p>The network configuration for the task. This parameter is required for task
			definitions that use the <code>awsvpc</code> network mode to receive their own elastic
			network interface, and it isn't supported for other network modes. For more information,
			see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html">Task networking</a>
			in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	networkConfiguration *NetworkConfiguration `json:"networkConfiguration,omitempty"`
	// propagateTags <p>Specifies whether to propagate the tags from the task definition to the task. If no
			value is specified, the tags aren't propagated. Tags can only be propagated to the task
			during task creation. To add tags to a task after task creation, use the<a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html">TagResource</a> API action.</p>
         <note>
            <p>An error will be received if you specify the <code>SERVICE</code> option when
				running a task.</p>
         </note>
	propagateTags *PropagateTags `json:"propagateTags,omitempty"`
	// clientToken <p>An identifier that you provide to ensure the idempotency of the request. It must be
			unique and is case sensitive. Up to 64 characters are allowed. The valid characters are
			characters in the range of 33-126, inclusive. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/ECS_Idempotency.html">Ensuring idempotency</a>.</p>
	clientToken *string `json:"clientToken,omitempty"`
	// capacityProviderStrategy <p>The capacity provider strategy to use for the task.</p>
         <p>If a <code>capacityProviderStrategy</code> is specified, the <code>launchType</code>
			parameter must be omitted. If no <code>capacityProviderStrategy</code> or
				<code>launchType</code> is specified, the
				<code>defaultCapacityProviderStrategy</code> for the cluster is used.</p>
         <p>When you use cluster auto scaling, you must specify
				<code>capacityProviderStrategy</code> and not <code>launchType</code>. </p>
         <p>A capacity provider strategy can contain a maximum of 20 capacity providers.</p>
	capacityProviderStrategy *CapacityProviderStrategy `json:"capacityProviderStrategy,omitempty"`
	// group <p>The name of the task group to associate with the task. The default value is the family
			name of the task definition (for example, <code>family:my-family-name</code>).</p>
	group *string `json:"group,omitempty"`
}
// RunTaskResponse represents the RunTaskResponse structure
type RunTaskResponse struct {
	// tasks <p>A full description of the tasks that were run. The tasks that were successfully placed
			on your cluster are described here.</p>
	tasks *Tasks `json:"tasks,omitempty"`
	// failures <p>Any failures associated with the call.</p>
         <p>For information about how to address failures, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-event-messages.html#service-event-messages-list">Service event messages</a> and <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html">API failure
				reasons</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	failures *Failures `json:"failures,omitempty"`
}
// StartTaskRequest represents the StartTaskRequest structure
type StartTaskRequest struct {
	// enableExecuteCommand <p>Whether or not the execute command functionality is turned on for the task. If
				<code>true</code>, this turns on the execute command functionality on all containers
			in the task.</p>
	enableExecuteCommand *bool `json:"enableExecuteCommand,omitempty"`
	// group <p>The name of the task group to associate with the task. The default value is the family
			name of the task definition (for example, family:my-family-name).</p>
	group *string `json:"group,omitempty"`
	// overrides <p>A list of container overrides in JSON format that specify the name of a container in
			the specified task definition and the overrides it receives. You can override the
			default command for a container (that's specified in the task definition or Docker
			image) with a <code>command</code> override. You can also override existing environment
			variables (that are specified in the task definition or Docker image) on a container or
			add new environment variables to it with an <code>environment</code> override.</p>
         <note>
            <p>A total of 8192 characters are allowed for overrides. This limit includes the JSON
				formatting characters of the override structure.</p>
         </note>
	overrides *TaskOverride `json:"overrides,omitempty"`
	// referenceId <p>This parameter is only used by Amazon ECS. It is not intended for use by customers.</p>
	referenceId *string `json:"referenceId,omitempty"`
	// tags <p>The metadata that you apply to the task to help you categorize and organize them. Each
			tag consists of a key and an optional value, both of which you define.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags,omitempty"`
	// volumeConfigurations <p>The details of the volume that was <code>configuredAtLaunch</code>. You can configure
			the size, volumeType, IOPS, throughput, snapshot and encryption in <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TaskManagedEBSVolumeConfiguration.html">TaskManagedEBSVolumeConfiguration</a>. The <code>name</code> of the volume must
			match the <code>name</code> from the task definition.</p>
	volumeConfigurations *TaskVolumeConfigurations `json:"volumeConfigurations,omitempty"`
	// containerInstances <p>The container instance IDs or full ARN entries for the container instances where you
			would like to place your task. You can specify up to 10 container instances.</p>
	containerInstances *StringList `json:"containerInstances"`
	// enableECSManagedTags <p>Specifies whether to use Amazon ECS managed tags for the task. For more information, see
				<a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS
				Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	enableECSManagedTags *bool `json:"enableECSManagedTags,omitempty"`
	// networkConfiguration <p>The VPC subnet and security group configuration for tasks that receive their own
            elastic network interface by using the <code>awsvpc</code> networking mode.</p>
	networkConfiguration *NetworkConfiguration `json:"networkConfiguration,omitempty"`
	// propagateTags <p>Specifies whether to propagate the tags from the task definition or the service to the
			task. If no value is specified, the tags aren't propagated.</p>
	propagateTags *PropagateTags `json:"propagateTags,omitempty"`
	// startedBy <p>An optional tag specified when a task is started. For example, if you automatically
			trigger a task to run a batch process job, you could apply a unique identifier for that
			job to your task with the <code>startedBy</code> parameter. You can then identify which
			tasks belong to that job by filtering the results of a <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListTasks.html">ListTasks</a> call with
			the <code>startedBy</code> value. Up to 36 letters (uppercase and lowercase), numbers,
			hyphens (-), forward slash (/), and underscores (_) are allowed.</p>
         <p>If a task is started by an Amazon ECS service, the <code>startedBy</code> parameter
			contains the deployment ID of the service that starts it.</p>
	startedBy *string `json:"startedBy,omitempty"`
	// taskDefinition <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
			full ARN of the task definition to start. If a <code>revision</code> isn't specified,
			the latest <code>ACTIVE</code> revision is used.</p>
	taskDefinition *string `json:"taskDefinition"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster where to start your task.
			If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
}
// StartTaskResponse represents the StartTaskResponse structure
type StartTaskResponse struct {
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
	// tasks <p>A full description of the tasks that were started. Each task that was successfully
			placed on your container instances is described.</p>
	tasks *Tasks `json:"tasks,omitempty"`
}
// StopServiceDeploymentRequest represents the StopServiceDeploymentRequest structure
type StopServiceDeploymentRequest struct {
	// serviceDeploymentArn <p>The ARN of the service deployment that you want to stop.</p>
	serviceDeploymentArn *string `json:"serviceDeploymentArn"`
	// stopType <p>How you want Amazon ECS to stop the service. </p>
         <p>The valid values are <code>ROLLBACK</code>.</p>
	stopType *StopServiceDeploymentStopType `json:"stopType,omitempty"`
}
// StopServiceDeploymentResponse represents the StopServiceDeploymentResponse structure
type StopServiceDeploymentResponse struct {
	// serviceDeploymentArn <p>The ARN of the stopped service deployment.</p>
	serviceDeploymentArn *string `json:"serviceDeploymentArn,omitempty"`
}
// StopTaskRequest represents the StopTaskRequest structure
type StopTaskRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task to stop.
			If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// task <p>Thefull Amazon Resource Name (ARN) of the task.</p>
	task *string `json:"task"`
	// reason <p>An optional message specified when a task is stopped. For example, if you're using a
			custom scheduler, you can use this parameter to specify the reason for stopping the task
			here, and the message appears in subsequent <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html">DescribeTasks</a>>
			API operations on this task.</p>
	reason *string `json:"reason,omitempty"`
}
// StopTaskResponse represents the StopTaskResponse structure
type StopTaskResponse struct {
	// task <p>The task that was stopped.</p>
	task *Task `json:"task,omitempty"`
}
// SubmitAttachmentStateChangesRequest represents the SubmitAttachmentStateChangesRequest structure
type SubmitAttachmentStateChangesRequest struct {
	// cluster <p>The short name or full ARN of the cluster that hosts the container instance the
			attachment belongs to.</p>
	cluster *string `json:"cluster,omitempty"`
	// attachments <p>Any attachments associated with the state change request.</p>
	attachments *AttachmentStateChanges `json:"attachments"`
}
// SubmitAttachmentStateChangesResponse represents the SubmitAttachmentStateChangesResponse structure
type SubmitAttachmentStateChangesResponse struct {
	// acknowledgment <p>Acknowledgement of the state change.</p>
	acknowledgment *string `json:"acknowledgment,omitempty"`
}
// SubmitContainerStateChangeRequest represents the SubmitContainerStateChangeRequest structure
type SubmitContainerStateChangeRequest struct {
	// exitCode <p>The exit code that's returned for the state change request.</p>
	exitCode *BoxedInteger `json:"exitCode,omitempty"`
	// reason <p>The reason for the state change request.</p>
	reason *string `json:"reason,omitempty"`
	// networkBindings <p>The network bindings of the container.</p>
	networkBindings *NetworkBindings `json:"networkBindings,omitempty"`
	// cluster <p>The short name or full ARN of the cluster that hosts the container.</p>
	cluster *string `json:"cluster,omitempty"`
	// task <p>The task ID or full Amazon Resource Name (ARN) of the task that hosts the container.</p>
	task *string `json:"task,omitempty"`
	// containerName <p>The name of the container.</p>
	containerName *string `json:"containerName,omitempty"`
	// runtimeId <p>The ID of the Docker container.</p>
	runtimeId *string `json:"runtimeId,omitempty"`
	// status <p>The status of the state change request.</p>
	status *string `json:"status,omitempty"`
}
// SubmitContainerStateChangeResponse represents the SubmitContainerStateChangeResponse structure
type SubmitContainerStateChangeResponse struct {
	// acknowledgment <p>Acknowledgement of the state change.</p>
	acknowledgment *string `json:"acknowledgment,omitempty"`
}
// SubmitTaskStateChangeRequest represents the SubmitTaskStateChangeRequest structure
type SubmitTaskStateChangeRequest struct {
	// managedAgents <p>The details for the managed agent that's associated with the task.</p>
	managedAgents *ManagedAgentStateChanges `json:"managedAgents,omitempty"`
	// pullStartedAt <p>The Unix timestamp for the time when the container image pull started.</p>
	pullStartedAt *time.Time `json:"pullStartedAt,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task.</p>
	cluster *string `json:"cluster,omitempty"`
	// status <p>The status of the state change request.</p>
	status *string `json:"status,omitempty"`
	// pullStoppedAt <p>The Unix timestamp for the time when the container image pull completed.</p>
	pullStoppedAt *time.Time `json:"pullStoppedAt,omitempty"`
	// executionStoppedAt <p>The Unix timestamp for the time when the task execution stopped.</p>
	executionStoppedAt *time.Time `json:"executionStoppedAt,omitempty"`
	// task <p>The task ID or full ARN of the task in the state change request.</p>
	task *string `json:"task,omitempty"`
	// reason <p>The reason for the state change request.</p>
	reason *string `json:"reason,omitempty"`
	// containers <p>Any containers that's associated with the state change request.</p>
	containers *ContainerStateChanges `json:"containers,omitempty"`
	// attachments <p>Any attachments associated with the state change request.</p>
	attachments *AttachmentStateChanges `json:"attachments,omitempty"`
}
// SubmitTaskStateChangeResponse represents the SubmitTaskStateChangeResponse structure
type SubmitTaskStateChangeResponse struct {
	// acknowledgment <p>Acknowledgement of the state change.</p>
	acknowledgment *string `json:"acknowledgment,omitempty"`
}
// TagResourceRequest represents the TagResourceRequest structure
type TagResourceRequest struct {
	// resourceArn <p>The Amazon Resource Name (ARN) of the resource to add tags to. Currently, the supported resources are
			Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container
			instances.</p>
         <p>In order to tag a service that has the following ARN format, you need to migrate the
			service to the long ARN. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-arn-migration.html">Migrate an Amazon ECS short service ARN to a long ARN</a> in the <i>Amazon Elastic Container Service
				Developer Guide</i>.</p>
         <p>
            <code>arn:aws:ecs:region:aws_account_id:service/service-name</code>
         </p>
         <p>After the migration is complete, the service has the long ARN format, as shown below. Use this ARN to tag the service.</p>
         <p>
            <code>arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name</code>
         </p>
         <p>If you try to tag a service with a short ARN, you receive an
				<code>InvalidParameterException</code> error.</p>
	resourceArn *string `json:"resourceArn"`
	// tags <p>The tags to add to the resource. A tag is an array of key-value pairs.</p>
         <p>The following basic restrictions apply to tags:</p>
         <ul>
            <li>
               <p>Maximum number of tags per resource - 50</p>
            </li>
            <li>
               <p>For each resource, each tag key must be unique, and each tag key can have only
                    one value.</p>
            </li>
            <li>
               <p>Maximum key length - 128 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>Maximum value length - 256 Unicode characters in UTF-8</p>
            </li>
            <li>
               <p>If your tagging schema is used across multiple services and resources,
                    remember that other services may have restrictions on allowed characters.
                    Generally allowed characters are: letters, numbers, and spaces representable in
                    UTF-8, and the following characters: + - = . _ : / @.</p>
            </li>
            <li>
               <p>Tag keys and values are case-sensitive.</p>
            </li>
            <li>
               <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase
                    combination of such as a prefix for either keys or values as it is reserved for
                    Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with
                    this prefix do not count against your tags per resource limit.</p>
            </li>
         </ul>
	tags *Tags `json:"tags"`
}
// TagResourceResponse represents the TagResourceResponse structure
type TagResourceResponse struct {
}
// UntagResourceRequest represents the UntagResourceRequest structure
type UntagResourceRequest struct {
	// resourceArn <p>The Amazon Resource Name (ARN) of the resource to delete tags from. Currently, the supported resources
			are Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container
			instances.</p>
	resourceArn *string `json:"resourceArn"`
	// tagKeys <p>The keys of the tags to be removed.</p>
	tagKeys *TagKeys `json:"tagKeys"`
}
// UntagResourceResponse represents the UntagResourceResponse structure
type UntagResourceResponse struct {
}
// UpdateCapacityProviderRequest represents the UpdateCapacityProviderRequest structure
type UpdateCapacityProviderRequest struct {
	// name <p>The name of the capacity provider to update.</p>
	name *string `json:"name"`
	// autoScalingGroupProvider <p>An object that represent the parameters to update for the Auto Scaling group capacity
			provider.</p>
	autoScalingGroupProvider *AutoScalingGroupProviderUpdate `json:"autoScalingGroupProvider"`
}
// UpdateCapacityProviderResponse represents the UpdateCapacityProviderResponse structure
type UpdateCapacityProviderResponse struct {
	// capacityProvider <p>Details about the capacity provider.</p>
	capacityProvider *CapacityProvider `json:"capacityProvider,omitempty"`
}
// UpdateClusterRequest represents the UpdateClusterRequest structure
type UpdateClusterRequest struct {
	// configuration <p>The execute command configuration for the cluster.</p>
	configuration *ClusterConfiguration `json:"configuration,omitempty"`
	// serviceConnectDefaults <p>Use this parameter to set a default Service Connect namespace. After you set a default 
	Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as
	client services in the namespace. This setting only applies to new services that set the <code>enabled</code> parameter to
	<code>true</code> in the <code>ServiceConnectConfiguration</code>.
	You can set the namespace of each service individually in the <code>ServiceConnectConfiguration</code> to override this default
	parameter.</p>
         <p>Tasks that run in a namespace can use short names to connect
	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
	Tasks connect through a managed proxy container
	that collects logs and metrics for increased visibility.
	Only the tasks that Amazon ECS services create are supported with Service Connect.
	For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	serviceConnectDefaults *ClusterServiceConnectDefaultsRequest `json:"serviceConnectDefaults,omitempty"`
	// cluster <p>The name of the cluster to modify the settings for.</p>
	cluster *string `json:"cluster"`
	// settings <p>The cluster settings for your cluster.</p>
	settings *ClusterSettings `json:"settings,omitempty"`
}
// UpdateClusterResponse represents the UpdateClusterResponse structure
type UpdateClusterResponse struct {
	// cluster <p>Details about the cluster.</p>
	cluster *Cluster `json:"cluster,omitempty"`
}
// UpdateClusterSettingsRequest represents the UpdateClusterSettingsRequest structure
type UpdateClusterSettingsRequest struct {
	// cluster <p>The name of the cluster to modify the settings for.</p>
	cluster *string `json:"cluster"`
	// settings <p>The setting to use by default for a cluster. This parameter is used to turn on CloudWatch
			Container Insights for a cluster. If this value is specified, it overrides the
				<code>containerInsights</code> value set with <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html">PutAccountSetting</a> or <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html">PutAccountSettingDefault</a>.</p>
         <important>
            <p>Currently, if you delete an existing cluster that does not have Container Insights
				turned on, and then create a new cluster with the same name with Container Insights
				tuned on, Container Insights will not actually be turned on. If you want to preserve
				the same name for your existing cluster and turn on Container Insights, you must
				wait 7 days before you can re-create it.</p>
         </important>
	settings *ClusterSettings `json:"settings"`
}
// UpdateClusterSettingsResponse represents the UpdateClusterSettingsResponse structure
type UpdateClusterSettingsResponse struct {
	// cluster <p>Details about the cluster</p>
	cluster *Cluster `json:"cluster,omitempty"`
}
// UpdateContainerAgentRequest represents the UpdateContainerAgentRequest structure
type UpdateContainerAgentRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is
			running on. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// containerInstance <p>The container instance ID or full ARN entries for the container instance where you
			would like to update the Amazon ECS container agent.</p>
	containerInstance *string `json:"containerInstance"`
}
// UpdateContainerAgentResponse represents the UpdateContainerAgentResponse structure
type UpdateContainerAgentResponse struct {
	// containerInstance <p>The container instance that the container agent was updated for.</p>
	containerInstance *ContainerInstance `json:"containerInstance,omitempty"`
}
// UpdateContainerInstancesStateRequest represents the UpdateContainerInstancesStateRequest structure
type UpdateContainerInstancesStateRequest struct {
	// status <p>The container instance state to update the container instance with. The only valid
			values for this action are <code>ACTIVE</code> and <code>DRAINING</code>. A container
			instance can only be updated to <code>DRAINING</code> status once it has reached an
				<code>ACTIVE</code> state. If a container instance is in <code>REGISTERING</code>,
				<code>DEREGISTERING</code>, or <code>REGISTRATION_FAILED</code> state you can
			describe the container instance but can't update the container instance state.</p>
	status *ContainerInstanceStatus `json:"status"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to
			update. If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// containerInstances <p>A list of up to 10 container instance IDs or full ARN entries.</p>
	containerInstances *StringList `json:"containerInstances"`
}
// UpdateContainerInstancesStateResponse represents the UpdateContainerInstancesStateResponse structure
type UpdateContainerInstancesStateResponse struct {
	// containerInstances <p>The list of container instances.</p>
	containerInstances *ContainerInstances `json:"containerInstances,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// UpdateServicePrimaryTaskSetRequest represents the UpdateServicePrimaryTaskSetRequest structure
type UpdateServicePrimaryTaskSetRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
			set exists in.</p>
	cluster *string `json:"cluster"`
	// service <p>The short name or full Amazon Resource Name (ARN) of the service that the task set exists in.</p>
	service *string `json:"service"`
	// primaryTaskSet <p>The short name or full Amazon Resource Name (ARN) of the task set to set as the primary task set in the
			deployment.</p>
	primaryTaskSet *string `json:"primaryTaskSet"`
}
// UpdateServicePrimaryTaskSetResponse represents the UpdateServicePrimaryTaskSetResponse structure
type UpdateServicePrimaryTaskSetResponse struct {
	// taskSet <p>The details about the task set.</p>
	taskSet *TaskSet `json:"taskSet,omitempty"`
}
// UpdateServiceRequest represents the UpdateServiceRequest structure
type UpdateServiceRequest struct {
	// deploymentConfiguration <p>Optional deployment parameters that control how many tasks run during the deployment
			and the ordering of stopping and starting tasks.</p>
	deploymentConfiguration *DeploymentConfiguration `json:"deploymentConfiguration,omitempty"`
	// availabilityZoneRebalancing <p>Indicates whether to use Availability Zone rebalancing for the service.</p>
         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html">Balancing an Amazon ECS service across Availability Zones</a> in
			the <i>
               <i>Amazon Elastic Container Service Developer Guide</i>
            </i>.</p>
	availabilityZoneRebalancing *AvailabilityZoneRebalancing `json:"availabilityZoneRebalancing,omitempty"`
	// placementStrategy <p>The task placement strategy objects to update the service to use. If no value is
			specified, the existing placement strategy for the service will remain unchanged. If
			this value is specified, it will override the existing placement strategy defined for
			the service. To remove an existing placement strategy, specify an empty object.</p>
         <p>You can specify a maximum of five strategy rules for each service.</p>
	placementStrategy *PlacementStrategies `json:"placementStrategy,omitempty"`
	// enableECSManagedTags <p>Determines whether to turn on Amazon ECS managed tags for the tasks in the service. For
			more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html">Tagging Your Amazon ECS
				Resources</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
         <p>Only tasks launched after the update will reflect the update. To update the tags on
			all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon ECS
			starts new tasks with the updated tags.</p>
	enableECSManagedTags *BoxedBoolean `json:"enableECSManagedTags,omitempty"`
	// propagateTags <p>Determines whether to propagate the tags from the task definition or the service to
			the task. If no value is specified, the tags aren't propagated.</p>
         <p>Only tasks launched after the update will reflect the update. To update the tags on
			all tasks, set <code>forceNewDeployment</code> to <code>true</code>, so that Amazon ECS
			starts new tasks with the updated tags.</p>
	propagateTags *PropagateTags `json:"propagateTags,omitempty"`
	// vpcLatticeConfigurations <p>An object representing the VPC Lattice configuration for the service being
			updated.</p>
	vpcLatticeConfigurations *VpcLatticeConfigurations `json:"vpcLatticeConfigurations,omitempty"`
	// enableExecuteCommand <p>If <code>true</code>, this enables execute command functionality on all task
			containers.</p>
         <p>If you do not want to override the value that was set when the service was created,
			you can set this to <code>null</code> when performing this action.</p>
	enableExecuteCommand *BoxedBoolean `json:"enableExecuteCommand,omitempty"`
	// service <p>The name of the service to update.</p>
	service *string `json:"service"`
	// desiredCount <p>The number of instantiations of the task to place and keep running in your
			service.</p>
	desiredCount *BoxedInteger `json:"desiredCount,omitempty"`
	// taskDefinition <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or
			full ARN of the task definition to run in your service. If a <code>revision</code> is
			not specified, the latest <code>ACTIVE</code> revision is used. If you modify the task
			definition with <code>UpdateService</code>, Amazon ECS spawns a task with the new version of
			the task definition and then stops an old task after the new version is running.</p>
	taskDefinition *string `json:"taskDefinition,omitempty"`
	// networkConfiguration <p>An object representing the network configuration for the service.</p>
	networkConfiguration *NetworkConfiguration `json:"networkConfiguration,omitempty"`
	// placementConstraints <p>An array of task placement constraint objects to update the service to use. If no
			value is specified, the existing placement constraints for the service will remain
			unchanged. If this value is specified, it will override any existing placement
			constraints defined for the service. To remove all existing placement constraints,
			specify an empty array.</p>
         <p>You can specify a maximum of 10 constraints for each task. This limit includes
			constraints in the task definition and those specified at runtime.</p>
	placementConstraints *PlacementConstraints `json:"placementConstraints,omitempty"`
	// platformVersion <p>The platform version that your tasks in the service run on. A platform version is only
			specified for tasks using the Fargate launch type. If a platform version
			is not specified, the <code>LATEST</code> platform version is used. For more
			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate Platform
				Versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	platformVersion *string `json:"platformVersion,omitempty"`
	// forceNewDeployment <p>Determines whether to force a new deployment of the service. By default, deployments
			aren't forced. You can use this option to start a new deployment with no service
			definition changes. For example, you can update a service's tasks to use a newer Docker
			image with the same image/tag combination (<code>my_image:latest</code>) or to roll
			Fargate tasks onto a newer platform version.</p>
	forceNewDeployment *bool `json:"forceNewDeployment,omitempty"`
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that your service runs on.
			If you do not specify a cluster, the default cluster is assumed.</p>
	cluster *string `json:"cluster,omitempty"`
	// loadBalancers <p>A list of Elastic Load Balancing load balancer objects. It contains the load balancer name, the
			container name, and the container port to access from the load balancer. The container
			name is as it appears in a container definition.</p>
         <p>When you add, update, or remove a load balancer configuration, Amazon ECS starts new tasks
			with the updated Elastic Load Balancing configuration, and then stops the old tasks when the new tasks
			are running.</p>
         <p>For services that use rolling updates, you can add, update, or remove Elastic Load Balancing target
			groups. You can update from a single target group to multiple target groups and from
			multiple target groups to a single target group.</p>
         <p>For services that use blue/green deployments, you can update Elastic Load Balancing target groups by
			using <code>
               <a href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html">CreateDeployment</a>
            </code> through CodeDeploy. Note that multiple target groups
			are not supported for blue/green deployments. For more information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register
				multiple target groups with a service</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. </p>
         <p>For services that use the external deployment controller, you can add, update, or
			remove load balancers by using <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateTaskSet.html">CreateTaskSet</a>.
			Note that multiple target groups are not supported for external deployments. For more
			information see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html">Register
				multiple target groups with a service</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. </p>
         <p>You can remove existing <code>loadBalancers</code> by passing an empty list.</p>
	loadBalancers *LoadBalancers `json:"loadBalancers,omitempty"`
	// serviceRegistries <p>The details for the service discovery registries to assign to this service. For more
			information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service
				Discovery</a>.</p>
         <p>When you add, update, or remove the service registries configuration, Amazon ECS starts new
			tasks with the updated service registries configuration, and then stops the old tasks
			when the new tasks are running.</p>
         <p>You can remove existing <code>serviceRegistries</code> by passing an empty
			list.</p>
	serviceRegistries *ServiceRegistries `json:"serviceRegistries,omitempty"`
	// serviceConnectConfiguration <p>The configuration for this service to discover and connect to
	services, and be discovered by, and connected from, other services within a namespace.</p>
         <p>Tasks that run in a namespace can use short names to connect
	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
	Tasks connect through a managed proxy container
	that collects logs and metrics for increased visibility.
	Only the tasks that Amazon ECS services create are supported with Service Connect.
	For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html">Service Connect</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
	serviceConnectConfiguration *ServiceConnectConfiguration `json:"serviceConnectConfiguration,omitempty"`
	// volumeConfigurations <p>The details of the volume that was <code>configuredAtLaunch</code>. You can configure
			the size, volumeType, IOPS, throughput, snapshot and encryption in <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ServiceManagedEBSVolumeConfiguration.html">ServiceManagedEBSVolumeConfiguration</a>. The <code>name</code> of the volume
			must match the <code>name</code> from the task definition. If set to null, no new
			deployment is triggered. Otherwise, if this configuration differs from the existing one,
			it triggers a new deployment.</p>
	volumeConfigurations *ServiceVolumeConfigurations `json:"volumeConfigurations,omitempty"`
	// healthCheckGracePeriodSeconds <p>The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
			Elastic Load Balancing, VPC Lattice, and container health checks after a task has first started. If you don't
			specify a health check grace period value, the default value of <code>0</code> is used.
			If you don't use any of the health checks, then
				<code>healthCheckGracePeriodSeconds</code> is unused.</p>
         <p>If your service's tasks take a while to start and respond to health checks, you can
			specify a health check grace period of up to 2,147,483,647 seconds (about 69 years).
			During that time, the Amazon ECS service scheduler ignores health check status. This grace
			period can prevent the service scheduler from marking tasks as unhealthy and stopping
			them before they have time to come up.</p>
	healthCheckGracePeriodSeconds *BoxedInteger `json:"healthCheckGracePeriodSeconds,omitempty"`
	// capacityProviderStrategy <p>The capacity provider strategy to update the service to use.</p>
         <p>if the service uses the default capacity provider strategy for the cluster, the
			service can be updated to use one or more capacity providers as opposed to the default
			capacity provider strategy. However, when a service is using a capacity provider
			strategy that's not the default capacity provider strategy, the service can't be updated
			to use the cluster's default capacity provider strategy.</p>
         <p>A capacity provider strategy consists of one or more capacity providers along with the
				<code>base</code> and <code>weight</code> to assign to them. A capacity provider
			must be associated with the cluster to be used in a capacity provider strategy. The
				<a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html">PutClusterCapacityProviders</a> API is used to associate a capacity provider
			with a cluster. Only capacity providers with an <code>ACTIVE</code> or
				<code>UPDATING</code> status can be used.</p>
         <p>If specifying a capacity provider that uses an Auto Scaling group, the capacity
			provider must already be created. New capacity providers can be created with the <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateClusterCapacityProvider.html">CreateClusterCapacityProvider</a> API operation.</p>
         <p>To use a Fargate capacity provider, specify either the <code>FARGATE</code> or
				<code>FARGATE_SPOT</code> capacity providers. The Fargate capacity providers are
			available to all accounts and only need to be associated with a cluster to be
			used.</p>
         <p>The <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html">PutClusterCapacityProviders</a>API operation is used to update the list of
			available capacity providers for a cluster after the cluster is created.</p>
         <p></p>
	capacityProviderStrategy *CapacityProviderStrategy `json:"capacityProviderStrategy,omitempty"`
}
// UpdateServiceResponse represents the UpdateServiceResponse structure
type UpdateServiceResponse struct {
	// service <p>The full description of your service following the update call.</p>
	service *Service `json:"service,omitempty"`
}
// UpdateTaskProtectionRequest represents the UpdateTaskProtectionRequest structure
type UpdateTaskProtectionRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
			sets exist in.</p>
	cluster *string `json:"cluster"`
	// tasks <p>A list of up to 10 task IDs or full ARN entries.</p>
	tasks *StringList `json:"tasks"`
	// protectionEnabled <p>Specify <code>true</code> to mark a task for protection and <code>false</code> to
			unset protection, making it eligible for termination.</p>
	protectionEnabled *bool `json:"protectionEnabled"`
	// expiresInMinutes <p>If you set <code>protectionEnabled</code> to <code>true</code>, you can specify the
			duration for task protection in minutes. You can specify a value from 1 minute to up to
			2,880 minutes (48 hours). During this time, your task will not be terminated by scale-in
			events from Service Auto Scaling or deployments. After this time period lapses,
				<code>protectionEnabled</code> will be reset to <code>false</code>.</p>
         <p>If you don’t specify the time, then the task is automatically protected for 120
			minutes (2 hours).</p>
	expiresInMinutes *BoxedInteger `json:"expiresInMinutes,omitempty"`
}
// UpdateTaskProtectionResponse represents the UpdateTaskProtectionResponse structure
type UpdateTaskProtectionResponse struct {
	// protectedTasks <p>A list of tasks with the following information.</p>
         <ul>
            <li>
               <p>
                  <code>taskArn</code>: The task ARN.</p>
            </li>
            <li>
               <p>
                  <code>protectionEnabled</code>: The protection status of the task. If scale-in
					protection is turned on for a task, the value is <code>true</code>. Otherwise,
					it is <code>false</code>.</p>
            </li>
            <li>
               <p>
                  <code>expirationDate</code>: The epoch time when protection for the task will
					expire.</p>
            </li>
         </ul>
	protectedTasks *ProtectedTasks `json:"protectedTasks,omitempty"`
	// failures <p>Any failures associated with the call.</p>
	failures *Failures `json:"failures,omitempty"`
}
// UpdateTaskSetRequest represents the UpdateTaskSetRequest structure
type UpdateTaskSetRequest struct {
	// cluster <p>The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
			set is found in.</p>
	cluster *string `json:"cluster"`
	// service <p>The short name or full Amazon Resource Name (ARN) of the service that the task set is found in.</p>
	service *string `json:"service"`
	// taskSet <p>The short name or full Amazon Resource Name (ARN) of the task set to update.</p>
	taskSet *string `json:"taskSet"`
	// scale <p>A floating-point percentage of the desired number of tasks to place and keep running
			in the task set.</p>
	scale *Scale `json:"scale"`
}
// UpdateTaskSetResponse represents the UpdateTaskSetResponse structure
type UpdateTaskSetResponse struct {
	// taskSet <p>Details about the task set.</p>
	taskSet *TaskSet `json:"taskSet,omitempty"`
}
