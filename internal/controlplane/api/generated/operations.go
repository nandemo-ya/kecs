// Code generated by cmd/codegen. DO NOT EDIT.

package generated

import (
	"context"
	"net/http"
)

// ECSServiceInterface defines the interface for all ECS operations
type ECSServiceInterface interface {
	CreateCapacityProvider(ctx context.Context, req *CreateCapacityProviderRequest) (*CreateCapacityProviderResponse, error)
	CreateCluster(ctx context.Context, req *CreateClusterRequest) (*CreateClusterResponse, error)
	CreateService(ctx context.Context, req *CreateServiceRequest) (*CreateServiceResponse, error)
	CreateTaskSet(ctx context.Context, req *CreateTaskSetRequest) (*CreateTaskSetResponse, error)
	DeleteAccountSetting(ctx context.Context, req *DeleteAccountSettingRequest) (*DeleteAccountSettingResponse, error)
	DeleteAttributes(ctx context.Context, req *DeleteAttributesRequest) (*DeleteAttributesResponse, error)
	DeleteCapacityProvider(ctx context.Context, req *DeleteCapacityProviderRequest) (*DeleteCapacityProviderResponse, error)
	DeleteCluster(ctx context.Context, req *DeleteClusterRequest) (*DeleteClusterResponse, error)
	DeleteService(ctx context.Context, req *DeleteServiceRequest) (*DeleteServiceResponse, error)
	DeleteTaskDefinitions(ctx context.Context, req *DeleteTaskDefinitionsRequest) (*DeleteTaskDefinitionsResponse, error)
	DeleteTaskSet(ctx context.Context, req *DeleteTaskSetRequest) (*DeleteTaskSetResponse, error)
	DeregisterContainerInstance(ctx context.Context, req *DeregisterContainerInstanceRequest) (*DeregisterContainerInstanceResponse, error)
	DeregisterTaskDefinition(ctx context.Context, req *DeregisterTaskDefinitionRequest) (*DeregisterTaskDefinitionResponse, error)
	DescribeCapacityProviders(ctx context.Context, req *DescribeCapacityProvidersRequest) (*DescribeCapacityProvidersResponse, error)
	DescribeClusters(ctx context.Context, req *DescribeClustersRequest) (*DescribeClustersResponse, error)
	DescribeContainerInstances(ctx context.Context, req *DescribeContainerInstancesRequest) (*DescribeContainerInstancesResponse, error)
	DescribeServiceDeployments(ctx context.Context, req *DescribeServiceDeploymentsRequest) (*DescribeServiceDeploymentsResponse, error)
	DescribeServiceRevisions(ctx context.Context, req *DescribeServiceRevisionsRequest) (*DescribeServiceRevisionsResponse, error)
	DescribeServices(ctx context.Context, req *DescribeServicesRequest) (*DescribeServicesResponse, error)
	DescribeTaskDefinition(ctx context.Context, req *DescribeTaskDefinitionRequest) (*DescribeTaskDefinitionResponse, error)
	DescribeTaskSets(ctx context.Context, req *DescribeTaskSetsRequest) (*DescribeTaskSetsResponse, error)
	DescribeTasks(ctx context.Context, req *DescribeTasksRequest) (*DescribeTasksResponse, error)
	DiscoverPollEndpoint(ctx context.Context, req *DiscoverPollEndpointRequest) (*DiscoverPollEndpointResponse, error)
	ExecuteCommand(ctx context.Context, req *ExecuteCommandRequest) (*ExecuteCommandResponse, error)
	GetTaskProtection(ctx context.Context, req *GetTaskProtectionRequest) (*GetTaskProtectionResponse, error)
	ListAccountSettings(ctx context.Context, req *ListAccountSettingsRequest) (*ListAccountSettingsResponse, error)
	ListAttributes(ctx context.Context, req *ListAttributesRequest) (*ListAttributesResponse, error)
	ListClusters(ctx context.Context, req *ListClustersRequest) (*ListClustersResponse, error)
	ListContainerInstances(ctx context.Context, req *ListContainerInstancesRequest) (*ListContainerInstancesResponse, error)
	ListServiceDeployments(ctx context.Context, req *ListServiceDeploymentsRequest) (*ListServiceDeploymentsResponse, error)
	ListServices(ctx context.Context, req *ListServicesRequest) (*ListServicesResponse, error)
	ListServicesByNamespace(ctx context.Context, req *ListServicesByNamespaceRequest) (*ListServicesByNamespaceResponse, error)
	ListTagsForResource(ctx context.Context, req *ListTagsForResourceRequest) (*ListTagsForResourceResponse, error)
	ListTaskDefinitionFamilies(ctx context.Context, req *ListTaskDefinitionFamiliesRequest) (*ListTaskDefinitionFamiliesResponse, error)
	ListTaskDefinitions(ctx context.Context, req *ListTaskDefinitionsRequest) (*ListTaskDefinitionsResponse, error)
	ListTasks(ctx context.Context, req *ListTasksRequest) (*ListTasksResponse, error)
	PutAccountSetting(ctx context.Context, req *PutAccountSettingRequest) (*PutAccountSettingResponse, error)
	PutAccountSettingDefault(ctx context.Context, req *PutAccountSettingDefaultRequest) (*PutAccountSettingDefaultResponse, error)
	PutAttributes(ctx context.Context, req *PutAttributesRequest) (*PutAttributesResponse, error)
	PutClusterCapacityProviders(ctx context.Context, req *PutClusterCapacityProvidersRequest) (*PutClusterCapacityProvidersResponse, error)
	RegisterContainerInstance(ctx context.Context, req *RegisterContainerInstanceRequest) (*RegisterContainerInstanceResponse, error)
	RegisterTaskDefinition(ctx context.Context, req *RegisterTaskDefinitionRequest) (*RegisterTaskDefinitionResponse, error)
	RunTask(ctx context.Context, req *RunTaskRequest) (*RunTaskResponse, error)
	StartTask(ctx context.Context, req *StartTaskRequest) (*StartTaskResponse, error)
	StopServiceDeployment(ctx context.Context, req *StopServiceDeploymentRequest) (*StopServiceDeploymentResponse, error)
	StopTask(ctx context.Context, req *StopTaskRequest) (*StopTaskResponse, error)
	SubmitAttachmentStateChanges(ctx context.Context, req *SubmitAttachmentStateChangesRequest) (*SubmitAttachmentStateChangesResponse, error)
	SubmitContainerStateChange(ctx context.Context, req *SubmitContainerStateChangeRequest) (*SubmitContainerStateChangeResponse, error)
	SubmitTaskStateChange(ctx context.Context, req *SubmitTaskStateChangeRequest) (*SubmitTaskStateChangeResponse, error)
	TagResource(ctx context.Context, req *TagResourceRequest) (*TagResourceResponse, error)
	UntagResource(ctx context.Context, req *UntagResourceRequest) (*UntagResourceResponse, error)
	UpdateCapacityProvider(ctx context.Context, req *UpdateCapacityProviderRequest) (*UpdateCapacityProviderResponse, error)
	UpdateCluster(ctx context.Context, req *UpdateClusterRequest) (*UpdateClusterResponse, error)
	UpdateClusterSettings(ctx context.Context, req *UpdateClusterSettingsRequest) (*UpdateClusterSettingsResponse, error)
	UpdateContainerAgent(ctx context.Context, req *UpdateContainerAgentRequest) (*UpdateContainerAgentResponse, error)
	UpdateContainerInstancesState(ctx context.Context, req *UpdateContainerInstancesStateRequest) (*UpdateContainerInstancesStateResponse, error)
	UpdateService(ctx context.Context, req *UpdateServiceRequest) (*UpdateServiceResponse, error)
	UpdateServicePrimaryTaskSet(ctx context.Context, req *UpdateServicePrimaryTaskSetRequest) (*UpdateServicePrimaryTaskSetResponse, error)
	UpdateTaskProtection(ctx context.Context, req *UpdateTaskProtectionRequest) (*UpdateTaskProtectionResponse, error)
	UpdateTaskSet(ctx context.Context, req *UpdateTaskSetRequest) (*UpdateTaskSetResponse, error)
}

// ECSService implements the ECS service operations
type ECSService struct{}

// NewECSService creates a new ECS service instance
func NewECSService() *ECSService {
	return &ECSService{}
}

// CreateCapacityProvider implements the CreateCapacityProvider operation
func (s *ECSService) CreateCapacityProvider(ctx context.Context, req *CreateCapacityProviderRequest) (*CreateCapacityProviderResponse, error) {
	// TODO: Implement CreateCapacityProvider operation
	return &CreateCapacityProviderResponse{}, nil
}

// CreateCluster implements the CreateCluster operation
func (s *ECSService) CreateCluster(ctx context.Context, req *CreateClusterRequest) (*CreateClusterResponse, error) {
	// TODO: Implement CreateCluster operation
	return &CreateClusterResponse{}, nil
}

// CreateService implements the CreateService operation
func (s *ECSService) CreateService(ctx context.Context, req *CreateServiceRequest) (*CreateServiceResponse, error) {
	// TODO: Implement CreateService operation
	return &CreateServiceResponse{}, nil
}

// CreateTaskSet implements the CreateTaskSet operation
func (s *ECSService) CreateTaskSet(ctx context.Context, req *CreateTaskSetRequest) (*CreateTaskSetResponse, error) {
	// TODO: Implement CreateTaskSet operation
	return &CreateTaskSetResponse{}, nil
}

// DeleteAccountSetting implements the DeleteAccountSetting operation
func (s *ECSService) DeleteAccountSetting(ctx context.Context, req *DeleteAccountSettingRequest) (*DeleteAccountSettingResponse, error) {
	// TODO: Implement DeleteAccountSetting operation
	return &DeleteAccountSettingResponse{}, nil
}

// DeleteAttributes implements the DeleteAttributes operation
func (s *ECSService) DeleteAttributes(ctx context.Context, req *DeleteAttributesRequest) (*DeleteAttributesResponse, error) {
	// TODO: Implement DeleteAttributes operation
	return &DeleteAttributesResponse{}, nil
}

// DeleteCapacityProvider implements the DeleteCapacityProvider operation
func (s *ECSService) DeleteCapacityProvider(ctx context.Context, req *DeleteCapacityProviderRequest) (*DeleteCapacityProviderResponse, error) {
	// TODO: Implement DeleteCapacityProvider operation
	return &DeleteCapacityProviderResponse{}, nil
}

// DeleteCluster implements the DeleteCluster operation
func (s *ECSService) DeleteCluster(ctx context.Context, req *DeleteClusterRequest) (*DeleteClusterResponse, error) {
	// TODO: Implement DeleteCluster operation
	return &DeleteClusterResponse{}, nil
}

// DeleteService implements the DeleteService operation
func (s *ECSService) DeleteService(ctx context.Context, req *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	// TODO: Implement DeleteService operation
	return &DeleteServiceResponse{}, nil
}

// DeleteTaskDefinitions implements the DeleteTaskDefinitions operation
func (s *ECSService) DeleteTaskDefinitions(ctx context.Context, req *DeleteTaskDefinitionsRequest) (*DeleteTaskDefinitionsResponse, error) {
	// TODO: Implement DeleteTaskDefinitions operation
	return &DeleteTaskDefinitionsResponse{}, nil
}

// DeleteTaskSet implements the DeleteTaskSet operation
func (s *ECSService) DeleteTaskSet(ctx context.Context, req *DeleteTaskSetRequest) (*DeleteTaskSetResponse, error) {
	// TODO: Implement DeleteTaskSet operation
	return &DeleteTaskSetResponse{}, nil
}

// DeregisterContainerInstance implements the DeregisterContainerInstance operation
func (s *ECSService) DeregisterContainerInstance(ctx context.Context, req *DeregisterContainerInstanceRequest) (*DeregisterContainerInstanceResponse, error) {
	// TODO: Implement DeregisterContainerInstance operation
	return &DeregisterContainerInstanceResponse{}, nil
}

// DeregisterTaskDefinition implements the DeregisterTaskDefinition operation
func (s *ECSService) DeregisterTaskDefinition(ctx context.Context, req *DeregisterTaskDefinitionRequest) (*DeregisterTaskDefinitionResponse, error) {
	// TODO: Implement DeregisterTaskDefinition operation
	return &DeregisterTaskDefinitionResponse{}, nil
}

// DescribeCapacityProviders implements the DescribeCapacityProviders operation
func (s *ECSService) DescribeCapacityProviders(ctx context.Context, req *DescribeCapacityProvidersRequest) (*DescribeCapacityProvidersResponse, error) {
	// TODO: Implement DescribeCapacityProviders operation
	return &DescribeCapacityProvidersResponse{}, nil
}

// DescribeClusters implements the DescribeClusters operation
func (s *ECSService) DescribeClusters(ctx context.Context, req *DescribeClustersRequest) (*DescribeClustersResponse, error) {
	// TODO: Implement DescribeClusters operation
	return &DescribeClustersResponse{}, nil
}

// DescribeContainerInstances implements the DescribeContainerInstances operation
func (s *ECSService) DescribeContainerInstances(ctx context.Context, req *DescribeContainerInstancesRequest) (*DescribeContainerInstancesResponse, error) {
	// TODO: Implement DescribeContainerInstances operation
	return &DescribeContainerInstancesResponse{}, nil
}

// DescribeServiceDeployments implements the DescribeServiceDeployments operation
func (s *ECSService) DescribeServiceDeployments(ctx context.Context, req *DescribeServiceDeploymentsRequest) (*DescribeServiceDeploymentsResponse, error) {
	// TODO: Implement DescribeServiceDeployments operation
	return &DescribeServiceDeploymentsResponse{}, nil
}

// DescribeServiceRevisions implements the DescribeServiceRevisions operation
func (s *ECSService) DescribeServiceRevisions(ctx context.Context, req *DescribeServiceRevisionsRequest) (*DescribeServiceRevisionsResponse, error) {
	// TODO: Implement DescribeServiceRevisions operation
	return &DescribeServiceRevisionsResponse{}, nil
}

// DescribeServices implements the DescribeServices operation
func (s *ECSService) DescribeServices(ctx context.Context, req *DescribeServicesRequest) (*DescribeServicesResponse, error) {
	// TODO: Implement DescribeServices operation
	return &DescribeServicesResponse{}, nil
}

// DescribeTaskDefinition implements the DescribeTaskDefinition operation
func (s *ECSService) DescribeTaskDefinition(ctx context.Context, req *DescribeTaskDefinitionRequest) (*DescribeTaskDefinitionResponse, error) {
	// TODO: Implement DescribeTaskDefinition operation
	return &DescribeTaskDefinitionResponse{}, nil
}

// DescribeTaskSets implements the DescribeTaskSets operation
func (s *ECSService) DescribeTaskSets(ctx context.Context, req *DescribeTaskSetsRequest) (*DescribeTaskSetsResponse, error) {
	// TODO: Implement DescribeTaskSets operation
	return &DescribeTaskSetsResponse{}, nil
}

// DescribeTasks implements the DescribeTasks operation
func (s *ECSService) DescribeTasks(ctx context.Context, req *DescribeTasksRequest) (*DescribeTasksResponse, error) {
	// TODO: Implement DescribeTasks operation
	return &DescribeTasksResponse{}, nil
}

// DiscoverPollEndpoint implements the DiscoverPollEndpoint operation
func (s *ECSService) DiscoverPollEndpoint(ctx context.Context, req *DiscoverPollEndpointRequest) (*DiscoverPollEndpointResponse, error) {
	// TODO: Implement DiscoverPollEndpoint operation
	return &DiscoverPollEndpointResponse{}, nil
}

// ExecuteCommand implements the ExecuteCommand operation
func (s *ECSService) ExecuteCommand(ctx context.Context, req *ExecuteCommandRequest) (*ExecuteCommandResponse, error) {
	// TODO: Implement ExecuteCommand operation
	return &ExecuteCommandResponse{}, nil
}

// GetTaskProtection implements the GetTaskProtection operation
func (s *ECSService) GetTaskProtection(ctx context.Context, req *GetTaskProtectionRequest) (*GetTaskProtectionResponse, error) {
	// TODO: Implement GetTaskProtection operation
	return &GetTaskProtectionResponse{}, nil
}

// ListAccountSettings implements the ListAccountSettings operation
func (s *ECSService) ListAccountSettings(ctx context.Context, req *ListAccountSettingsRequest) (*ListAccountSettingsResponse, error) {
	// TODO: Implement ListAccountSettings operation
	return &ListAccountSettingsResponse{}, nil
}

// ListAttributes implements the ListAttributes operation
func (s *ECSService) ListAttributes(ctx context.Context, req *ListAttributesRequest) (*ListAttributesResponse, error) {
	// TODO: Implement ListAttributes operation
	return &ListAttributesResponse{}, nil
}

// ListClusters implements the ListClusters operation
func (s *ECSService) ListClusters(ctx context.Context, req *ListClustersRequest) (*ListClustersResponse, error) {
	// TODO: Implement ListClusters operation
	return &ListClustersResponse{}, nil
}

// ListContainerInstances implements the ListContainerInstances operation
func (s *ECSService) ListContainerInstances(ctx context.Context, req *ListContainerInstancesRequest) (*ListContainerInstancesResponse, error) {
	// TODO: Implement ListContainerInstances operation
	return &ListContainerInstancesResponse{}, nil
}

// ListServiceDeployments implements the ListServiceDeployments operation
func (s *ECSService) ListServiceDeployments(ctx context.Context, req *ListServiceDeploymentsRequest) (*ListServiceDeploymentsResponse, error) {
	// TODO: Implement ListServiceDeployments operation
	return &ListServiceDeploymentsResponse{}, nil
}

// ListServices implements the ListServices operation
func (s *ECSService) ListServices(ctx context.Context, req *ListServicesRequest) (*ListServicesResponse, error) {
	// TODO: Implement ListServices operation
	return &ListServicesResponse{}, nil
}

// ListServicesByNamespace implements the ListServicesByNamespace operation
func (s *ECSService) ListServicesByNamespace(ctx context.Context, req *ListServicesByNamespaceRequest) (*ListServicesByNamespaceResponse, error) {
	// TODO: Implement ListServicesByNamespace operation
	return &ListServicesByNamespaceResponse{}, nil
}

// ListTagsForResource implements the ListTagsForResource operation
func (s *ECSService) ListTagsForResource(ctx context.Context, req *ListTagsForResourceRequest) (*ListTagsForResourceResponse, error) {
	// TODO: Implement ListTagsForResource operation
	return &ListTagsForResourceResponse{}, nil
}

// ListTaskDefinitionFamilies implements the ListTaskDefinitionFamilies operation
func (s *ECSService) ListTaskDefinitionFamilies(ctx context.Context, req *ListTaskDefinitionFamiliesRequest) (*ListTaskDefinitionFamiliesResponse, error) {
	// TODO: Implement ListTaskDefinitionFamilies operation
	return &ListTaskDefinitionFamiliesResponse{}, nil
}

// ListTaskDefinitions implements the ListTaskDefinitions operation
func (s *ECSService) ListTaskDefinitions(ctx context.Context, req *ListTaskDefinitionsRequest) (*ListTaskDefinitionsResponse, error) {
	// TODO: Implement ListTaskDefinitions operation
	return &ListTaskDefinitionsResponse{}, nil
}

// ListTasks implements the ListTasks operation
func (s *ECSService) ListTasks(ctx context.Context, req *ListTasksRequest) (*ListTasksResponse, error) {
	// TODO: Implement ListTasks operation
	return &ListTasksResponse{}, nil
}

// PutAccountSetting implements the PutAccountSetting operation
func (s *ECSService) PutAccountSetting(ctx context.Context, req *PutAccountSettingRequest) (*PutAccountSettingResponse, error) {
	// TODO: Implement PutAccountSetting operation
	return &PutAccountSettingResponse{}, nil
}

// PutAccountSettingDefault implements the PutAccountSettingDefault operation
func (s *ECSService) PutAccountSettingDefault(ctx context.Context, req *PutAccountSettingDefaultRequest) (*PutAccountSettingDefaultResponse, error) {
	// TODO: Implement PutAccountSettingDefault operation
	return &PutAccountSettingDefaultResponse{}, nil
}

// PutAttributes implements the PutAttributes operation
func (s *ECSService) PutAttributes(ctx context.Context, req *PutAttributesRequest) (*PutAttributesResponse, error) {
	// TODO: Implement PutAttributes operation
	return &PutAttributesResponse{}, nil
}

// PutClusterCapacityProviders implements the PutClusterCapacityProviders operation
func (s *ECSService) PutClusterCapacityProviders(ctx context.Context, req *PutClusterCapacityProvidersRequest) (*PutClusterCapacityProvidersResponse, error) {
	// TODO: Implement PutClusterCapacityProviders operation
	return &PutClusterCapacityProvidersResponse{}, nil
}

// RegisterContainerInstance implements the RegisterContainerInstance operation
func (s *ECSService) RegisterContainerInstance(ctx context.Context, req *RegisterContainerInstanceRequest) (*RegisterContainerInstanceResponse, error) {
	// TODO: Implement RegisterContainerInstance operation
	return &RegisterContainerInstanceResponse{}, nil
}

// RegisterTaskDefinition implements the RegisterTaskDefinition operation
func (s *ECSService) RegisterTaskDefinition(ctx context.Context, req *RegisterTaskDefinitionRequest) (*RegisterTaskDefinitionResponse, error) {
	// TODO: Implement RegisterTaskDefinition operation
	return &RegisterTaskDefinitionResponse{}, nil
}

// RunTask implements the RunTask operation
func (s *ECSService) RunTask(ctx context.Context, req *RunTaskRequest) (*RunTaskResponse, error) {
	// TODO: Implement RunTask operation
	return &RunTaskResponse{}, nil
}

// StartTask implements the StartTask operation
func (s *ECSService) StartTask(ctx context.Context, req *StartTaskRequest) (*StartTaskResponse, error) {
	// TODO: Implement StartTask operation
	return &StartTaskResponse{}, nil
}

// StopServiceDeployment implements the StopServiceDeployment operation
func (s *ECSService) StopServiceDeployment(ctx context.Context, req *StopServiceDeploymentRequest) (*StopServiceDeploymentResponse, error) {
	// TODO: Implement StopServiceDeployment operation
	return &StopServiceDeploymentResponse{}, nil
}

// StopTask implements the StopTask operation
func (s *ECSService) StopTask(ctx context.Context, req *StopTaskRequest) (*StopTaskResponse, error) {
	// TODO: Implement StopTask operation
	return &StopTaskResponse{}, nil
}

// SubmitAttachmentStateChanges implements the SubmitAttachmentStateChanges operation
func (s *ECSService) SubmitAttachmentStateChanges(ctx context.Context, req *SubmitAttachmentStateChangesRequest) (*SubmitAttachmentStateChangesResponse, error) {
	// TODO: Implement SubmitAttachmentStateChanges operation
	return &SubmitAttachmentStateChangesResponse{}, nil
}

// SubmitContainerStateChange implements the SubmitContainerStateChange operation
func (s *ECSService) SubmitContainerStateChange(ctx context.Context, req *SubmitContainerStateChangeRequest) (*SubmitContainerStateChangeResponse, error) {
	// TODO: Implement SubmitContainerStateChange operation
	return &SubmitContainerStateChangeResponse{}, nil
}

// SubmitTaskStateChange implements the SubmitTaskStateChange operation
func (s *ECSService) SubmitTaskStateChange(ctx context.Context, req *SubmitTaskStateChangeRequest) (*SubmitTaskStateChangeResponse, error) {
	// TODO: Implement SubmitTaskStateChange operation
	return &SubmitTaskStateChangeResponse{}, nil
}

// TagResource implements the TagResource operation
func (s *ECSService) TagResource(ctx context.Context, req *TagResourceRequest) (*TagResourceResponse, error) {
	// TODO: Implement TagResource operation
	return &TagResourceResponse{}, nil
}

// UntagResource implements the UntagResource operation
func (s *ECSService) UntagResource(ctx context.Context, req *UntagResourceRequest) (*UntagResourceResponse, error) {
	// TODO: Implement UntagResource operation
	return &UntagResourceResponse{}, nil
}

// UpdateCapacityProvider implements the UpdateCapacityProvider operation
func (s *ECSService) UpdateCapacityProvider(ctx context.Context, req *UpdateCapacityProviderRequest) (*UpdateCapacityProviderResponse, error) {
	// TODO: Implement UpdateCapacityProvider operation
	return &UpdateCapacityProviderResponse{}, nil
}

// UpdateCluster implements the UpdateCluster operation
func (s *ECSService) UpdateCluster(ctx context.Context, req *UpdateClusterRequest) (*UpdateClusterResponse, error) {
	// TODO: Implement UpdateCluster operation
	return &UpdateClusterResponse{}, nil
}

// UpdateClusterSettings implements the UpdateClusterSettings operation
func (s *ECSService) UpdateClusterSettings(ctx context.Context, req *UpdateClusterSettingsRequest) (*UpdateClusterSettingsResponse, error) {
	// TODO: Implement UpdateClusterSettings operation
	return &UpdateClusterSettingsResponse{}, nil
}

// UpdateContainerAgent implements the UpdateContainerAgent operation
func (s *ECSService) UpdateContainerAgent(ctx context.Context, req *UpdateContainerAgentRequest) (*UpdateContainerAgentResponse, error) {
	// TODO: Implement UpdateContainerAgent operation
	return &UpdateContainerAgentResponse{}, nil
}

// UpdateContainerInstancesState implements the UpdateContainerInstancesState operation
func (s *ECSService) UpdateContainerInstancesState(ctx context.Context, req *UpdateContainerInstancesStateRequest) (*UpdateContainerInstancesStateResponse, error) {
	// TODO: Implement UpdateContainerInstancesState operation
	return &UpdateContainerInstancesStateResponse{}, nil
}

// UpdateService implements the UpdateService operation
func (s *ECSService) UpdateService(ctx context.Context, req *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	// TODO: Implement UpdateService operation
	return &UpdateServiceResponse{}, nil
}

// UpdateServicePrimaryTaskSet implements the UpdateServicePrimaryTaskSet operation
func (s *ECSService) UpdateServicePrimaryTaskSet(ctx context.Context, req *UpdateServicePrimaryTaskSetRequest) (*UpdateServicePrimaryTaskSetResponse, error) {
	// TODO: Implement UpdateServicePrimaryTaskSet operation
	return &UpdateServicePrimaryTaskSetResponse{}, nil
}

// UpdateTaskProtection implements the UpdateTaskProtection operation
func (s *ECSService) UpdateTaskProtection(ctx context.Context, req *UpdateTaskProtectionRequest) (*UpdateTaskProtectionResponse, error) {
	// TODO: Implement UpdateTaskProtection operation
	return &UpdateTaskProtectionResponse{}, nil
}

// UpdateTaskSet implements the UpdateTaskSet operation
func (s *ECSService) UpdateTaskSet(ctx context.Context, req *UpdateTaskSetRequest) (*UpdateTaskSetResponse, error) {
	// TODO: Implement UpdateTaskSet operation
	return &UpdateTaskSetResponse{}, nil
}

// HTTP handlers for each operation

// HandleCreateCapacityProvider handles HTTP requests for CreateCapacityProvider
func HandleCreateCapacityProvider(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into CreateCapacityProviderRequest
		// TODO: Call service.CreateCapacityProvider(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleCreateCluster handles HTTP requests for CreateCluster
func HandleCreateCluster(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into CreateClusterRequest
		// TODO: Call service.CreateCluster(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleCreateService handles HTTP requests for CreateService
func HandleCreateService(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into CreateServiceRequest
		// TODO: Call service.CreateService(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleCreateTaskSet handles HTTP requests for CreateTaskSet
func HandleCreateTaskSet(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into CreateTaskSetRequest
		// TODO: Call service.CreateTaskSet(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeleteAccountSetting handles HTTP requests for DeleteAccountSetting
func HandleDeleteAccountSetting(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeleteAccountSettingRequest
		// TODO: Call service.DeleteAccountSetting(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeleteAttributes handles HTTP requests for DeleteAttributes
func HandleDeleteAttributes(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeleteAttributesRequest
		// TODO: Call service.DeleteAttributes(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeleteCapacityProvider handles HTTP requests for DeleteCapacityProvider
func HandleDeleteCapacityProvider(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeleteCapacityProviderRequest
		// TODO: Call service.DeleteCapacityProvider(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeleteCluster handles HTTP requests for DeleteCluster
func HandleDeleteCluster(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeleteClusterRequest
		// TODO: Call service.DeleteCluster(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeleteService handles HTTP requests for DeleteService
func HandleDeleteService(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeleteServiceRequest
		// TODO: Call service.DeleteService(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeleteTaskDefinitions handles HTTP requests for DeleteTaskDefinitions
func HandleDeleteTaskDefinitions(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeleteTaskDefinitionsRequest
		// TODO: Call service.DeleteTaskDefinitions(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeleteTaskSet handles HTTP requests for DeleteTaskSet
func HandleDeleteTaskSet(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeleteTaskSetRequest
		// TODO: Call service.DeleteTaskSet(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeregisterContainerInstance handles HTTP requests for DeregisterContainerInstance
func HandleDeregisterContainerInstance(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeregisterContainerInstanceRequest
		// TODO: Call service.DeregisterContainerInstance(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDeregisterTaskDefinition handles HTTP requests for DeregisterTaskDefinition
func HandleDeregisterTaskDefinition(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DeregisterTaskDefinitionRequest
		// TODO: Call service.DeregisterTaskDefinition(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeCapacityProviders handles HTTP requests for DescribeCapacityProviders
func HandleDescribeCapacityProviders(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeCapacityProvidersRequest
		// TODO: Call service.DescribeCapacityProviders(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeClusters handles HTTP requests for DescribeClusters
func HandleDescribeClusters(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeClustersRequest
		// TODO: Call service.DescribeClusters(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeContainerInstances handles HTTP requests for DescribeContainerInstances
func HandleDescribeContainerInstances(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeContainerInstancesRequest
		// TODO: Call service.DescribeContainerInstances(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeServiceDeployments handles HTTP requests for DescribeServiceDeployments
func HandleDescribeServiceDeployments(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeServiceDeploymentsRequest
		// TODO: Call service.DescribeServiceDeployments(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeServiceRevisions handles HTTP requests for DescribeServiceRevisions
func HandleDescribeServiceRevisions(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeServiceRevisionsRequest
		// TODO: Call service.DescribeServiceRevisions(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeServices handles HTTP requests for DescribeServices
func HandleDescribeServices(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeServicesRequest
		// TODO: Call service.DescribeServices(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeTaskDefinition handles HTTP requests for DescribeTaskDefinition
func HandleDescribeTaskDefinition(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeTaskDefinitionRequest
		// TODO: Call service.DescribeTaskDefinition(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeTaskSets handles HTTP requests for DescribeTaskSets
func HandleDescribeTaskSets(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeTaskSetsRequest
		// TODO: Call service.DescribeTaskSets(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDescribeTasks handles HTTP requests for DescribeTasks
func HandleDescribeTasks(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DescribeTasksRequest
		// TODO: Call service.DescribeTasks(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleDiscoverPollEndpoint handles HTTP requests for DiscoverPollEndpoint
func HandleDiscoverPollEndpoint(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into DiscoverPollEndpointRequest
		// TODO: Call service.DiscoverPollEndpoint(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleExecuteCommand handles HTTP requests for ExecuteCommand
func HandleExecuteCommand(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ExecuteCommandRequest
		// TODO: Call service.ExecuteCommand(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleGetTaskProtection handles HTTP requests for GetTaskProtection
func HandleGetTaskProtection(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into GetTaskProtectionRequest
		// TODO: Call service.GetTaskProtection(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListAccountSettings handles HTTP requests for ListAccountSettings
func HandleListAccountSettings(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListAccountSettingsRequest
		// TODO: Call service.ListAccountSettings(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListAttributes handles HTTP requests for ListAttributes
func HandleListAttributes(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListAttributesRequest
		// TODO: Call service.ListAttributes(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListClusters handles HTTP requests for ListClusters
func HandleListClusters(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListClustersRequest
		// TODO: Call service.ListClusters(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListContainerInstances handles HTTP requests for ListContainerInstances
func HandleListContainerInstances(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListContainerInstancesRequest
		// TODO: Call service.ListContainerInstances(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListServiceDeployments handles HTTP requests for ListServiceDeployments
func HandleListServiceDeployments(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListServiceDeploymentsRequest
		// TODO: Call service.ListServiceDeployments(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListServices handles HTTP requests for ListServices
func HandleListServices(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListServicesRequest
		// TODO: Call service.ListServices(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListServicesByNamespace handles HTTP requests for ListServicesByNamespace
func HandleListServicesByNamespace(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListServicesByNamespaceRequest
		// TODO: Call service.ListServicesByNamespace(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListTagsForResource handles HTTP requests for ListTagsForResource
func HandleListTagsForResource(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListTagsForResourceRequest
		// TODO: Call service.ListTagsForResource(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListTaskDefinitionFamilies handles HTTP requests for ListTaskDefinitionFamilies
func HandleListTaskDefinitionFamilies(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListTaskDefinitionFamiliesRequest
		// TODO: Call service.ListTaskDefinitionFamilies(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListTaskDefinitions handles HTTP requests for ListTaskDefinitions
func HandleListTaskDefinitions(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListTaskDefinitionsRequest
		// TODO: Call service.ListTaskDefinitions(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleListTasks handles HTTP requests for ListTasks
func HandleListTasks(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into ListTasksRequest
		// TODO: Call service.ListTasks(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandlePutAccountSetting handles HTTP requests for PutAccountSetting
func HandlePutAccountSetting(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into PutAccountSettingRequest
		// TODO: Call service.PutAccountSetting(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandlePutAccountSettingDefault handles HTTP requests for PutAccountSettingDefault
func HandlePutAccountSettingDefault(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into PutAccountSettingDefaultRequest
		// TODO: Call service.PutAccountSettingDefault(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandlePutAttributes handles HTTP requests for PutAttributes
func HandlePutAttributes(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into PutAttributesRequest
		// TODO: Call service.PutAttributes(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandlePutClusterCapacityProviders handles HTTP requests for PutClusterCapacityProviders
func HandlePutClusterCapacityProviders(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into PutClusterCapacityProvidersRequest
		// TODO: Call service.PutClusterCapacityProviders(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleRegisterContainerInstance handles HTTP requests for RegisterContainerInstance
func HandleRegisterContainerInstance(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into RegisterContainerInstanceRequest
		// TODO: Call service.RegisterContainerInstance(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleRegisterTaskDefinition handles HTTP requests for RegisterTaskDefinition
func HandleRegisterTaskDefinition(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into RegisterTaskDefinitionRequest
		// TODO: Call service.RegisterTaskDefinition(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleRunTask handles HTTP requests for RunTask
func HandleRunTask(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into RunTaskRequest
		// TODO: Call service.RunTask(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleStartTask handles HTTP requests for StartTask
func HandleStartTask(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into StartTaskRequest
		// TODO: Call service.StartTask(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleStopServiceDeployment handles HTTP requests for StopServiceDeployment
func HandleStopServiceDeployment(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into StopServiceDeploymentRequest
		// TODO: Call service.StopServiceDeployment(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleStopTask handles HTTP requests for StopTask
func HandleStopTask(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into StopTaskRequest
		// TODO: Call service.StopTask(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleSubmitAttachmentStateChanges handles HTTP requests for SubmitAttachmentStateChanges
func HandleSubmitAttachmentStateChanges(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into SubmitAttachmentStateChangesRequest
		// TODO: Call service.SubmitAttachmentStateChanges(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleSubmitContainerStateChange handles HTTP requests for SubmitContainerStateChange
func HandleSubmitContainerStateChange(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into SubmitContainerStateChangeRequest
		// TODO: Call service.SubmitContainerStateChange(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleSubmitTaskStateChange handles HTTP requests for SubmitTaskStateChange
func HandleSubmitTaskStateChange(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into SubmitTaskStateChangeRequest
		// TODO: Call service.SubmitTaskStateChange(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleTagResource handles HTTP requests for TagResource
func HandleTagResource(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into TagResourceRequest
		// TODO: Call service.TagResource(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUntagResource handles HTTP requests for UntagResource
func HandleUntagResource(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UntagResourceRequest
		// TODO: Call service.UntagResource(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateCapacityProvider handles HTTP requests for UpdateCapacityProvider
func HandleUpdateCapacityProvider(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateCapacityProviderRequest
		// TODO: Call service.UpdateCapacityProvider(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateCluster handles HTTP requests for UpdateCluster
func HandleUpdateCluster(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateClusterRequest
		// TODO: Call service.UpdateCluster(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateClusterSettings handles HTTP requests for UpdateClusterSettings
func HandleUpdateClusterSettings(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateClusterSettingsRequest
		// TODO: Call service.UpdateClusterSettings(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateContainerAgent handles HTTP requests for UpdateContainerAgent
func HandleUpdateContainerAgent(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateContainerAgentRequest
		// TODO: Call service.UpdateContainerAgent(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateContainerInstancesState handles HTTP requests for UpdateContainerInstancesState
func HandleUpdateContainerInstancesState(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateContainerInstancesStateRequest
		// TODO: Call service.UpdateContainerInstancesState(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateService handles HTTP requests for UpdateService
func HandleUpdateService(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateServiceRequest
		// TODO: Call service.UpdateService(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateServicePrimaryTaskSet handles HTTP requests for UpdateServicePrimaryTaskSet
func HandleUpdateServicePrimaryTaskSet(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateServicePrimaryTaskSetRequest
		// TODO: Call service.UpdateServicePrimaryTaskSet(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateTaskProtection handles HTTP requests for UpdateTaskProtection
func HandleUpdateTaskProtection(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateTaskProtectionRequest
		// TODO: Call service.UpdateTaskProtection(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}

// HandleUpdateTaskSet handles HTTP requests for UpdateTaskSet
func HandleUpdateTaskSet(service ECSServiceInterface) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: Parse request body into UpdateTaskSetRequest
		// TODO: Call service.UpdateTaskSet(ctx, req)
		// TODO: Write response as JSON
		w.Header().Set("Content-Type", "application/x-amz-json-1.1")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{}"))
	}
}
